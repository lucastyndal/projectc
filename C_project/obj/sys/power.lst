   1              		.syntax unified
   2              		.arch armv7e-m
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"power.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.align	1
  22              		.global	set_voltage_scale
  23              		.thumb
  24              		.thumb_func
  25              		.type	set_voltage_scale, %function
  26              	set_voltage_scale:
  27              	.LFB392:
  28              		.file 1 "src/sys/power.c"
   1:src/sys/power.c **** #include "power.h"
   2:src/sys/power.c **** #include "devices.h"
   3:src/sys/power.c **** #include "cm4.h"
   4:src/sys/power.c **** 
   5:src/sys/power.c ****  
   6:src/sys/power.c **** void set_voltage_scale(VOS scale) {
  29              		.loc 1 6 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35              	.LBB24:
  36              	.LBB25:
  37              		.file 2 "src/sys/devices.h"
   1:src/sys/devices.h **** #ifndef __IO_H
   2:src/sys/devices.h **** #define __IO_H
   3:src/sys/devices.h **** 
   4:src/sys/devices.h **** #include<stdint.h>
   5:src/sys/devices.h **** #include "cm4.h"
   6:src/sys/devices.h **** 
   7:src/sys/devices.h **** #define __reserved(offset) \
   8:src/sys/devices.h ****   uint32_t _reserved_ ## offset
   9:src/sys/devices.h **** 
  10:src/sys/devices.h **** #define __reserved_interval(offset1,offset2) \
  11:src/sys/devices.h ****   uint32_t _reserved_ ## offset1 ## _ ## offset2[((offset2)-(offset1))/4]
  12:src/sys/devices.h **** 
  13:src/sys/devices.h **** /* PM §4.2.10 */ 
  14:src/sys/devices.h **** struct MPU_registers {
  15:src/sys/devices.h ****   uint32_t TYPER;
  16:src/sys/devices.h ****   uint32_t CTRL;
  17:src/sys/devices.h ****   uint32_t RNR;
  18:src/sys/devices.h ****   uint32_t RBAR;
  19:src/sys/devices.h ****   uint32_t RASR;
  20:src/sys/devices.h ****   uint32_t RBAR_A1;
  21:src/sys/devices.h ****   uint32_t RASR_A1;
  22:src/sys/devices.h ****   uint32_t RBAR_A2;
  23:src/sys/devices.h ****   uint32_t RASR_A2;
  24:src/sys/devices.h ****   uint32_t RBAR_A3;
  25:src/sys/devices.h ****   uint32_t RASR_A3;
  26:src/sys/devices.h **** };
  27:src/sys/devices.h **** 
  28:src/sys/devices.h **** /* PM §4.3.11 */ 
  29:src/sys/devices.h **** struct NVIC_registers {
  30:src/sys/devices.h ****   uint32_t ISER[3];
  31:src/sys/devices.h ****   __reserved_interval(0x0c,0x80);
  32:src/sys/devices.h ****   uint32_t ICER[3];
  33:src/sys/devices.h ****   __reserved_interval(0x8c,0x100);
  34:src/sys/devices.h ****   uint32_t ISPR[3];
  35:src/sys/devices.h ****   __reserved_interval(0x10c,0x180);
  36:src/sys/devices.h ****   uint32_t ICPR[3];
  37:src/sys/devices.h ****   __reserved_interval(0x18c,0x200);
  38:src/sys/devices.h ****   uint32_t IABR[3];
  39:src/sys/devices.h ****   __reserved_interval(0x20c,0x300);
  40:src/sys/devices.h ****   uint8_t  IP[81];
  41:src/sys/devices.h ****   uint8_t _reserved_bytes[3];
  42:src/sys/devices.h **** };
  43:src/sys/devices.h **** 
  44:src/sys/devices.h **** /* PM §4.4.19 */ 
  45:src/sys/devices.h **** struct SCB_registers {
  46:src/sys/devices.h ****   uint32_t CPUID;
  47:src/sys/devices.h ****   uint32_t ICSR;
  48:src/sys/devices.h ****   uint32_t VTOR;
  49:src/sys/devices.h ****   uint32_t AIRCR;
  50:src/sys/devices.h ****   uint32_t SCR;
  51:src/sys/devices.h ****   uint32_t CCR;
  52:src/sys/devices.h ****   uint32_t SHPR1;
  53:src/sys/devices.h ****   uint32_t SHPR2;
  54:src/sys/devices.h ****   uint32_t SHPR3;
  55:src/sys/devices.h ****   uint32_t SHCRS;
  56:src/sys/devices.h ****   uint32_t CFSR;
  57:src/sys/devices.h ****   uint32_t HFSR;
  58:src/sys/devices.h ****   uint32_t MMAR;
  59:src/sys/devices.h ****   uint32_t BFAR;
  60:src/sys/devices.h ****   uint32_t AFSR;
  61:src/sys/devices.h **** };
  62:src/sys/devices.h **** 
  63:src/sys/devices.h **** /* PM §4.5.6 */ 
  64:src/sys/devices.h **** struct STK_registers {
  65:src/sys/devices.h ****   uint32_t CTRL;
  66:src/sys/devices.h ****   uint32_t LOAD;
  67:src/sys/devices.h ****   uint32_t VAL;
  68:src/sys/devices.h ****   uint32_t CALIB;
  69:src/sys/devices.h **** };
  70:src/sys/devices.h **** 
  71:src/sys/devices.h **** /* PM §4.6 */ 
  72:src/sys/devices.h **** struct FPU_registers {
  73:src/sys/devices.h ****   __reserved(0x0);
  74:src/sys/devices.h ****   uint32_t CCR;
  75:src/sys/devices.h ****   uint32_t CAR;
  76:src/sys/devices.h ****   uint32_t DSCR;
  77:src/sys/devices.h **** };
  78:src/sys/devices.h **** 
  79:src/sys/devices.h **** 
  80:src/sys/devices.h **** /* RM §3.6.7 */ 
  81:src/sys/devices.h **** struct FLASH_registers {
  82:src/sys/devices.h ****   uint32_t ACR;
  83:src/sys/devices.h ****   uint32_t KEYR;
  84:src/sys/devices.h ****   uint32_t OPTKEYR;
  85:src/sys/devices.h ****   uint32_t SR;
  86:src/sys/devices.h ****   uint32_t CR;
  87:src/sys/devices.h ****   uint32_t OPTCR;  
  88:src/sys/devices.h **** };
  89:src/sys/devices.h **** 
  90:src/sys/devices.h **** /* RM §4.4.4 */
  91:src/sys/devices.h **** struct CRC_registers {
  92:src/sys/devices.h ****   uint32_t DR;
  93:src/sys/devices.h ****   uint32_t ICR;
  94:src/sys/devices.h ****   uint32_t CR;
  95:src/sys/devices.h **** };
  96:src/sys/devices.h **** 
  97:src/sys/devices.h **** /* RM §5.5 */
  98:src/sys/devices.h **** struct PWR_registers {
  99:src/sys/devices.h ****   uint32_t CR;
 100:src/sys/devices.h ****   uint32_t CSR;
 101:src/sys/devices.h **** };
 102:src/sys/devices.h **** 
 103:src/sys/devices.h **** /* RM §6.3.28 */
 104:src/sys/devices.h **** struct RCC_registers {
 105:src/sys/devices.h ****   uint32_t CR;
 106:src/sys/devices.h ****   uint32_t PLLCFGR;
 107:src/sys/devices.h ****   uint32_t CFGR;
 108:src/sys/devices.h ****   uint32_t CIR;
 109:src/sys/devices.h ****   uint32_t AHB1RSTR;
 110:src/sys/devices.h ****   uint32_t AHB2RSTR;
 111:src/sys/devices.h ****   uint32_t AHB3RSTR;
 112:src/sys/devices.h ****   __reserved(0x1c);
 113:src/sys/devices.h ****   uint32_t APB1RSTR;
 114:src/sys/devices.h ****   uint32_t APB2RSTR;
 115:src/sys/devices.h ****   __reserved(0x28);
 116:src/sys/devices.h ****   __reserved(0x2c);
 117:src/sys/devices.h ****   uint32_t AHB1ENR;
 118:src/sys/devices.h ****   uint32_t AHB2ENR;
 119:src/sys/devices.h ****   uint32_t AHB3ENR;
 120:src/sys/devices.h ****   __reserved(0x3c);
 121:src/sys/devices.h ****   uint32_t APB1ENR;
 122:src/sys/devices.h ****   uint32_t APB2ENR;
 123:src/sys/devices.h ****   __reserved(0x48);
 124:src/sys/devices.h ****   __reserved(0x4c);
 125:src/sys/devices.h ****   uint32_t AHB1LPENR;
 126:src/sys/devices.h ****   uint32_t AHB2LPENR;
 127:src/sys/devices.h ****   uint32_t AHB3LPENR;
 128:src/sys/devices.h ****   __reserved(0x5c);
 129:src/sys/devices.h ****   uint32_t APB1LPENR;
 130:src/sys/devices.h ****   uint32_t APB2LPENR;
 131:src/sys/devices.h ****   __reserved(0x68);
 132:src/sys/devices.h ****   __reserved(0x6c);
 133:src/sys/devices.h ****   uint32_t BDCR;
 134:src/sys/devices.h ****   uint32_t CSR;
 135:src/sys/devices.h ****   __reserved(0x78);
 136:src/sys/devices.h ****   __reserved(0x7c);
 137:src/sys/devices.h ****   uint32_t SSCGR;
 138:src/sys/devices.h ****   uint32_t PLLI2SCFGR;
 139:src/sys/devices.h ****   uint32_t PLLSAICFGR;
 140:src/sys/devices.h ****   uint32_t DCKCFGR;
 141:src/sys/devices.h ****   uint32_t CKGATENR;
 142:src/sys/devices.h ****   uint32_t DCKCFGR2;
 143:src/sys/devices.h **** };
 144:src/sys/devices.h **** 
 145:src/sys/devices.h **** /* RM §7.4.11 */
 146:src/sys/devices.h **** struct GPIO_registers {
 147:src/sys/devices.h ****   uint32_t MODER;
 148:src/sys/devices.h ****   uint32_t OTYPER;
 149:src/sys/devices.h ****   uint32_t OSPEEDR;
 150:src/sys/devices.h ****   uint32_t PUPDR;
 151:src/sys/devices.h ****   uint32_t IDR;
 152:src/sys/devices.h ****   uint32_t ODR;
 153:src/sys/devices.h ****   uint32_t BSRR;
 154:src/sys/devices.h ****   uint32_t LCKR;
 155:src/sys/devices.h ****   uint32_t AFRL;
 156:src/sys/devices.h ****   uint32_t AFRH;
 157:src/sys/devices.h **** };
 158:src/sys/devices.h **** 
 159:src/sys/devices.h **** /* RM §8.2.9 */
 160:src/sys/devices.h **** struct SYSCFG_registers {
 161:src/sys/devices.h ****   uint32_t MEMRMP;
 162:src/sys/devices.h ****   uint32_t PMC;
 163:src/sys/devices.h ****   uint32_t EXTICR1;
 164:src/sys/devices.h ****   uint32_t EXTICR2;
 165:src/sys/devices.h ****   uint32_t EXTICR3;
 166:src/sys/devices.h ****   uint32_t EXTICR4;
 167:src/sys/devices.h ****   __reserved(0x18);
 168:src/sys/devices.h ****   __reserved(0x1c);
 169:src/sys/devices.h ****   uint32_t CMPCR;
 170:src/sys/devices.h ****   __reserved(0x24);
 171:src/sys/devices.h ****   __reserved(0x28);
 172:src/sys/devices.h ****   uint32_t CFGR;
 173:src/sys/devices.h **** };
 174:src/sys/devices.h **** 
 175:src/sys/devices.h **** /* RM §9.5.11 */
 176:src/sys/devices.h **** struct DMA_Sx_registers {
 177:src/sys/devices.h ****   uint32_t CR;
 178:src/sys/devices.h ****   uint32_t NDTR;
 179:src/sys/devices.h ****   void* PAR;
 180:src/sys/devices.h ****   void* M0AR;
 181:src/sys/devices.h ****   void* M1AR;
 182:src/sys/devices.h ****   uint32_t FCR;
 183:src/sys/devices.h **** };
 184:src/sys/devices.h **** struct DMA_registers {
 185:src/sys/devices.h ****   uint32_t LISR;
 186:src/sys/devices.h ****   uint32_t HISR;
 187:src/sys/devices.h ****   uint32_t LIFCR;
 188:src/sys/devices.h ****   uint32_t HIFCR;
 189:src/sys/devices.h ****   struct DMA_Sx_registers S[8];
 190:src/sys/devices.h **** };
 191:src/sys/devices.h **** 
 192:src/sys/devices.h **** /* RM §10.3.7 */
 193:src/sys/devices.h **** struct EXTI_registers {
 194:src/sys/devices.h ****   uint32_t IMR;
 195:src/sys/devices.h ****   uint32_t EMR;
 196:src/sys/devices.h ****   uint32_t RTSR;
 197:src/sys/devices.h ****   uint32_t FTSR;
 198:src/sys/devices.h ****   uint32_t SWIER;
 199:src/sys/devices.h ****   uint32_t PR;
 200:src/sys/devices.h **** };
 201:src/sys/devices.h **** 
 202:src/sys/devices.h **** /* RM §11.8 */
 203:src/sys/devices.h **** struct FMC_registers {
 204:src/sys/devices.h ****   uint32_t BCR1;
 205:src/sys/devices.h ****   uint32_t BCR2;
 206:src/sys/devices.h ****   uint32_t BCR3;
 207:src/sys/devices.h ****   uint32_t BCR4;
 208:src/sys/devices.h ****   uint32_t BTR1;
 209:src/sys/devices.h ****   uint32_t BTR2;
 210:src/sys/devices.h ****   uint32_t BTR3;
 211:src/sys/devices.h ****   uint32_t BTR4;
 212:src/sys/devices.h ****   uint32_t BWTR1;
 213:src/sys/devices.h ****   uint32_t BWTR2;
 214:src/sys/devices.h ****   uint32_t BWTR3;
 215:src/sys/devices.h ****   uint32_t BWTR4;
 216:src/sys/devices.h ****   uint32_t PCR;
 217:src/sys/devices.h ****   uint32_t SR;
 218:src/sys/devices.h ****   uint32_t PMEM;
 219:src/sys/devices.h ****   uint32_t PATT;
 220:src/sys/devices.h ****   uint32_t ECCR;
 221:src/sys/devices.h ****   uint32_t SDCR1;
 222:src/sys/devices.h ****   uint32_t SDCR2;
 223:src/sys/devices.h ****   uint32_t SDTR1;
 224:src/sys/devices.h ****   uint32_t SDTR2;
 225:src/sys/devices.h ****   uint32_t SDCMR;
 226:src/sys/devices.h ****   uint32_t SDRTR;
 227:src/sys/devices.h ****   uint32_t SDSR;
 228:src/sys/devices.h **** };
 229:src/sys/devices.h **** 
 230:src/sys/devices.h **** /* RM §12.5.14 */
 231:src/sys/devices.h **** struct QUADSPI_registers {
 232:src/sys/devices.h ****   uint32_t CR;
 233:src/sys/devices.h ****   uint32_t DCR;
 234:src/sys/devices.h ****   uint32_t SR;
 235:src/sys/devices.h ****   uint32_t FCR;
 236:src/sys/devices.h ****   uint32_t DLR;
 237:src/sys/devices.h ****   uint32_t CCR;
 238:src/sys/devices.h ****   uint32_t AR;
 239:src/sys/devices.h ****   uint32_t ABR;
 240:src/sys/devices.h ****   uint32_t DR;
 241:src/sys/devices.h ****   uint32_t PSMKR;
 242:src/sys/devices.h ****   uint32_t PSMAR;
 243:src/sys/devices.h ****   uint32_t PIR;
 244:src/sys/devices.h ****   uint32_t LPTR;
 245:src/sys/devices.h **** };
 246:src/sys/devices.h **** 
 247:src/sys/devices.h **** /* RM §13.13.18 */
 248:src/sys/devices.h **** struct ADCx_registers {
 249:src/sys/devices.h ****   uint32_t SR;
 250:src/sys/devices.h ****   uint32_t CR1;
 251:src/sys/devices.h ****   uint32_t CR2;
 252:src/sys/devices.h ****   uint32_t SMPR1;
 253:src/sys/devices.h ****   uint32_t SMPR2;
 254:src/sys/devices.h ****   uint32_t JOFR1;
 255:src/sys/devices.h ****   uint32_t JOFR2;
 256:src/sys/devices.h ****   uint32_t JOFR3;
 257:src/sys/devices.h ****   uint32_t JOFR4;
 258:src/sys/devices.h ****   uint32_t HTR;
 259:src/sys/devices.h ****   uint32_t LTR;
 260:src/sys/devices.h ****   uint32_t SQR1;
 261:src/sys/devices.h ****   uint32_t SQR2;
 262:src/sys/devices.h ****   uint32_t SQR3;
 263:src/sys/devices.h ****   uint32_t JSQR;
 264:src/sys/devices.h ****   uint32_t JDR1;
 265:src/sys/devices.h ****   uint32_t JDR2;
 266:src/sys/devices.h ****   uint32_t JDR3;
 267:src/sys/devices.h ****   uint32_t JDR4;
 268:src/sys/devices.h ****   uint32_t DR;
 269:src/sys/devices.h **** };
 270:src/sys/devices.h **** 
 271:src/sys/devices.h **** struct ADC_common_registers {
 272:src/sys/devices.h ****   uint32_t CSR;
 273:src/sys/devices.h ****   uint32_t CCR;
 274:src/sys/devices.h ****   uint32_t CDR;
 275:src/sys/devices.h **** };
 276:src/sys/devices.h **** 
 277:src/sys/devices.h **** 
 278:src/sys/devices.h **** /* RM §14.5.15 */
 279:src/sys/devices.h **** struct DAC_registers {
 280:src/sys/devices.h ****   uint32_t CR;
 281:src/sys/devices.h ****   uint32_t SWTRIGR;
 282:src/sys/devices.h ****   uint32_t DHR12R1;
 283:src/sys/devices.h ****   uint32_t DHR12L1;
 284:src/sys/devices.h ****   uint32_t DHR8R1;
 285:src/sys/devices.h ****   uint32_t DHR12R2;
 286:src/sys/devices.h ****   uint32_t DHR12L2;
 287:src/sys/devices.h ****   uint32_t DHR8R2;
 288:src/sys/devices.h ****   uint32_t DHR12RD;
 289:src/sys/devices.h ****   uint32_t DHR12LD;
 290:src/sys/devices.h ****   uint32_t DHR8RD;
 291:src/sys/devices.h ****   uint32_t DOR1;
 292:src/sys/devices.h ****   uint32_t DOR2;
 293:src/sys/devices.h ****   uint32_t SR;
 294:src/sys/devices.h **** };
 295:src/sys/devices.h **** 
 296:src/sys/devices.h **** /* RM §15.8.12 */
 297:src/sys/devices.h **** struct DCMI_registers {
 298:src/sys/devices.h ****   uint32_t CR;
 299:src/sys/devices.h ****   uint32_t SR;
 300:src/sys/devices.h ****   uint32_t RIS;
 301:src/sys/devices.h ****   uint32_t IER;
 302:src/sys/devices.h ****   uint32_t MIS;
 303:src/sys/devices.h ****   uint32_t ICR;
 304:src/sys/devices.h ****   uint32_t ESCR;
 305:src/sys/devices.h ****   uint32_t ESUR;
 306:src/sys/devices.h ****   uint32_t CWSTRT;
 307:src/sys/devices.h ****   uint32_t CWSIZE;
 308:src/sys/devices.h ****   uint32_t DR;
 309:src/sys/devices.h **** };
 310:src/sys/devices.h **** 
 311:src/sys/devices.h **** /* RM §16.4.21 TIM1,8 */
 312:src/sys/devices.h **** /* RM §17.4.21 TIM2,3,4,5 */
 313:src/sys/devices.h **** /* RM §18.4.13 TIM9,12 */
 314:src/sys/devices.h **** /* RM §18.5.1  TIM10,11,13,14 */
 315:src/sys/devices.h **** /* RM §19.4.9  TIM6,7 */
 316:src/sys/devices.h **** struct TIMx_registers {
 317:src/sys/devices.h ****   uint32_t CR1;
 318:src/sys/devices.h ****   uint32_t CR2;
 319:src/sys/devices.h ****   uint32_t SMCR;
 320:src/sys/devices.h ****   uint32_t DIER;
 321:src/sys/devices.h ****   uint32_t SR;
 322:src/sys/devices.h ****   uint32_t EGR;
 323:src/sys/devices.h ****   uint32_t CCMR1;
 324:src/sys/devices.h ****   uint32_t CCMR2;
 325:src/sys/devices.h ****   uint32_t CCER;
 326:src/sys/devices.h ****   uint32_t CNT;
 327:src/sys/devices.h ****   uint32_t PSC;
 328:src/sys/devices.h ****   uint32_t ARR;
 329:src/sys/devices.h ****   uint32_t RCR;
 330:src/sys/devices.h ****   uint32_t CCR1;
 331:src/sys/devices.h ****   uint32_t CCR2;
 332:src/sys/devices.h ****   uint32_t CCR3;
 333:src/sys/devices.h ****   uint32_t CCR4;
 334:src/sys/devices.h ****   uint32_t BDTR;
 335:src/sys/devices.h ****   uint32_t DCR;
 336:src/sys/devices.h ****   uint32_t DMAR;
 337:src/sys/devices.h ****   uint32_t OR;
 338:src/sys/devices.h **** };
 339:src/sys/devices.h **** 
 340:src/sys/devices.h **** /* RM §20.4.5 */
 341:src/sys/devices.h **** struct IWDG_registers {
 342:src/sys/devices.h ****   uint32_t KR;
 343:src/sys/devices.h ****   uint32_t PR;
 344:src/sys/devices.h ****   uint32_t RLR;
 345:src/sys/devices.h ****   uint32_t SR;
 346:src/sys/devices.h **** };
 347:src/sys/devices.h **** 
 348:src/sys/devices.h **** /* RM §21.6.4 */
 349:src/sys/devices.h **** struct WWDG_registers {
 350:src/sys/devices.h ****   uint32_t CR;
 351:src/sys/devices.h ****   uint32_t CFR;
 352:src/sys/devices.h ****   uint32_t SR;
 353:src/sys/devices.h **** };
 354:src/sys/devices.h **** 
 355:src/sys/devices.h **** /* RM §22.6.21 */
 356:src/sys/devices.h **** struct RTC_registers {
 357:src/sys/devices.h ****   uint32_t TR;
 358:src/sys/devices.h ****   uint32_t DR;
 359:src/sys/devices.h ****   uint32_t CR;
 360:src/sys/devices.h ****   uint32_t ISR;
 361:src/sys/devices.h ****   uint32_t PRER;
 362:src/sys/devices.h ****   uint32_t WUTR;
 363:src/sys/devices.h ****   uint32_t CALIBR;
 364:src/sys/devices.h ****   uint32_t ALRMAR;
 365:src/sys/devices.h ****   uint32_t ALRMBR;
 366:src/sys/devices.h ****   uint32_t WPR;
 367:src/sys/devices.h ****   uint32_t SSR;
 368:src/sys/devices.h ****   uint32_t SHIFTR;
 369:src/sys/devices.h ****   uint32_t TSTR;
 370:src/sys/devices.h ****   uint32_t TSSSR;
 371:src/sys/devices.h ****   uint32_t CALR;
 372:src/sys/devices.h ****   uint32_t TAFCR;
 373:src/sys/devices.h ****   uint32_t ALRMASSR;
 374:src/sys/devices.h ****   uint32_t ALRMBSSR;
 375:src/sys/devices.h ****   uint32_t BKPR[20];
 376:src/sys/devices.h **** };
 377:src/sys/devices.h **** 
 378:src/sys/devices.h **** /* RM §23.7.12 */
 379:src/sys/devices.h **** struct FMPI2C_registers {
 380:src/sys/devices.h ****   uint32_t CR1;
 381:src/sys/devices.h ****   uint32_t CR2;
 382:src/sys/devices.h ****   uint32_t OAR1;
 383:src/sys/devices.h ****   uint32_t OAR2;
 384:src/sys/devices.h ****   uint32_t TIMINGR;
 385:src/sys/devices.h ****   uint32_t TIMEOUTR;
 386:src/sys/devices.h ****   uint32_t ISR;
 387:src/sys/devices.h ****   uint32_t ICR;
 388:src/sys/devices.h ****   uint32_t PECR;
 389:src/sys/devices.h ****   uint32_t RXDR;
 390:src/sys/devices.h ****   uint32_t TXDR;
 391:src/sys/devices.h **** };
 392:src/sys/devices.h **** 
 393:src/sys/devices.h **** /* RM §24.6.14 */
 394:src/sys/devices.h **** struct I2C_registers {
 395:src/sys/devices.h ****   uint32_t CR1;
 396:src/sys/devices.h ****   uint32_t CR2;
 397:src/sys/devices.h ****   uint32_t OAR1;
 398:src/sys/devices.h ****   uint32_t OAR2;
 399:src/sys/devices.h ****   uint32_t DR;
 400:src/sys/devices.h ****   uint32_t SR1;
 401:src/sys/devices.h ****   uint32_t SR2;
 402:src/sys/devices.h ****   uint32_t CCR;
 403:src/sys/devices.h ****   uint32_t TRISE;
 404:src/sys/devices.h ****   uint32_t FLTR;
 405:src/sys/devices.h **** };
 406:src/sys/devices.h **** 
 407:src/sys/devices.h **** /* RM §25.6.8 */
 408:src/sys/devices.h **** struct USART_registers {
 409:src/sys/devices.h ****   uint32_t SR;
 410:src/sys/devices.h ****   uint32_t DR;
 411:src/sys/devices.h ****   uint32_t BRR;
 412:src/sys/devices.h ****   uint32_t CR1;
 413:src/sys/devices.h ****   uint32_t CR2;
 414:src/sys/devices.h ****   uint32_t CR3;
 415:src/sys/devices.h ****   uint32_t GTPR;
 416:src/sys/devices.h **** };
 417:src/sys/devices.h **** 
 418:src/sys/devices.h **** /* RM §26.7.10 */
 419:src/sys/devices.h **** struct SPI_I2S_registers {
 420:src/sys/devices.h ****   uint32_t CR1;
 421:src/sys/devices.h ****   uint32_t CR2;
 422:src/sys/devices.h ****   uint32_t SR;
 423:src/sys/devices.h ****   uint32_t DR;
 424:src/sys/devices.h ****   uint32_t CRCPR;
 425:src/sys/devices.h ****   uint32_t RXCRCR;
 426:src/sys/devices.h ****   uint32_t TXCRCR;
 427:src/sys/devices.h ****   uint32_t I2SCFGR;
 428:src/sys/devices.h ****   uint32_t I2SPR;
 429:src/sys/devices.h **** };
 430:src/sys/devices.h **** 
 431:src/sys/devices.h **** /* RM §27.5.10 */
 432:src/sys/devices.h **** struct SPDIFRX_registers {
 433:src/sys/devices.h ****   uint32_t CR;
 434:src/sys/devices.h ****   uint32_t IMR;
 435:src/sys/devices.h ****   uint32_t SR;
 436:src/sys/devices.h ****   uint32_t IFCR;
 437:src/sys/devices.h ****   uint32_t DR;
 438:src/sys/devices.h ****   uint32_t CSR;
 439:src/sys/devices.h ****   uint32_t DIR;
 440:src/sys/devices.h **** };
 441:src/sys/devices.h **** 
 442:src/sys/devices.h **** /* RM §28.5.10 */
 443:src/sys/devices.h **** struct SAI_x_registers {
 444:src/sys/devices.h ****   uint32_t CR1;
 445:src/sys/devices.h ****   uint32_t CR2;
 446:src/sys/devices.h ****   uint32_t FRCR;
 447:src/sys/devices.h ****   uint32_t SLOTR;
 448:src/sys/devices.h ****   uint32_t IM;
 449:src/sys/devices.h ****   uint32_t SR;
 450:src/sys/devices.h ****   uint32_t CLRFR;
 451:src/sys/devices.h ****   uint32_t DR;
 452:src/sys/devices.h **** };
 453:src/sys/devices.h **** 
 454:src/sys/devices.h **** struct SAI_registers {
 455:src/sys/devices.h ****   uint32_t GCR;
 456:src/sys/devices.h ****   struct SAI_x_registers A;
 457:src/sys/devices.h ****   struct SAI_x_registers B;
 458:src/sys/devices.h **** };
 459:src/sys/devices.h **** 
 460:src/sys/devices.h **** /* RM §29.8.16 */
 461:src/sys/devices.h **** struct SDIO_registers {
 462:src/sys/devices.h ****   uint32_t POWER;
 463:src/sys/devices.h ****   uint32_t CLKCR;
 464:src/sys/devices.h ****   uint32_t CMD;
 465:src/sys/devices.h ****   uint32_t RESPCMD;
 466:src/sys/devices.h ****   uint32_t RESP1;
 467:src/sys/devices.h ****   uint32_t RESP2;
 468:src/sys/devices.h ****   uint32_t RESP3;
 469:src/sys/devices.h ****   uint32_t RESP4;
 470:src/sys/devices.h ****   uint32_t DTIMER;
 471:src/sys/devices.h ****   uint32_t DLEN;
 472:src/sys/devices.h ****   uint32_t DCTRL;
 473:src/sys/devices.h ****   uint32_t DCOUNT;
 474:src/sys/devices.h ****   uint32_t STA;
 475:src/sys/devices.h ****   uint32_t ICR;
 476:src/sys/devices.h ****   uint32_t MASK;
 477:src/sys/devices.h ****   __reserved(0x40);
 478:src/sys/devices.h ****   __reserved(0x44);
 479:src/sys/devices.h ****   uint32_t FIFOCNT;
 480:src/sys/devices.h ****   __reserved_interval(0x4c,0x80);
 481:src/sys/devices.h ****   uint32_t FIFO[32];
 482:src/sys/devices.h **** };
 483:src/sys/devices.h ****   
 484:src/sys/devices.h **** /* RM §30.9.5 */
 485:src/sys/devices.h **** struct bxCAN_TxRx_registers {
 486:src/sys/devices.h ****   uint32_t IR;
 487:src/sys/devices.h ****   uint32_t DTR;
 488:src/sys/devices.h ****   uint32_t DLR;
 489:src/sys/devices.h ****   uint32_t DHR;
 490:src/sys/devices.h **** };
 491:src/sys/devices.h **** 
 492:src/sys/devices.h **** struct bxCAN_registers {
 493:src/sys/devices.h ****   uint32_t MCR;
 494:src/sys/devices.h ****   uint32_t MSR;
 495:src/sys/devices.h ****   uint32_t TSR;
 496:src/sys/devices.h ****   uint32_t RF0R;
 497:src/sys/devices.h ****   uint32_t RF1R;
 498:src/sys/devices.h ****   uint32_t IER;
 499:src/sys/devices.h ****   uint32_t ESR;
 500:src/sys/devices.h ****   uint32_t BTR;
 501:src/sys/devices.h ****   __reserved_interval(0x20,0x180);
 502:src/sys/devices.h ****   struct bxCAN_TxRx_registers Tx[3];
 503:src/sys/devices.h ****   struct bxCAN_TxRx_registers Rx[2];
 504:src/sys/devices.h ****   __reserved_interval(0x1d0,0x200);
 505:src/sys/devices.h ****   uint32_t FMR;
 506:src/sys/devices.h ****   uint32_t FM1R;
 507:src/sys/devices.h ****   __reserved(0x208);
 508:src/sys/devices.h ****   uint32_t FS1R;
 509:src/sys/devices.h ****   __reserved(0x210);
 510:src/sys/devices.h ****   uint32_t FFA1R;
 511:src/sys/devices.h ****   __reserved(0x218);
 512:src/sys/devices.h ****   uint32_t FA1R;
 513:src/sys/devices.h ****   __reserved_interval(0x220,0x240);
 514:src/sys/devices.h ****   struct {uint32_t R1; uint32_t R2;} F[28];
 515:src/sys/devices.h **** };
 516:src/sys/devices.h **** 
 517:src/sys/devices.h **** /* RM §32.7.7 */
 518:src/sys/devices.h **** struct OTG_registers {
 519:src/sys/devices.h ****    /* TODO */
 520:src/sys/devices.h **** };
 521:src/sys/devices.h **** 
 522:src/sys/devices.h **** /* RM §32.7.7 */
 523:src/sys/devices.h **** struct HDMI_CEC_registers {
 524:src/sys/devices.h ****   uint32_t CR;
 525:src/sys/devices.h ****   uint32_t CFGR;
 526:src/sys/devices.h ****   uint32_t TXDR;
 527:src/sys/devices.h ****   uint32_t RXDR;
 528:src/sys/devices.h ****   uint32_t ISR;
 529:src/sys/devices.h ****   uint32_t IER;
 530:src/sys/devices.h **** };
 531:src/sys/devices.h **** 
 532:src/sys/devices.h **** /* RM §33.18 */
 533:src/sys/devices.h **** struct DBGMCU_registers {
 534:src/sys/devices.h ****   uint32_t IDCODE;
 535:src/sys/devices.h ****   uint32_t CR;
 536:src/sys/devices.h ****   uint32_t APB1FZ;
 537:src/sys/devices.h ****   uint32_t APB2FZ;
 538:src/sys/devices.h **** };
 539:src/sys/devices.h **** 
 540:src/sys/devices.h **** /* Constant values */
 541:src/sys/devices.h **** 
 542:src/sys/devices.h **** extern const uint16_t Package_data;
 543:src/sys/devices.h **** extern const uint16_t TS_CAL2;
 544:src/sys/devices.h **** extern const uint16_t TS_CAL1;
 545:src/sys/devices.h **** extern const uint16_t VREFIN_CAL;
 546:src/sys/devices.h **** extern const uint16_t Flash_size;
 547:src/sys/devices.h **** extern const uint32_t U_ID[3];
 548:src/sys/devices.h **** 
 549:src/sys/devices.h **** /* Core Devices base addresses */
 550:src/sys/devices.h **** 
 551:src/sys/devices.h **** extern volatile struct DBGMCU_registers DBG;
 552:src/sys/devices.h **** 
 553:src/sys/devices.h **** extern volatile struct FPU_registers FPU;
 554:src/sys/devices.h **** extern volatile uint32_t NVIC_STIR;
 555:src/sys/devices.h **** extern volatile struct MPU_registers MPU;
 556:src/sys/devices.h **** extern volatile uint32_t FPU_CPACR;
 557:src/sys/devices.h **** extern volatile struct SCB_registers SCB;
 558:src/sys/devices.h **** extern volatile struct NVIC_registers NVIC;
 559:src/sys/devices.h **** extern volatile struct STK_registers SysTick;
 560:src/sys/devices.h **** 
 561:src/sys/devices.h **** /* Devices base addresses */
 562:src/sys/devices.h **** 
 563:src/sys/devices.h **** extern volatile struct QUADSPI_registers QUADSPI;
 564:src/sys/devices.h **** 
 565:src/sys/devices.h **** extern volatile struct DCMI_registers DCMI;
 566:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_FS;
 567:src/sys/devices.h **** 
 568:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_HS;
 569:src/sys/devices.h **** extern volatile struct DMA_registers DMA2;
 570:src/sys/devices.h **** extern volatile struct DMA_registers DMA1;
 571:src/sys/devices.h **** extern uint32_t BKPSRAM[1024];
 572:src/sys/devices.h **** extern volatile struct FLASH_registers FLASH;
 573:src/sys/devices.h **** extern volatile struct RCC_registers RCC;
 574:src/sys/devices.h **** extern volatile struct CRC_registers CRC;
 575:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOH;
 576:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOG;
 577:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOF;
 578:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOE;
 579:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOD;
 580:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOC;
 581:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOB;
 582:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOA;
 583:src/sys/devices.h **** 
 584:src/sys/devices.h **** extern volatile struct SAI_registers SAI2;
 585:src/sys/devices.h **** extern volatile struct SAI_registers SAI1;
 586:src/sys/devices.h **** 
 587:src/sys/devices.h **** extern volatile struct TIMx_registers TIM11;
 588:src/sys/devices.h **** extern volatile struct TIMx_registers TIM10;
 589:src/sys/devices.h **** extern volatile struct TIMx_registers TIM9;
 590:src/sys/devices.h **** extern volatile struct EXTI_registers EXTI;
 591:src/sys/devices.h **** extern volatile struct SYSCFG_registers SYSCFG;
 592:src/sys/devices.h **** extern volatile struct SPI_registers SPI4;
 593:src/sys/devices.h **** extern volatile struct SPI_registers SPI1;
 594:src/sys/devices.h **** extern volatile struct SDIO_registers SDMMC;
 595:src/sys/devices.h **** extern volatile struct ADCx_registers ADC1;
 596:src/sys/devices.h **** extern volatile struct ADCx_registers ADC2;
 597:src/sys/devices.h **** extern volatile struct ADCx_registers ADC3;
 598:src/sys/devices.h **** extern volatile struct ADC_common_registers ADC_common;
 599:src/sys/devices.h **** extern volatile struct USART_registers USART6;
 600:src/sys/devices.h **** extern volatile struct USART_registers USART1;
 601:src/sys/devices.h **** extern volatile struct TIMx_registers TIM8;
 602:src/sys/devices.h **** extern volatile struct TIMx_registers TIM1;
 603:src/sys/devices.h **** 
 604:src/sys/devices.h **** extern volatile struct DAC_registers DAC;
 605:src/sys/devices.h **** extern volatile struct PWR_registers PWR;
 606:src/sys/devices.h **** extern volatile struct HDMI_CEC_registers HDMI_CEC;
 607:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN2;
 608:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN1;
 609:src/sys/devices.h **** extern volatile struct FMPI2C_registers FMPI2C1;
 610:src/sys/devices.h **** extern volatile struct I2C_registers I2C3;
 611:src/sys/devices.h **** extern volatile struct I2C_registers I2C2;
 612:src/sys/devices.h **** extern volatile struct I2C_registers I2C1;
 613:src/sys/devices.h **** extern volatile struct USART_registers UART5;
 614:src/sys/devices.h **** extern volatile struct USART_registers UART4;
 615:src/sys/devices.h **** extern volatile struct USART_registers USART3;
 616:src/sys/devices.h **** extern volatile struct USART_registers USART2;
 617:src/sys/devices.h **** extern volatile struct SPDIF_RX_registers SPDIF_RX;
 618:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI3_I2S3;
 619:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI2_I2S2;
 620:src/sys/devices.h **** extern volatile struct IWDG_registers IWDG;
 621:src/sys/devices.h **** extern volatile struct WWDG_registers WWDG;
 622:src/sys/devices.h **** extern volatile struct RTC_registers RTC_BKP;
 623:src/sys/devices.h **** extern volatile struct TIMx_registers TIM14;
 624:src/sys/devices.h **** extern volatile struct TIMx_registers TIM13;
 625:src/sys/devices.h **** extern volatile struct TIMx_registers TIM12;
 626:src/sys/devices.h **** extern volatile struct TIMx_registers TIM7;
 627:src/sys/devices.h **** extern volatile struct TIMx_registers TIM6;
 628:src/sys/devices.h **** extern volatile struct TIMx_registers TIM5;
 629:src/sys/devices.h **** extern volatile struct TIMx_registers TIM4;
 630:src/sys/devices.h **** extern volatile struct TIMx_registers TIM3;
 631:src/sys/devices.h **** extern volatile struct TIMx_registers TIM2;
 632:src/sys/devices.h **** 
 633:src/sys/devices.h **** #define __set_bit(_w,_i) ((_w)|=(1<<(_i)))
 634:src/sys/devices.h **** #define __clr_bit(_w,_i) ((_w) &= ~(1<<(_i)))
 635:src/sys/devices.h **** #define __really_inline__ static inline __attribute__((always_inline)) 
 636:src/sys/devices.h **** #define __sync __DSB
 637:src/sys/devices.h **** 
 638:src/sys/devices.h **** #define __declare_device_control(name,bus,bus_bit) \
 639:src/sys/devices.h ****   void __really_inline__ enable_##name() { \
 640:src/sys/devices.h ****     __set_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 641:src/sys/devices.h ****   void __really_inline__ low_power_enable_##name() { \
 642:src/sys/devices.h ****     __set_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 643:src/sys/devices.h ****   void __really_inline__ disable_##name() { \
 644:src/sys/devices.h ****     __clr_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 645:src/sys/devices.h ****   void __really_inline__ low_power_disable_## name() { \
 646:src/sys/devices.h ****     __clr_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 647:src/sys/devices.h ****   void __really_inline__ reset_##name() { \
 648:src/sys/devices.h ****     __set_bit(RCC.bus##RSTR,bus_bit); __sync(); } \
 649:src/sys/devices.h **** \
 650:src/sys/devices.h **** 
 651:src/sys/devices.h **** /* __declare_device_control(FMC,AHB3,0) FMC not available in LQFP64 package */
 652:src/sys/devices.h **** __declare_device_control(QUADSPI,AHB3,1)
 653:src/sys/devices.h **** 
 654:src/sys/devices.h **** __declare_device_control(DCMI,AHB2,0)
 655:src/sys/devices.h **** __declare_device_control(USB_OTG_FS,AHB2,7)
 656:src/sys/devices.h **** 
 657:src/sys/devices.h **** __declare_device_control(USB_OTG_HS,AHB1,29)
 658:src/sys/devices.h **** __declare_device_control(DMA2,AHB1,22)
 659:src/sys/devices.h **** __declare_device_control(DMA1,AHB1,21)
 660:src/sys/devices.h **** __declare_device_control(CRC,AHB1,12)
 661:src/sys/devices.h **** __declare_device_control(GPIOH,AHB1,7)
 662:src/sys/devices.h **** __declare_device_control(GPIOG,AHB1,6)
 663:src/sys/devices.h **** __declare_device_control(GPIOF,AHB1,5)
 664:src/sys/devices.h **** __declare_device_control(GPIOE,AHB1,4)
 665:src/sys/devices.h **** __declare_device_control(GPIOD,AHB1,3)
 666:src/sys/devices.h **** __declare_device_control(GPIOC,AHB1,2)
 667:src/sys/devices.h **** __declare_device_control(GPIOB,AHB1,1)
 668:src/sys/devices.h **** __declare_device_control(GPIOA,AHB1,0)
 669:src/sys/devices.h **** 
 670:src/sys/devices.h **** __declare_device_control(SAI2,APB2,23)
 671:src/sys/devices.h **** __declare_device_control(SAI1,APB2,22)
 672:src/sys/devices.h **** 
 673:src/sys/devices.h **** __declare_device_control(TIM11,APB2,18)
 674:src/sys/devices.h **** __declare_device_control(TIM10,APB2,17)
 675:src/sys/devices.h **** __declare_device_control(TIM9,APB2,16)
 676:src/sys/devices.h **** __declare_device_control(SYSCFG,APB2,14)
 677:src/sys/devices.h **** __declare_device_control(SPI4,APB2,13)
 678:src/sys/devices.h **** __declare_device_control(SPI1,APB2,12)
 679:src/sys/devices.h **** __declare_device_control(SDMMC,APB2,11)
 680:src/sys/devices.h **** __declare_device_control(ADC3,APB2,8)
 681:src/sys/devices.h **** __declare_device_control(ADC2,APB2,8)
 682:src/sys/devices.h **** __declare_device_control(ADC1,APB2,8)
 683:src/sys/devices.h **** __declare_device_control(USART6,APB2,5)
 684:src/sys/devices.h **** __declare_device_control(USART1,APB2,4)
 685:src/sys/devices.h **** __declare_device_control(TIM8,APB2,1)
 686:src/sys/devices.h **** __declare_device_control(TIM1,APB2,0)
 687:src/sys/devices.h **** 
 688:src/sys/devices.h **** __declare_device_control(DAC,APB1,29)
 689:src/sys/devices.h **** __declare_device_control(PWR,APB1,28)
  38              		.loc 2 689 0
  39 0000 084A     		ldr	r2, .L2
  40 0002 136C     		ldr	r3, [r2, #64]
  41 0004 43F08053 		orr	r3, r3, #268435456
  42 0008 1364     		str	r3, [r2, #64]
  43              	.LBB26:
  44              	.LBB27:
  45              		.file 3 "src/sys/cmsis_gcc.h"
   1:src/sys/cmsis_gcc.h **** /**************************************************************************//**
   2:src/sys/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:src/sys/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:src/sys/cmsis_gcc.h ****  * @version  V4.30
   5:src/sys/cmsis_gcc.h ****  * @date     20. October 2015
   6:src/sys/cmsis_gcc.h ****  ******************************************************************************/
   7:src/sys/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:src/sys/cmsis_gcc.h **** 
   9:src/sys/cmsis_gcc.h ****    All rights reserved.
  10:src/sys/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:src/sys/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:src/sys/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:src/sys/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:src/sys/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:src/sys/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:src/sys/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:src/sys/cmsis_gcc.h ****      specific prior written permission.
  20:src/sys/cmsis_gcc.h ****    *
  21:src/sys/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:src/sys/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:src/sys/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:src/sys/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:src/sys/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:src/sys/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:src/sys/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:src/sys/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:src/sys/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:src/sys/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:src/sys/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:src/sys/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:src/sys/cmsis_gcc.h **** 
  34:src/sys/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  35:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_H
  36:src/sys/cmsis_gcc.h **** 
  37:src/sys/cmsis_gcc.h **** /* ignore some GCC warnings */
  38:src/sys/cmsis_gcc.h **** #if defined ( __GNUC__ )
  39:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic push
  40:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  41:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  42:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  43:src/sys/cmsis_gcc.h **** #endif
  44:src/sys/cmsis_gcc.h **** 
  45:src/sys/cmsis_gcc.h **** 
  46:src/sys/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  47:src/sys/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  48:src/sys/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  49:src/sys/cmsis_gcc.h ****   @{
  50:src/sys/cmsis_gcc.h ****  */
  51:src/sys/cmsis_gcc.h **** 
  52:src/sys/cmsis_gcc.h **** /**
  53:src/sys/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  54:src/sys/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  55:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  56:src/sys/cmsis_gcc.h ****  */
  57:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  58:src/sys/cmsis_gcc.h **** {
  59:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  60:src/sys/cmsis_gcc.h **** }
  61:src/sys/cmsis_gcc.h **** 
  62:src/sys/cmsis_gcc.h **** 
  63:src/sys/cmsis_gcc.h **** /**
  64:src/sys/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  65:src/sys/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  66:src/sys/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  67:src/sys/cmsis_gcc.h ****  */
  68:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  69:src/sys/cmsis_gcc.h **** {
  70:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  71:src/sys/cmsis_gcc.h **** }
  72:src/sys/cmsis_gcc.h **** 
  73:src/sys/cmsis_gcc.h **** 
  74:src/sys/cmsis_gcc.h **** /**
  75:src/sys/cmsis_gcc.h ****   \brief   Get Control Register
  76:src/sys/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  77:src/sys/cmsis_gcc.h ****   \return               Control Register value
  78:src/sys/cmsis_gcc.h ****  */
  79:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  80:src/sys/cmsis_gcc.h **** {
  81:src/sys/cmsis_gcc.h ****   uint32_t result;
  82:src/sys/cmsis_gcc.h **** 
  83:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  84:src/sys/cmsis_gcc.h ****   return(result);
  85:src/sys/cmsis_gcc.h **** }
  86:src/sys/cmsis_gcc.h **** 
  87:src/sys/cmsis_gcc.h **** 
  88:src/sys/cmsis_gcc.h **** /**
  89:src/sys/cmsis_gcc.h ****   \brief   Set Control Register
  90:src/sys/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  91:src/sys/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  92:src/sys/cmsis_gcc.h ****  */
  93:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  94:src/sys/cmsis_gcc.h **** {
  95:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  96:src/sys/cmsis_gcc.h **** }
  97:src/sys/cmsis_gcc.h **** 
  98:src/sys/cmsis_gcc.h **** 
  99:src/sys/cmsis_gcc.h **** /**
 100:src/sys/cmsis_gcc.h ****   \brief   Get IPSR Register
 101:src/sys/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 102:src/sys/cmsis_gcc.h ****   \return               IPSR Register value
 103:src/sys/cmsis_gcc.h ****  */
 104:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 105:src/sys/cmsis_gcc.h **** {
 106:src/sys/cmsis_gcc.h ****   uint32_t result;
 107:src/sys/cmsis_gcc.h **** 
 108:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 109:src/sys/cmsis_gcc.h ****   return(result);
 110:src/sys/cmsis_gcc.h **** }
 111:src/sys/cmsis_gcc.h **** 
 112:src/sys/cmsis_gcc.h **** 
 113:src/sys/cmsis_gcc.h **** /**
 114:src/sys/cmsis_gcc.h ****   \brief   Get APSR Register
 115:src/sys/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 116:src/sys/cmsis_gcc.h ****   \return               APSR Register value
 117:src/sys/cmsis_gcc.h ****  */
 118:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 119:src/sys/cmsis_gcc.h **** {
 120:src/sys/cmsis_gcc.h ****   uint32_t result;
 121:src/sys/cmsis_gcc.h **** 
 122:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 123:src/sys/cmsis_gcc.h ****   return(result);
 124:src/sys/cmsis_gcc.h **** }
 125:src/sys/cmsis_gcc.h **** 
 126:src/sys/cmsis_gcc.h **** 
 127:src/sys/cmsis_gcc.h **** /**
 128:src/sys/cmsis_gcc.h ****   \brief   Get xPSR Register
 129:src/sys/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 130:src/sys/cmsis_gcc.h **** 
 131:src/sys/cmsis_gcc.h ****     \return               xPSR Register value
 132:src/sys/cmsis_gcc.h ****  */
 133:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 134:src/sys/cmsis_gcc.h **** {
 135:src/sys/cmsis_gcc.h ****   uint32_t result;
 136:src/sys/cmsis_gcc.h **** 
 137:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 138:src/sys/cmsis_gcc.h ****   return(result);
 139:src/sys/cmsis_gcc.h **** }
 140:src/sys/cmsis_gcc.h **** 
 141:src/sys/cmsis_gcc.h **** 
 142:src/sys/cmsis_gcc.h **** /**
 143:src/sys/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 144:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 145:src/sys/cmsis_gcc.h ****   \return               PSP Register value
 146:src/sys/cmsis_gcc.h ****  */
 147:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 148:src/sys/cmsis_gcc.h **** {
 149:src/sys/cmsis_gcc.h ****   register uint32_t result;
 150:src/sys/cmsis_gcc.h **** 
 151:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 152:src/sys/cmsis_gcc.h ****   return(result);
 153:src/sys/cmsis_gcc.h **** }
 154:src/sys/cmsis_gcc.h **** 
 155:src/sys/cmsis_gcc.h **** 
 156:src/sys/cmsis_gcc.h **** /**
 157:src/sys/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 158:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 159:src/sys/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 160:src/sys/cmsis_gcc.h ****  */
 161:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 162:src/sys/cmsis_gcc.h **** {
 163:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 164:src/sys/cmsis_gcc.h **** }
 165:src/sys/cmsis_gcc.h **** 
 166:src/sys/cmsis_gcc.h **** 
 167:src/sys/cmsis_gcc.h **** /**
 168:src/sys/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 169:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 170:src/sys/cmsis_gcc.h ****   \return               MSP Register value
 171:src/sys/cmsis_gcc.h ****  */
 172:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 173:src/sys/cmsis_gcc.h **** {
 174:src/sys/cmsis_gcc.h ****   register uint32_t result;
 175:src/sys/cmsis_gcc.h **** 
 176:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 177:src/sys/cmsis_gcc.h ****   return(result);
 178:src/sys/cmsis_gcc.h **** }
 179:src/sys/cmsis_gcc.h **** 
 180:src/sys/cmsis_gcc.h **** 
 181:src/sys/cmsis_gcc.h **** /**
 182:src/sys/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 183:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 184:src/sys/cmsis_gcc.h **** 
 185:src/sys/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 186:src/sys/cmsis_gcc.h ****  */
 187:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 188:src/sys/cmsis_gcc.h **** {
 189:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 190:src/sys/cmsis_gcc.h **** }
 191:src/sys/cmsis_gcc.h **** 
 192:src/sys/cmsis_gcc.h **** 
 193:src/sys/cmsis_gcc.h **** /**
 194:src/sys/cmsis_gcc.h ****   \brief   Get Priority Mask
 195:src/sys/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 196:src/sys/cmsis_gcc.h ****   \return               Priority Mask value
 197:src/sys/cmsis_gcc.h ****  */
 198:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 199:src/sys/cmsis_gcc.h **** {
 200:src/sys/cmsis_gcc.h ****   uint32_t result;
 201:src/sys/cmsis_gcc.h **** 
 202:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 203:src/sys/cmsis_gcc.h ****   return(result);
 204:src/sys/cmsis_gcc.h **** }
 205:src/sys/cmsis_gcc.h **** 
 206:src/sys/cmsis_gcc.h **** 
 207:src/sys/cmsis_gcc.h **** /**
 208:src/sys/cmsis_gcc.h ****   \brief   Set Priority Mask
 209:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 210:src/sys/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 211:src/sys/cmsis_gcc.h ****  */
 212:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 213:src/sys/cmsis_gcc.h **** {
 214:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 215:src/sys/cmsis_gcc.h **** }
 216:src/sys/cmsis_gcc.h **** 
 217:src/sys/cmsis_gcc.h **** 
 218:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 219:src/sys/cmsis_gcc.h **** 
 220:src/sys/cmsis_gcc.h **** /**
 221:src/sys/cmsis_gcc.h ****   \brief   Enable FIQ
 222:src/sys/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 223:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 224:src/sys/cmsis_gcc.h ****  */
 225:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 226:src/sys/cmsis_gcc.h **** {
 227:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 228:src/sys/cmsis_gcc.h **** }
 229:src/sys/cmsis_gcc.h **** 
 230:src/sys/cmsis_gcc.h **** 
 231:src/sys/cmsis_gcc.h **** /**
 232:src/sys/cmsis_gcc.h ****   \brief   Disable FIQ
 233:src/sys/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 234:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 235:src/sys/cmsis_gcc.h ****  */
 236:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 237:src/sys/cmsis_gcc.h **** {
 238:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 239:src/sys/cmsis_gcc.h **** }
 240:src/sys/cmsis_gcc.h **** 
 241:src/sys/cmsis_gcc.h **** 
 242:src/sys/cmsis_gcc.h **** /**
 243:src/sys/cmsis_gcc.h ****   \brief   Get Base Priority
 244:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 245:src/sys/cmsis_gcc.h ****   \return               Base Priority register value
 246:src/sys/cmsis_gcc.h ****  */
 247:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 248:src/sys/cmsis_gcc.h **** {
 249:src/sys/cmsis_gcc.h ****   uint32_t result;
 250:src/sys/cmsis_gcc.h **** 
 251:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 252:src/sys/cmsis_gcc.h ****   return(result);
 253:src/sys/cmsis_gcc.h **** }
 254:src/sys/cmsis_gcc.h **** 
 255:src/sys/cmsis_gcc.h **** 
 256:src/sys/cmsis_gcc.h **** /**
 257:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority
 258:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 259:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 260:src/sys/cmsis_gcc.h ****  */
 261:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 262:src/sys/cmsis_gcc.h **** {
 263:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 264:src/sys/cmsis_gcc.h **** }
 265:src/sys/cmsis_gcc.h **** 
 266:src/sys/cmsis_gcc.h **** 
 267:src/sys/cmsis_gcc.h **** /**
 268:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 269:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 270:src/sys/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 271:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 272:src/sys/cmsis_gcc.h ****  */
 273:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 274:src/sys/cmsis_gcc.h **** {
 275:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 276:src/sys/cmsis_gcc.h **** }
 277:src/sys/cmsis_gcc.h **** 
 278:src/sys/cmsis_gcc.h **** 
 279:src/sys/cmsis_gcc.h **** /**
 280:src/sys/cmsis_gcc.h ****   \brief   Get Fault Mask
 281:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 282:src/sys/cmsis_gcc.h ****   \return               Fault Mask register value
 283:src/sys/cmsis_gcc.h ****  */
 284:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 285:src/sys/cmsis_gcc.h **** {
 286:src/sys/cmsis_gcc.h ****   uint32_t result;
 287:src/sys/cmsis_gcc.h **** 
 288:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 289:src/sys/cmsis_gcc.h ****   return(result);
 290:src/sys/cmsis_gcc.h **** }
 291:src/sys/cmsis_gcc.h **** 
 292:src/sys/cmsis_gcc.h **** 
 293:src/sys/cmsis_gcc.h **** /**
 294:src/sys/cmsis_gcc.h ****   \brief   Set Fault Mask
 295:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 296:src/sys/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 297:src/sys/cmsis_gcc.h ****  */
 298:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 299:src/sys/cmsis_gcc.h **** {
 300:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 301:src/sys/cmsis_gcc.h **** }
 302:src/sys/cmsis_gcc.h **** 
 303:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 304:src/sys/cmsis_gcc.h **** 
 305:src/sys/cmsis_gcc.h **** 
 306:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 307:src/sys/cmsis_gcc.h **** 
 308:src/sys/cmsis_gcc.h **** /**
 309:src/sys/cmsis_gcc.h ****   \brief   Get FPSCR
 310:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 311:src/sys/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 312:src/sys/cmsis_gcc.h ****  */
 313:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 314:src/sys/cmsis_gcc.h **** {
 315:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 316:src/sys/cmsis_gcc.h ****   uint32_t result;
 317:src/sys/cmsis_gcc.h **** 
 318:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 319:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 320:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 321:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 322:src/sys/cmsis_gcc.h ****   return(result);
 323:src/sys/cmsis_gcc.h **** #else
 324:src/sys/cmsis_gcc.h ****    return(0);
 325:src/sys/cmsis_gcc.h **** #endif
 326:src/sys/cmsis_gcc.h **** }
 327:src/sys/cmsis_gcc.h **** 
 328:src/sys/cmsis_gcc.h **** 
 329:src/sys/cmsis_gcc.h **** /**
 330:src/sys/cmsis_gcc.h ****   \brief   Set FPSCR
 331:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 332:src/sys/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 333:src/sys/cmsis_gcc.h ****  */
 334:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 335:src/sys/cmsis_gcc.h **** {
 336:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 337:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 338:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 339:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 340:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 341:src/sys/cmsis_gcc.h **** #endif
 342:src/sys/cmsis_gcc.h **** }
 343:src/sys/cmsis_gcc.h **** 
 344:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 345:src/sys/cmsis_gcc.h **** 
 346:src/sys/cmsis_gcc.h **** 
 347:src/sys/cmsis_gcc.h **** 
 348:src/sys/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 349:src/sys/cmsis_gcc.h **** 
 350:src/sys/cmsis_gcc.h **** 
 351:src/sys/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 352:src/sys/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 353:src/sys/cmsis_gcc.h ****   Access to dedicated instructions
 354:src/sys/cmsis_gcc.h ****   @{
 355:src/sys/cmsis_gcc.h **** */
 356:src/sys/cmsis_gcc.h **** 
 357:src/sys/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 358:src/sys/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 359:src/sys/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 360:src/sys/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 361:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 362:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 363:src/sys/cmsis_gcc.h **** #else
 364:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 365:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 366:src/sys/cmsis_gcc.h **** #endif
 367:src/sys/cmsis_gcc.h **** 
 368:src/sys/cmsis_gcc.h **** /**
 369:src/sys/cmsis_gcc.h ****   \brief   No Operation
 370:src/sys/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 371:src/sys/cmsis_gcc.h ****  */
 372:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 373:src/sys/cmsis_gcc.h **** {
 374:src/sys/cmsis_gcc.h ****   __ASM volatile ("nop");
 375:src/sys/cmsis_gcc.h **** }
 376:src/sys/cmsis_gcc.h **** 
 377:src/sys/cmsis_gcc.h **** 
 378:src/sys/cmsis_gcc.h **** /**
 379:src/sys/cmsis_gcc.h ****   \brief   Wait For Interrupt
 380:src/sys/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 381:src/sys/cmsis_gcc.h ****  */
 382:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 383:src/sys/cmsis_gcc.h **** {
 384:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfi");
 385:src/sys/cmsis_gcc.h **** }
 386:src/sys/cmsis_gcc.h **** 
 387:src/sys/cmsis_gcc.h **** 
 388:src/sys/cmsis_gcc.h **** /**
 389:src/sys/cmsis_gcc.h ****   \brief   Wait For Event
 390:src/sys/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 391:src/sys/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 392:src/sys/cmsis_gcc.h ****  */
 393:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 394:src/sys/cmsis_gcc.h **** {
 395:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfe");
 396:src/sys/cmsis_gcc.h **** }
 397:src/sys/cmsis_gcc.h **** 
 398:src/sys/cmsis_gcc.h **** 
 399:src/sys/cmsis_gcc.h **** /**
 400:src/sys/cmsis_gcc.h ****   \brief   Send Event
 401:src/sys/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 402:src/sys/cmsis_gcc.h ****  */
 403:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 404:src/sys/cmsis_gcc.h **** {
 405:src/sys/cmsis_gcc.h ****   __ASM volatile ("sev");
 406:src/sys/cmsis_gcc.h **** }
 407:src/sys/cmsis_gcc.h **** 
 408:src/sys/cmsis_gcc.h **** 
 409:src/sys/cmsis_gcc.h **** /**
 410:src/sys/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 411:src/sys/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 412:src/sys/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 413:src/sys/cmsis_gcc.h ****            after the instruction has been completed.
 414:src/sys/cmsis_gcc.h ****  */
 415:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 416:src/sys/cmsis_gcc.h **** {
 417:src/sys/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 418:src/sys/cmsis_gcc.h **** }
 419:src/sys/cmsis_gcc.h **** 
 420:src/sys/cmsis_gcc.h **** 
 421:src/sys/cmsis_gcc.h **** /**
 422:src/sys/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 423:src/sys/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 424:src/sys/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 425:src/sys/cmsis_gcc.h ****  */
 426:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 427:src/sys/cmsis_gcc.h **** {
 428:src/sys/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  46              		.loc 3 428 0
  47              		.syntax unified
  48              	@ 428 "src/sys/cmsis_gcc.h" 1
  49 000a BFF34F8F 		dsb 0xF
  50              	@ 0 "" 2
  51              		.thumb
  52              		.syntax unified
  53              	.LBE27:
  54              	.LBE26:
  55              	.LBE25:
  56              	.LBE24:
   7:src/sys/power.c ****   enable_PWR();
   8:src/sys/power.c ****   PWR.CR = (PWR.CR & ~(3<<14)) |((scale&0x3)<<14);
  57              		.loc 1 8 0
  58 000e 064A     		ldr	r2, .L2+4
  59 0010 1368     		ldr	r3, [r2]
  60 0012 8003     		lsls	r0, r0, #14
  61              	.LVL1:
  62 0014 23F44043 		bic	r3, r3, #49152
  63 0018 80B2     		uxth	r0, r0
  64 001a 1843     		orrs	r0, r0, r3
  65 001c 1060     		str	r0, [r2]
  66              	.LBB28:
  67              	.LBB29:
  68              		.loc 3 428 0
  69              		.syntax unified
  70              	@ 428 "src/sys/cmsis_gcc.h" 1
  71 001e BFF34F8F 		dsb 0xF
  72              	@ 0 "" 2
  73              		.thumb
  74              		.syntax unified
  75 0022 7047     		bx	lr
  76              	.L3:
  77              		.align	2
  78              	.L2:
  79 0024 00000000 		.word	RCC
  80 0028 00000000 		.word	PWR
  81              	.LBE29:
  82              	.LBE28:
  83              		.cfi_endproc
  84              	.LFE392:
  85              		.size	set_voltage_scale, .-set_voltage_scale
  86              		.align	1
  87              		.global	get_voltage_scale
  88              		.thumb
  89              		.thumb_func
  90              		.type	get_voltage_scale, %function
  91              	get_voltage_scale:
  92              	.LFB393:
   9:src/sys/power.c ****   __DSB();
  10:src/sys/power.c **** }
  11:src/sys/power.c **** 
  12:src/sys/power.c **** VOS get_voltage_scale() {
  93              		.loc 1 12 0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              		@ link register save eliminated.
  98              	.LBB30:
  99              	.LBB31:
 100              		.loc 2 689 0
 101 002c 054A     		ldr	r2, .L5
 102 002e 136C     		ldr	r3, [r2, #64]
 103 0030 43F08053 		orr	r3, r3, #268435456
 104 0034 1364     		str	r3, [r2, #64]
 105              	.LBB32:
 106              	.LBB33:
 107              		.loc 3 428 0
 108              		.syntax unified
 109              	@ 428 "src/sys/cmsis_gcc.h" 1
 110 0036 BFF34F8F 		dsb 0xF
 111              	@ 0 "" 2
 112              		.thumb
 113              		.syntax unified
 114              	.LBE33:
 115              	.LBE32:
 116              	.LBE31:
 117              	.LBE30:
  13:src/sys/power.c ****   enable_PWR();
  14:src/sys/power.c ****   return ((PWR.CR>>14)&0x3);
 118              		.loc 1 14 0
 119 003a 034B     		ldr	r3, .L5+4
 120 003c 1868     		ldr	r0, [r3]
  15:src/sys/power.c **** }
 121              		.loc 1 15 0
 122 003e C0F38130 		ubfx	r0, r0, #14, #2
 123 0042 7047     		bx	lr
 124              	.L6:
 125              		.align	2
 126              	.L5:
 127 0044 00000000 		.word	RCC
 128 0048 00000000 		.word	PWR
 129              		.cfi_endproc
 130              	.LFE393:
 131              		.size	get_voltage_scale, .-get_voltage_scale
 132              		.align	1
 133              		.global	start_Overdrive
 134              		.thumb
 135              		.thumb_func
 136              		.type	start_Overdrive, %function
 137              	start_Overdrive:
 138              	.LFB394:
  16:src/sys/power.c **** 
  17:src/sys/power.c **** void start_Overdrive() {
 139              		.loc 1 17 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              		@ link register save eliminated.
 144              	.LBB34:
 145              	.LBB35:
 146              		.loc 2 689 0
 147 004c 0B4A     		ldr	r2, .L15
 148 004e 136C     		ldr	r3, [r2, #64]
 149 0050 43F08053 		orr	r3, r3, #268435456
 150 0054 1364     		str	r3, [r2, #64]
 151              	.LBB36:
 152              	.LBB37:
 153              		.loc 3 428 0
 154              		.syntax unified
 155              	@ 428 "src/sys/cmsis_gcc.h" 1
 156 0056 BFF34F8F 		dsb 0xF
 157              	@ 0 "" 2
 158              		.thumb
 159              		.syntax unified
 160              	.LBE37:
 161              	.LBE36:
 162              	.LBE35:
 163              	.LBE34:
  18:src/sys/power.c ****   enable_PWR();
  19:src/sys/power.c ****   /* Start overdrive */
  20:src/sys/power.c ****   PWR.CR |= (1<<16);
 164              		.loc 1 20 0
 165 005a 094B     		ldr	r3, .L15+4
 166 005c 1A68     		ldr	r2, [r3]
 167 005e 42F48032 		orr	r2, r2, #65536
 168 0062 1A60     		str	r2, [r3]
 169              	.L8:
  21:src/sys/power.c ****   while ((PWR.CSR&(1<<16))==0);
 170              		.loc 1 21 0 discriminator 1
 171 0064 5A68     		ldr	r2, [r3, #4]
 172 0066 0649     		ldr	r1, .L15+4
 173 0068 D003     		lsls	r0, r2, #15
 174 006a FBD5     		bpl	.L8
  22:src/sys/power.c ****   /* Switch to overdrive */
  23:src/sys/power.c ****   PWR.CR |= (1<<17);
 175              		.loc 1 23 0
 176 006c 0A68     		ldr	r2, [r1]
 177 006e 42F40032 		orr	r2, r2, #131072
 178 0072 0A60     		str	r2, [r1]
 179              	.L9:
  24:src/sys/power.c ****   while ((PWR.CSR&(1<<17))==0);
 180              		.loc 1 24 0 discriminator 1
 181 0074 5A68     		ldr	r2, [r3, #4]
 182 0076 9203     		lsls	r2, r2, #14
 183 0078 FCD5     		bpl	.L9
  25:src/sys/power.c **** }
 184              		.loc 1 25 0
 185 007a 7047     		bx	lr
 186              	.L16:
 187              		.align	2
 188              	.L15:
 189 007c 00000000 		.word	RCC
 190 0080 00000000 		.word	PWR
 191              		.cfi_endproc
 192              	.LFE394:
 193              		.size	start_Overdrive, .-start_Overdrive
 194              		.align	1
 195              		.global	stop_Overdrive
 196              		.thumb
 197              		.thumb_func
 198              		.type	stop_Overdrive, %function
 199              	stop_Overdrive:
 200              	.LFB395:
  26:src/sys/power.c **** 
  27:src/sys/power.c **** void stop_Overdrive() {
 201              		.loc 1 27 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 206              	.LBB38:
 207              	.LBB39:
 208              		.loc 2 689 0
 209 0084 074A     		ldr	r2, .L18
 210 0086 136C     		ldr	r3, [r2, #64]
 211 0088 43F08053 		orr	r3, r3, #268435456
 212 008c 1364     		str	r3, [r2, #64]
 213              	.LBB40:
 214              	.LBB41:
 215              		.loc 3 428 0
 216              		.syntax unified
 217              	@ 428 "src/sys/cmsis_gcc.h" 1
 218 008e BFF34F8F 		dsb 0xF
 219              	@ 0 "" 2
 220              		.thumb
 221              		.syntax unified
 222              	.LBE41:
 223              	.LBE40:
 224              	.LBE39:
 225              	.LBE38:
  28:src/sys/power.c ****   enable_PWR();
  29:src/sys/power.c ****   /* Stop overdrive */
  30:src/sys/power.c ****   PWR.CR &= ~((1<<16)|(1<<17));
 226              		.loc 1 30 0
 227 0092 054A     		ldr	r2, .L18+4
 228 0094 1368     		ldr	r3, [r2]
 229 0096 23F44033 		bic	r3, r3, #196608
 230 009a 1360     		str	r3, [r2]
 231              	.LBB42:
 232              	.LBB43:
 233              		.loc 3 428 0
 234              		.syntax unified
 235              	@ 428 "src/sys/cmsis_gcc.h" 1
 236 009c BFF34F8F 		dsb 0xF
 237              	@ 0 "" 2
 238              		.thumb
 239              		.syntax unified
 240 00a0 7047     		bx	lr
 241              	.L19:
 242 00a2 00BF     		.align	2
 243              	.L18:
 244 00a4 00000000 		.word	RCC
 245 00a8 00000000 		.word	PWR
 246              	.LBE43:
 247              	.LBE42:
 248              		.cfi_endproc
 249              	.LFE395:
 250              		.size	stop_Overdrive, .-stop_Overdrive
 251              	.Letext0:
 252              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 253              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 254              		.file 6 "src/sys/power.h"
 255              		.section	.debug_info,"",%progbits
 256              	.Ldebug_info0:
 257 0000 EC030000 		.4byte	0x3ec
 258 0004 0400     		.2byte	0x4
 259 0006 00000000 		.4byte	.Ldebug_abbrev0
 260 000a 04       		.byte	0x4
 261 000b 01       		.uleb128 0x1
 262 000c EA000000 		.4byte	.LASF56
 263 0010 0C       		.byte	0xc
 264 0011 99000000 		.4byte	.LASF57
 265 0015 C5000000 		.4byte	.LASF58
 266 0019 00000000 		.4byte	.Ltext0
 267 001d AC000000 		.4byte	.Letext0-.Ltext0
 268 0021 00000000 		.4byte	.Ldebug_line0
 269 0025 02       		.uleb128 0x2
 270 0026 01       		.byte	0x1
 271 0027 44000000 		.4byte	0x44
 272 002b 06       		.byte	0x6
 273 002c 02       		.byte	0x2
 274 002d 44000000 		.4byte	0x44
 275 0031 03       		.uleb128 0x3
 276 0032 19000000 		.4byte	.LASF0
 277 0036 03       		.byte	0x3
 278 0037 03       		.uleb128 0x3
 279 0038 20000000 		.4byte	.LASF1
 280 003c 02       		.byte	0x2
 281 003d 03       		.uleb128 0x3
 282 003e 27000000 		.4byte	.LASF2
 283 0042 01       		.byte	0x1
 284 0043 00       		.byte	0
 285 0044 04       		.uleb128 0x4
 286 0045 01       		.byte	0x1
 287 0046 08       		.byte	0x8
 288 0047 BD010000 		.4byte	.LASF3
 289 004b 05       		.uleb128 0x5
 290 004c 564F5300 		.ascii	"VOS\000"
 291 0050 06       		.byte	0x6
 292 0051 02       		.byte	0x2
 293 0052 25000000 		.4byte	0x25
 294 0056 04       		.uleb128 0x4
 295 0057 01       		.byte	0x1
 296 0058 06       		.byte	0x6
 297 0059 2E000000 		.4byte	.LASF4
 298 005d 04       		.uleb128 0x4
 299 005e 02       		.byte	0x2
 300 005f 05       		.byte	0x5
 301 0060 3A000000 		.4byte	.LASF5
 302 0064 04       		.uleb128 0x4
 303 0065 02       		.byte	0x2
 304 0066 07       		.byte	0x7
 305 0067 53020000 		.4byte	.LASF6
 306 006b 04       		.uleb128 0x4
 307 006c 04       		.byte	0x4
 308 006d 05       		.byte	0x5
 309 006e A2010000 		.4byte	.LASF7
 310 0072 06       		.uleb128 0x6
 311 0073 75000000 		.4byte	.LASF8
 312 0077 04       		.byte	0x4
 313 0078 41       		.byte	0x41
 314 0079 7D000000 		.4byte	0x7d
 315 007d 04       		.uleb128 0x4
 316 007e 04       		.byte	0x4
 317 007f 07       		.byte	0x7
 318 0080 8E020000 		.4byte	.LASF9
 319 0084 04       		.uleb128 0x4
 320 0085 08       		.byte	0x8
 321 0086 05       		.byte	0x5
 322 0087 84010000 		.4byte	.LASF10
 323 008b 04       		.uleb128 0x4
 324 008c 08       		.byte	0x8
 325 008d 07       		.byte	0x7
 326 008e E8010000 		.4byte	.LASF11
 327 0092 07       		.uleb128 0x7
 328 0093 04       		.byte	0x4
 329 0094 05       		.byte	0x5
 330 0095 696E7400 		.ascii	"int\000"
 331 0099 04       		.uleb128 0x4
 332 009a 04       		.byte	0x4
 333 009b 07       		.byte	0x7
 334 009c 0E020000 		.4byte	.LASF12
 335 00a0 06       		.uleb128 0x6
 336 00a1 FF010000 		.4byte	.LASF13
 337 00a5 05       		.byte	0x5
 338 00a6 30       		.byte	0x30
 339 00a7 72000000 		.4byte	0x72
 340 00ab 04       		.uleb128 0x4
 341 00ac 04       		.byte	0x4
 342 00ad 07       		.byte	0x7
 343 00ae 44000000 		.4byte	.LASF14
 344 00b2 08       		.uleb128 0x8
 345 00b3 A0020000 		.4byte	.LASF15
 346 00b7 08       		.byte	0x8
 347 00b8 02       		.byte	0x2
 348 00b9 62       		.byte	0x62
 349 00ba D6000000 		.4byte	0xd6
 350 00be 09       		.uleb128 0x9
 351 00bf 435200   		.ascii	"CR\000"
 352 00c2 02       		.byte	0x2
 353 00c3 63       		.byte	0x63
 354 00c4 A0000000 		.4byte	0xa0
 355 00c8 00       		.byte	0
 356 00c9 09       		.uleb128 0x9
 357 00ca 43535200 		.ascii	"CSR\000"
 358 00ce 02       		.byte	0x2
 359 00cf 64       		.byte	0x64
 360 00d0 A0000000 		.4byte	0xa0
 361 00d4 04       		.byte	0x4
 362 00d5 00       		.byte	0
 363 00d6 08       		.uleb128 0x8
 364 00d7 24020000 		.4byte	.LASF16
 365 00db 98       		.byte	0x98
 366 00dc 02       		.byte	0x2
 367 00dd 68       		.byte	0x68
 368 00de AA020000 		.4byte	0x2aa
 369 00e2 09       		.uleb128 0x9
 370 00e3 435200   		.ascii	"CR\000"
 371 00e6 02       		.byte	0x2
 372 00e7 69       		.byte	0x69
 373 00e8 A0000000 		.4byte	0xa0
 374 00ec 00       		.byte	0
 375 00ed 0A       		.uleb128 0xa
 376 00ee 32020000 		.4byte	.LASF17
 377 00f2 02       		.byte	0x2
 378 00f3 6A       		.byte	0x6a
 379 00f4 A0000000 		.4byte	0xa0
 380 00f8 04       		.byte	0x4
 381 00f9 0A       		.uleb128 0xa
 382 00fa A9000000 		.4byte	.LASF18
 383 00fe 02       		.byte	0x2
 384 00ff 6B       		.byte	0x6b
 385 0100 A0000000 		.4byte	0xa0
 386 0104 08       		.byte	0x8
 387 0105 09       		.uleb128 0x9
 388 0106 43495200 		.ascii	"CIR\000"
 389 010a 02       		.byte	0x2
 390 010b 6C       		.byte	0x6c
 391 010c A0000000 		.4byte	0xa0
 392 0110 0C       		.byte	0xc
 393 0111 0A       		.uleb128 0xa
 394 0112 DF020000 		.4byte	.LASF19
 395 0116 02       		.byte	0x2
 396 0117 6D       		.byte	0x6d
 397 0118 A0000000 		.4byte	0xa0
 398 011c 10       		.byte	0x10
 399 011d 0A       		.uleb128 0xa
 400 011e 1B020000 		.4byte	.LASF20
 401 0122 02       		.byte	0x2
 402 0123 6E       		.byte	0x6e
 403 0124 A0000000 		.4byte	0xa0
 404 0128 14       		.byte	0x14
 405 0129 0A       		.uleb128 0xa
 406 012a F7020000 		.4byte	.LASF21
 407 012e 02       		.byte	0x2
 408 012f 6F       		.byte	0x6f
 409 0130 A0000000 		.4byte	0xa0
 410 0134 18       		.byte	0x18
 411 0135 0A       		.uleb128 0xa
 412 0136 66020000 		.4byte	.LASF22
 413 013a 02       		.byte	0x2
 414 013b 70       		.byte	0x70
 415 013c A0000000 		.4byte	0xa0
 416 0140 1C       		.byte	0x1c
 417 0141 0A       		.uleb128 0xa
 418 0142 80000000 		.4byte	.LASF23
 419 0146 02       		.byte	0x2
 420 0147 71       		.byte	0x71
 421 0148 A0000000 		.4byte	0xa0
 422 014c 20       		.byte	0x20
 423 014d 0A       		.uleb128 0xa
 424 014e B4010000 		.4byte	.LASF24
 425 0152 02       		.byte	0x2
 426 0153 72       		.byte	0x72
 427 0154 A0000000 		.4byte	0xa0
 428 0158 24       		.byte	0x24
 429 0159 0A       		.uleb128 0xa
 430 015a E8020000 		.4byte	.LASF25
 431 015e 02       		.byte	0x2
 432 015f 73       		.byte	0x73
 433 0160 A0000000 		.4byte	0xa0
 434 0164 28       		.byte	0x28
 435 0165 0A       		.uleb128 0xa
 436 0166 36030000 		.4byte	.LASF26
 437 016a 02       		.byte	0x2
 438 016b 74       		.byte	0x74
 439 016c A0000000 		.4byte	0xa0
 440 0170 2C       		.byte	0x2c
 441 0171 0A       		.uleb128 0xa
 442 0172 BD020000 		.4byte	.LASF27
 443 0176 02       		.byte	0x2
 444 0177 75       		.byte	0x75
 445 0178 A0000000 		.4byte	0xa0
 446 017c 30       		.byte	0x30
 447 017d 0A       		.uleb128 0xa
 448 017e 74010000 		.4byte	.LASF28
 449 0182 02       		.byte	0x2
 450 0183 76       		.byte	0x76
 451 0184 A0000000 		.4byte	0xa0
 452 0188 34       		.byte	0x34
 453 0189 0A       		.uleb128 0xa
 454 018a 7C010000 		.4byte	.LASF29
 455 018e 02       		.byte	0x2
 456 018f 77       		.byte	0x77
 457 0190 A0000000 		.4byte	0xa0
 458 0194 38       		.byte	0x38
 459 0195 0A       		.uleb128 0xa
 460 0196 AE000000 		.4byte	.LASF30
 461 019a 02       		.byte	0x2
 462 019b 78       		.byte	0x78
 463 019c A0000000 		.4byte	0xa0
 464 01a0 3C       		.byte	0x3c
 465 01a1 0A       		.uleb128 0xa
 466 01a2 BD000000 		.4byte	.LASF31
 467 01a6 02       		.byte	0x2
 468 01a7 79       		.byte	0x79
 469 01a8 A0000000 		.4byte	0xa0
 470 01ac 40       		.byte	0x40
 471 01ad 0A       		.uleb128 0xa
 472 01ae DA010000 		.4byte	.LASF32
 473 01b2 02       		.byte	0x2
 474 01b3 7A       		.byte	0x7a
 475 01b4 A0000000 		.4byte	0xa0
 476 01b8 44       		.byte	0x44
 477 01b9 0A       		.uleb128 0xa
 478 01ba 3A020000 		.4byte	.LASF33
 479 01be 02       		.byte	0x2
 480 01bf 7B       		.byte	0x7b
 481 01c0 A0000000 		.4byte	0xa0
 482 01c4 48       		.byte	0x48
 483 01c5 0A       		.uleb128 0xa
 484 01c6 CB010000 		.4byte	.LASF34
 485 01ca 02       		.byte	0x2
 486 01cb 7C       		.byte	0x7c
 487 01cc A0000000 		.4byte	0xa0
 488 01d0 4C       		.byte	0x4c
 489 01d1 0A       		.uleb128 0xa
 490 01d2 00000000 		.4byte	.LASF35
 491 01d6 02       		.byte	0x2
 492 01d7 7D       		.byte	0x7d
 493 01d8 A0000000 		.4byte	0xa0
 494 01dc 50       		.byte	0x50
 495 01dd 0A       		.uleb128 0xa
 496 01de 75020000 		.4byte	.LASF36
 497 01e2 02       		.byte	0x2
 498 01e3 7E       		.byte	0x7e
 499 01e4 A0000000 		.4byte	0xa0
 500 01e8 54       		.byte	0x54
 501 01e9 0A       		.uleb128 0xa
 502 01ea 8F000000 		.4byte	.LASF37
 503 01ee 02       		.byte	0x2
 504 01ef 7F       		.byte	0x7f
 505 01f0 A0000000 		.4byte	0xa0
 506 01f4 58       		.byte	0x58
 507 01f5 0A       		.uleb128 0xa
 508 01f6 AE020000 		.4byte	.LASF38
 509 01fa 02       		.byte	0x2
 510 01fb 80       		.byte	0x80
 511 01fc A0000000 		.4byte	0xa0
 512 0200 5C       		.byte	0x5c
 513 0201 0A       		.uleb128 0xa
 514 0202 49020000 		.4byte	.LASF39
 515 0206 02       		.byte	0x2
 516 0207 81       		.byte	0x81
 517 0208 A0000000 		.4byte	0xa0
 518 020c 60       		.byte	0x60
 519 020d 0A       		.uleb128 0xa
 520 020e 2C030000 		.4byte	.LASF40
 521 0212 02       		.byte	0x2
 522 0213 82       		.byte	0x82
 523 0214 A0000000 		.4byte	0xa0
 524 0218 64       		.byte	0x64
 525 0219 0A       		.uleb128 0xa
 526 021a D0020000 		.4byte	.LASF41
 527 021e 02       		.byte	0x2
 528 021f 83       		.byte	0x83
 529 0220 A0000000 		.4byte	0xa0
 530 0224 68       		.byte	0x68
 531 0225 0A       		.uleb128 0xa
 532 0226 0A000000 		.4byte	.LASF42
 533 022a 02       		.byte	0x2
 534 022b 84       		.byte	0x84
 535 022c A0000000 		.4byte	0xa0
 536 0230 6C       		.byte	0x6c
 537 0231 0A       		.uleb128 0xa
 538 0232 4D000000 		.4byte	.LASF43
 539 0236 02       		.byte	0x2
 540 0237 85       		.byte	0x85
 541 0238 A0000000 		.4byte	0xa0
 542 023c 70       		.byte	0x70
 543 023d 09       		.uleb128 0x9
 544 023e 43535200 		.ascii	"CSR\000"
 545 0242 02       		.byte	0x2
 546 0243 86       		.byte	0x86
 547 0244 A0000000 		.4byte	0xa0
 548 0248 74       		.byte	0x74
 549 0249 0A       		.uleb128 0xa
 550 024a 5B000000 		.4byte	.LASF44
 551 024e 02       		.byte	0x2
 552 024f 87       		.byte	0x87
 553 0250 A0000000 		.4byte	0xa0
 554 0254 78       		.byte	0x78
 555 0255 0A       		.uleb128 0xa
 556 0256 00030000 		.4byte	.LASF45
 557 025a 02       		.byte	0x2
 558 025b 88       		.byte	0x88
 559 025c A0000000 		.4byte	0xa0
 560 0260 7C       		.byte	0x7c
 561 0261 0A       		.uleb128 0xa
 562 0262 89000000 		.4byte	.LASF46
 563 0266 02       		.byte	0x2
 564 0267 89       		.byte	0x89
 565 0268 A0000000 		.4byte	0xa0
 566 026c 80       		.byte	0x80
 567 026d 0A       		.uleb128 0xa
 568 026e 6A000000 		.4byte	.LASF47
 569 0272 02       		.byte	0x2
 570 0273 8A       		.byte	0x8a
 571 0274 A0000000 		.4byte	0xa0
 572 0278 84       		.byte	0x84
 573 0279 0A       		.uleb128 0xa
 574 027a 0F030000 		.4byte	.LASF48
 575 027e 02       		.byte	0x2
 576 027f 8B       		.byte	0x8b
 577 0280 A0000000 		.4byte	0xa0
 578 0284 88       		.byte	0x88
 579 0285 0A       		.uleb128 0xa
 580 0286 E2000000 		.4byte	.LASF49
 581 028a 02       		.byte	0x2
 582 028b 8C       		.byte	0x8c
 583 028c A0000000 		.4byte	0xa0
 584 0290 8C       		.byte	0x8c
 585 0291 0A       		.uleb128 0xa
 586 0292 52000000 		.4byte	.LASF50
 587 0296 02       		.byte	0x2
 588 0297 8D       		.byte	0x8d
 589 0298 A0000000 		.4byte	0xa0
 590 029c 90       		.byte	0x90
 591 029d 0A       		.uleb128 0xa
 592 029e AB010000 		.4byte	.LASF51
 593 02a2 02       		.byte	0x2
 594 02a3 8E       		.byte	0x8e
 595 02a4 A0000000 		.4byte	0xa0
 596 02a8 94       		.byte	0x94
 597 02a9 00       		.byte	0
 598 02aa 0B       		.uleb128 0xb
 599 02ab E2010000 		.4byte	.LASF59
 600 02af 03       		.byte	0x3
 601 02b0 AA01     		.2byte	0x1aa
 602 02b2 03       		.byte	0x3
 603 02b3 0C       		.uleb128 0xc
 604 02b4 C5020000 		.4byte	.LASF60
 605 02b8 02       		.byte	0x2
 606 02b9 B102     		.2byte	0x2b1
 607 02bb 03       		.byte	0x3
 608 02bc 0D       		.uleb128 0xd
 609 02bd 45030000 		.4byte	.LASF52
 610 02c1 01       		.byte	0x1
 611 02c2 06       		.byte	0x6
 612 02c3 00000000 		.4byte	.LFB392
 613 02c7 2C000000 		.4byte	.LFE392-.LFB392
 614 02cb 01       		.uleb128 0x1
 615 02cc 9C       		.byte	0x9c
 616 02cd 14030000 		.4byte	0x314
 617 02d1 0E       		.uleb128 0xe
 618 02d2 08020000 		.4byte	.LASF61
 619 02d6 01       		.byte	0x1
 620 02d7 06       		.byte	0x6
 621 02d8 4B000000 		.4byte	0x4b
 622 02dc 00000000 		.4byte	.LLST0
 623 02e0 0F       		.uleb128 0xf
 624 02e1 B3020000 		.4byte	0x2b3
 625 02e5 00000000 		.4byte	.LBB24
 626 02e9 0E000000 		.4byte	.LBE24-.LBB24
 627 02ed 01       		.byte	0x1
 628 02ee 07       		.byte	0x7
 629 02ef 04030000 		.4byte	0x304
 630 02f3 10       		.uleb128 0x10
 631 02f4 AA020000 		.4byte	0x2aa
 632 02f8 0A000000 		.4byte	.LBB26
 633 02fc 04000000 		.4byte	.LBE26-.LBB26
 634 0300 02       		.byte	0x2
 635 0301 B102     		.2byte	0x2b1
 636 0303 00       		.byte	0
 637 0304 11       		.uleb128 0x11
 638 0305 AA020000 		.4byte	0x2aa
 639 0309 1E000000 		.4byte	.LBB28
 640 030d 0E000000 		.4byte	.LBE28-.LBB28
 641 0311 01       		.byte	0x1
 642 0312 09       		.byte	0x9
 643 0313 00       		.byte	0
 644 0314 12       		.uleb128 0x12
 645 0315 1A030000 		.4byte	.LASF53
 646 0319 01       		.byte	0x1
 647 031a 0C       		.byte	0xc
 648 031b 4B000000 		.4byte	0x4b
 649 031f 2C000000 		.4byte	.LFB393
 650 0323 20000000 		.4byte	.LFE393-.LFB393
 651 0327 01       		.uleb128 0x1
 652 0328 9C       		.byte	0x9c
 653 0329 4E030000 		.4byte	0x34e
 654 032d 13       		.uleb128 0x13
 655 032e B3020000 		.4byte	0x2b3
 656 0332 2C000000 		.4byte	.LBB30
 657 0336 0E000000 		.4byte	.LBE30-.LBB30
 658 033a 01       		.byte	0x1
 659 033b 0D       		.byte	0xd
 660 033c 10       		.uleb128 0x10
 661 033d AA020000 		.4byte	0x2aa
 662 0341 36000000 		.4byte	.LBB32
 663 0345 04000000 		.4byte	.LBE32-.LBB32
 664 0349 02       		.byte	0x2
 665 034a B102     		.2byte	0x2b1
 666 034c 00       		.byte	0
 667 034d 00       		.byte	0
 668 034e 14       		.uleb128 0x14
 669 034f 92010000 		.4byte	.LASF54
 670 0353 01       		.byte	0x1
 671 0354 11       		.byte	0x11
 672 0355 4C000000 		.4byte	.LFB394
 673 0359 38000000 		.4byte	.LFE394-.LFB394
 674 035d 01       		.uleb128 0x1
 675 035e 9C       		.byte	0x9c
 676 035f 84030000 		.4byte	0x384
 677 0363 13       		.uleb128 0x13
 678 0364 B3020000 		.4byte	0x2b3
 679 0368 4C000000 		.4byte	.LBB34
 680 036c 0E000000 		.4byte	.LBE34-.LBB34
 681 0370 01       		.byte	0x1
 682 0371 12       		.byte	0x12
 683 0372 10       		.uleb128 0x10
 684 0373 AA020000 		.4byte	0x2aa
 685 0377 56000000 		.4byte	.LBB36
 686 037b 04000000 		.4byte	.LBE36-.LBB36
 687 037f 02       		.byte	0x2
 688 0380 B102     		.2byte	0x2b1
 689 0382 00       		.byte	0
 690 0383 00       		.byte	0
 691 0384 14       		.uleb128 0x14
 692 0385 7F020000 		.4byte	.LASF55
 693 0389 01       		.byte	0x1
 694 038a 1B       		.byte	0x1b
 695 038b 84000000 		.4byte	.LFB395
 696 038f 28000000 		.4byte	.LFE395-.LFB395
 697 0393 01       		.uleb128 0x1
 698 0394 9C       		.byte	0x9c
 699 0395 CD030000 		.4byte	0x3cd
 700 0399 0F       		.uleb128 0xf
 701 039a B3020000 		.4byte	0x2b3
 702 039e 84000000 		.4byte	.LBB38
 703 03a2 0E000000 		.4byte	.LBE38-.LBB38
 704 03a6 01       		.byte	0x1
 705 03a7 1C       		.byte	0x1c
 706 03a8 BD030000 		.4byte	0x3bd
 707 03ac 10       		.uleb128 0x10
 708 03ad AA020000 		.4byte	0x2aa
 709 03b1 8E000000 		.4byte	.LBB40
 710 03b5 04000000 		.4byte	.LBE40-.LBB40
 711 03b9 02       		.byte	0x2
 712 03ba B102     		.2byte	0x2b1
 713 03bc 00       		.byte	0
 714 03bd 11       		.uleb128 0x11
 715 03be AA020000 		.4byte	0x2aa
 716 03c2 9C000000 		.4byte	.LBB42
 717 03c6 10000000 		.4byte	.LBE42-.LBB42
 718 03ca 01       		.byte	0x1
 719 03cb 1F       		.byte	0x1f
 720 03cc 00       		.byte	0
 721 03cd 15       		.uleb128 0x15
 722 03ce 52434300 		.ascii	"RCC\000"
 723 03d2 02       		.byte	0x2
 724 03d3 3D02     		.2byte	0x23d
 725 03d5 D9030000 		.4byte	0x3d9
 726 03d9 16       		.uleb128 0x16
 727 03da D6000000 		.4byte	0xd6
 728 03de 15       		.uleb128 0x15
 729 03df 50575200 		.ascii	"PWR\000"
 730 03e3 02       		.byte	0x2
 731 03e4 5D02     		.2byte	0x25d
 732 03e6 EA030000 		.4byte	0x3ea
 733 03ea 16       		.uleb128 0x16
 734 03eb B2000000 		.4byte	0xb2
 735 03ef 00       		.byte	0
 736              		.section	.debug_abbrev,"",%progbits
 737              	.Ldebug_abbrev0:
 738 0000 01       		.uleb128 0x1
 739 0001 11       		.uleb128 0x11
 740 0002 01       		.byte	0x1
 741 0003 25       		.uleb128 0x25
 742 0004 0E       		.uleb128 0xe
 743 0005 13       		.uleb128 0x13
 744 0006 0B       		.uleb128 0xb
 745 0007 03       		.uleb128 0x3
 746 0008 0E       		.uleb128 0xe
 747 0009 1B       		.uleb128 0x1b
 748 000a 0E       		.uleb128 0xe
 749 000b 11       		.uleb128 0x11
 750 000c 01       		.uleb128 0x1
 751 000d 12       		.uleb128 0x12
 752 000e 06       		.uleb128 0x6
 753 000f 10       		.uleb128 0x10
 754 0010 17       		.uleb128 0x17
 755 0011 00       		.byte	0
 756 0012 00       		.byte	0
 757 0013 02       		.uleb128 0x2
 758 0014 04       		.uleb128 0x4
 759 0015 01       		.byte	0x1
 760 0016 0B       		.uleb128 0xb
 761 0017 0B       		.uleb128 0xb
 762 0018 49       		.uleb128 0x49
 763 0019 13       		.uleb128 0x13
 764 001a 3A       		.uleb128 0x3a
 765 001b 0B       		.uleb128 0xb
 766 001c 3B       		.uleb128 0x3b
 767 001d 0B       		.uleb128 0xb
 768 001e 01       		.uleb128 0x1
 769 001f 13       		.uleb128 0x13
 770 0020 00       		.byte	0
 771 0021 00       		.byte	0
 772 0022 03       		.uleb128 0x3
 773 0023 28       		.uleb128 0x28
 774 0024 00       		.byte	0
 775 0025 03       		.uleb128 0x3
 776 0026 0E       		.uleb128 0xe
 777 0027 1C       		.uleb128 0x1c
 778 0028 0B       		.uleb128 0xb
 779 0029 00       		.byte	0
 780 002a 00       		.byte	0
 781 002b 04       		.uleb128 0x4
 782 002c 24       		.uleb128 0x24
 783 002d 00       		.byte	0
 784 002e 0B       		.uleb128 0xb
 785 002f 0B       		.uleb128 0xb
 786 0030 3E       		.uleb128 0x3e
 787 0031 0B       		.uleb128 0xb
 788 0032 03       		.uleb128 0x3
 789 0033 0E       		.uleb128 0xe
 790 0034 00       		.byte	0
 791 0035 00       		.byte	0
 792 0036 05       		.uleb128 0x5
 793 0037 16       		.uleb128 0x16
 794 0038 00       		.byte	0
 795 0039 03       		.uleb128 0x3
 796 003a 08       		.uleb128 0x8
 797 003b 3A       		.uleb128 0x3a
 798 003c 0B       		.uleb128 0xb
 799 003d 3B       		.uleb128 0x3b
 800 003e 0B       		.uleb128 0xb
 801 003f 49       		.uleb128 0x49
 802 0040 13       		.uleb128 0x13
 803 0041 00       		.byte	0
 804 0042 00       		.byte	0
 805 0043 06       		.uleb128 0x6
 806 0044 16       		.uleb128 0x16
 807 0045 00       		.byte	0
 808 0046 03       		.uleb128 0x3
 809 0047 0E       		.uleb128 0xe
 810 0048 3A       		.uleb128 0x3a
 811 0049 0B       		.uleb128 0xb
 812 004a 3B       		.uleb128 0x3b
 813 004b 0B       		.uleb128 0xb
 814 004c 49       		.uleb128 0x49
 815 004d 13       		.uleb128 0x13
 816 004e 00       		.byte	0
 817 004f 00       		.byte	0
 818 0050 07       		.uleb128 0x7
 819 0051 24       		.uleb128 0x24
 820 0052 00       		.byte	0
 821 0053 0B       		.uleb128 0xb
 822 0054 0B       		.uleb128 0xb
 823 0055 3E       		.uleb128 0x3e
 824 0056 0B       		.uleb128 0xb
 825 0057 03       		.uleb128 0x3
 826 0058 08       		.uleb128 0x8
 827 0059 00       		.byte	0
 828 005a 00       		.byte	0
 829 005b 08       		.uleb128 0x8
 830 005c 13       		.uleb128 0x13
 831 005d 01       		.byte	0x1
 832 005e 03       		.uleb128 0x3
 833 005f 0E       		.uleb128 0xe
 834 0060 0B       		.uleb128 0xb
 835 0061 0B       		.uleb128 0xb
 836 0062 3A       		.uleb128 0x3a
 837 0063 0B       		.uleb128 0xb
 838 0064 3B       		.uleb128 0x3b
 839 0065 0B       		.uleb128 0xb
 840 0066 01       		.uleb128 0x1
 841 0067 13       		.uleb128 0x13
 842 0068 00       		.byte	0
 843 0069 00       		.byte	0
 844 006a 09       		.uleb128 0x9
 845 006b 0D       		.uleb128 0xd
 846 006c 00       		.byte	0
 847 006d 03       		.uleb128 0x3
 848 006e 08       		.uleb128 0x8
 849 006f 3A       		.uleb128 0x3a
 850 0070 0B       		.uleb128 0xb
 851 0071 3B       		.uleb128 0x3b
 852 0072 0B       		.uleb128 0xb
 853 0073 49       		.uleb128 0x49
 854 0074 13       		.uleb128 0x13
 855 0075 38       		.uleb128 0x38
 856 0076 0B       		.uleb128 0xb
 857 0077 00       		.byte	0
 858 0078 00       		.byte	0
 859 0079 0A       		.uleb128 0xa
 860 007a 0D       		.uleb128 0xd
 861 007b 00       		.byte	0
 862 007c 03       		.uleb128 0x3
 863 007d 0E       		.uleb128 0xe
 864 007e 3A       		.uleb128 0x3a
 865 007f 0B       		.uleb128 0xb
 866 0080 3B       		.uleb128 0x3b
 867 0081 0B       		.uleb128 0xb
 868 0082 49       		.uleb128 0x49
 869 0083 13       		.uleb128 0x13
 870 0084 38       		.uleb128 0x38
 871 0085 0B       		.uleb128 0xb
 872 0086 00       		.byte	0
 873 0087 00       		.byte	0
 874 0088 0B       		.uleb128 0xb
 875 0089 2E       		.uleb128 0x2e
 876 008a 00       		.byte	0
 877 008b 03       		.uleb128 0x3
 878 008c 0E       		.uleb128 0xe
 879 008d 3A       		.uleb128 0x3a
 880 008e 0B       		.uleb128 0xb
 881 008f 3B       		.uleb128 0x3b
 882 0090 05       		.uleb128 0x5
 883 0091 27       		.uleb128 0x27
 884 0092 19       		.uleb128 0x19
 885 0093 20       		.uleb128 0x20
 886 0094 0B       		.uleb128 0xb
 887 0095 00       		.byte	0
 888 0096 00       		.byte	0
 889 0097 0C       		.uleb128 0xc
 890 0098 2E       		.uleb128 0x2e
 891 0099 00       		.byte	0
 892 009a 03       		.uleb128 0x3
 893 009b 0E       		.uleb128 0xe
 894 009c 3A       		.uleb128 0x3a
 895 009d 0B       		.uleb128 0xb
 896 009e 3B       		.uleb128 0x3b
 897 009f 05       		.uleb128 0x5
 898 00a0 20       		.uleb128 0x20
 899 00a1 0B       		.uleb128 0xb
 900 00a2 00       		.byte	0
 901 00a3 00       		.byte	0
 902 00a4 0D       		.uleb128 0xd
 903 00a5 2E       		.uleb128 0x2e
 904 00a6 01       		.byte	0x1
 905 00a7 3F       		.uleb128 0x3f
 906 00a8 19       		.uleb128 0x19
 907 00a9 03       		.uleb128 0x3
 908 00aa 0E       		.uleb128 0xe
 909 00ab 3A       		.uleb128 0x3a
 910 00ac 0B       		.uleb128 0xb
 911 00ad 3B       		.uleb128 0x3b
 912 00ae 0B       		.uleb128 0xb
 913 00af 27       		.uleb128 0x27
 914 00b0 19       		.uleb128 0x19
 915 00b1 11       		.uleb128 0x11
 916 00b2 01       		.uleb128 0x1
 917 00b3 12       		.uleb128 0x12
 918 00b4 06       		.uleb128 0x6
 919 00b5 40       		.uleb128 0x40
 920 00b6 18       		.uleb128 0x18
 921 00b7 9742     		.uleb128 0x2117
 922 00b9 19       		.uleb128 0x19
 923 00ba 01       		.uleb128 0x1
 924 00bb 13       		.uleb128 0x13
 925 00bc 00       		.byte	0
 926 00bd 00       		.byte	0
 927 00be 0E       		.uleb128 0xe
 928 00bf 05       		.uleb128 0x5
 929 00c0 00       		.byte	0
 930 00c1 03       		.uleb128 0x3
 931 00c2 0E       		.uleb128 0xe
 932 00c3 3A       		.uleb128 0x3a
 933 00c4 0B       		.uleb128 0xb
 934 00c5 3B       		.uleb128 0x3b
 935 00c6 0B       		.uleb128 0xb
 936 00c7 49       		.uleb128 0x49
 937 00c8 13       		.uleb128 0x13
 938 00c9 02       		.uleb128 0x2
 939 00ca 17       		.uleb128 0x17
 940 00cb 00       		.byte	0
 941 00cc 00       		.byte	0
 942 00cd 0F       		.uleb128 0xf
 943 00ce 1D       		.uleb128 0x1d
 944 00cf 01       		.byte	0x1
 945 00d0 31       		.uleb128 0x31
 946 00d1 13       		.uleb128 0x13
 947 00d2 11       		.uleb128 0x11
 948 00d3 01       		.uleb128 0x1
 949 00d4 12       		.uleb128 0x12
 950 00d5 06       		.uleb128 0x6
 951 00d6 58       		.uleb128 0x58
 952 00d7 0B       		.uleb128 0xb
 953 00d8 59       		.uleb128 0x59
 954 00d9 0B       		.uleb128 0xb
 955 00da 01       		.uleb128 0x1
 956 00db 13       		.uleb128 0x13
 957 00dc 00       		.byte	0
 958 00dd 00       		.byte	0
 959 00de 10       		.uleb128 0x10
 960 00df 1D       		.uleb128 0x1d
 961 00e0 00       		.byte	0
 962 00e1 31       		.uleb128 0x31
 963 00e2 13       		.uleb128 0x13
 964 00e3 11       		.uleb128 0x11
 965 00e4 01       		.uleb128 0x1
 966 00e5 12       		.uleb128 0x12
 967 00e6 06       		.uleb128 0x6
 968 00e7 58       		.uleb128 0x58
 969 00e8 0B       		.uleb128 0xb
 970 00e9 59       		.uleb128 0x59
 971 00ea 05       		.uleb128 0x5
 972 00eb 00       		.byte	0
 973 00ec 00       		.byte	0
 974 00ed 11       		.uleb128 0x11
 975 00ee 1D       		.uleb128 0x1d
 976 00ef 00       		.byte	0
 977 00f0 31       		.uleb128 0x31
 978 00f1 13       		.uleb128 0x13
 979 00f2 11       		.uleb128 0x11
 980 00f3 01       		.uleb128 0x1
 981 00f4 12       		.uleb128 0x12
 982 00f5 06       		.uleb128 0x6
 983 00f6 58       		.uleb128 0x58
 984 00f7 0B       		.uleb128 0xb
 985 00f8 59       		.uleb128 0x59
 986 00f9 0B       		.uleb128 0xb
 987 00fa 00       		.byte	0
 988 00fb 00       		.byte	0
 989 00fc 12       		.uleb128 0x12
 990 00fd 2E       		.uleb128 0x2e
 991 00fe 01       		.byte	0x1
 992 00ff 3F       		.uleb128 0x3f
 993 0100 19       		.uleb128 0x19
 994 0101 03       		.uleb128 0x3
 995 0102 0E       		.uleb128 0xe
 996 0103 3A       		.uleb128 0x3a
 997 0104 0B       		.uleb128 0xb
 998 0105 3B       		.uleb128 0x3b
 999 0106 0B       		.uleb128 0xb
 1000 0107 49       		.uleb128 0x49
 1001 0108 13       		.uleb128 0x13
 1002 0109 11       		.uleb128 0x11
 1003 010a 01       		.uleb128 0x1
 1004 010b 12       		.uleb128 0x12
 1005 010c 06       		.uleb128 0x6
 1006 010d 40       		.uleb128 0x40
 1007 010e 18       		.uleb128 0x18
 1008 010f 9742     		.uleb128 0x2117
 1009 0111 19       		.uleb128 0x19
 1010 0112 01       		.uleb128 0x1
 1011 0113 13       		.uleb128 0x13
 1012 0114 00       		.byte	0
 1013 0115 00       		.byte	0
 1014 0116 13       		.uleb128 0x13
 1015 0117 1D       		.uleb128 0x1d
 1016 0118 01       		.byte	0x1
 1017 0119 31       		.uleb128 0x31
 1018 011a 13       		.uleb128 0x13
 1019 011b 11       		.uleb128 0x11
 1020 011c 01       		.uleb128 0x1
 1021 011d 12       		.uleb128 0x12
 1022 011e 06       		.uleb128 0x6
 1023 011f 58       		.uleb128 0x58
 1024 0120 0B       		.uleb128 0xb
 1025 0121 59       		.uleb128 0x59
 1026 0122 0B       		.uleb128 0xb
 1027 0123 00       		.byte	0
 1028 0124 00       		.byte	0
 1029 0125 14       		.uleb128 0x14
 1030 0126 2E       		.uleb128 0x2e
 1031 0127 01       		.byte	0x1
 1032 0128 3F       		.uleb128 0x3f
 1033 0129 19       		.uleb128 0x19
 1034 012a 03       		.uleb128 0x3
 1035 012b 0E       		.uleb128 0xe
 1036 012c 3A       		.uleb128 0x3a
 1037 012d 0B       		.uleb128 0xb
 1038 012e 3B       		.uleb128 0x3b
 1039 012f 0B       		.uleb128 0xb
 1040 0130 11       		.uleb128 0x11
 1041 0131 01       		.uleb128 0x1
 1042 0132 12       		.uleb128 0x12
 1043 0133 06       		.uleb128 0x6
 1044 0134 40       		.uleb128 0x40
 1045 0135 18       		.uleb128 0x18
 1046 0136 9742     		.uleb128 0x2117
 1047 0138 19       		.uleb128 0x19
 1048 0139 01       		.uleb128 0x1
 1049 013a 13       		.uleb128 0x13
 1050 013b 00       		.byte	0
 1051 013c 00       		.byte	0
 1052 013d 15       		.uleb128 0x15
 1053 013e 34       		.uleb128 0x34
 1054 013f 00       		.byte	0
 1055 0140 03       		.uleb128 0x3
 1056 0141 08       		.uleb128 0x8
 1057 0142 3A       		.uleb128 0x3a
 1058 0143 0B       		.uleb128 0xb
 1059 0144 3B       		.uleb128 0x3b
 1060 0145 05       		.uleb128 0x5
 1061 0146 49       		.uleb128 0x49
 1062 0147 13       		.uleb128 0x13
 1063 0148 3F       		.uleb128 0x3f
 1064 0149 19       		.uleb128 0x19
 1065 014a 3C       		.uleb128 0x3c
 1066 014b 19       		.uleb128 0x19
 1067 014c 00       		.byte	0
 1068 014d 00       		.byte	0
 1069 014e 16       		.uleb128 0x16
 1070 014f 35       		.uleb128 0x35
 1071 0150 00       		.byte	0
 1072 0151 49       		.uleb128 0x49
 1073 0152 13       		.uleb128 0x13
 1074 0153 00       		.byte	0
 1075 0154 00       		.byte	0
 1076 0155 00       		.byte	0
 1077              		.section	.debug_loc,"",%progbits
 1078              	.Ldebug_loc0:
 1079              	.LLST0:
 1080 0000 00000000 		.4byte	.LVL0-.Ltext0
 1081 0004 14000000 		.4byte	.LVL1-.Ltext0
 1082 0008 0100     		.2byte	0x1
 1083 000a 50       		.byte	0x50
 1084 000b 14000000 		.4byte	.LVL1-.Ltext0
 1085 000f 2C000000 		.4byte	.LFE392-.Ltext0
 1086 0013 0400     		.2byte	0x4
 1087 0015 F3       		.byte	0xf3
 1088 0016 01       		.uleb128 0x1
 1089 0017 50       		.byte	0x50
 1090 0018 9F       		.byte	0x9f
 1091 0019 00000000 		.4byte	0
 1092 001d 00000000 		.4byte	0
 1093              		.section	.debug_aranges,"",%progbits
 1094 0000 1C000000 		.4byte	0x1c
 1095 0004 0200     		.2byte	0x2
 1096 0006 00000000 		.4byte	.Ldebug_info0
 1097 000a 04       		.byte	0x4
 1098 000b 00       		.byte	0
 1099 000c 0000     		.2byte	0
 1100 000e 0000     		.2byte	0
 1101 0010 00000000 		.4byte	.Ltext0
 1102 0014 AC000000 		.4byte	.Letext0-.Ltext0
 1103 0018 00000000 		.4byte	0
 1104 001c 00000000 		.4byte	0
 1105              		.section	.debug_line,"",%progbits
 1106              	.Ldebug_line0:
 1107 0000 1E010000 		.section	.debug_str,"MS",%progbits,1
 1107      0200A200 
 1107      00000201 
 1107      FB0E0D00 
 1107      01010101 
 1108              	.LASF35:
 1109 0000 41484231 		.ascii	"AHB1LPENR\000"
 1109      4C50454E 
 1109      5200
 1110              	.LASF42:
 1111 000a 5F726573 		.ascii	"_reserved_0x6c\000"
 1111      65727665 
 1111      645F3078 
 1111      366300
 1112              	.LASF0:
 1113 0019 7363616C 		.ascii	"scale1\000"
 1113      653100
 1114              	.LASF1:
 1115 0020 7363616C 		.ascii	"scale2\000"
 1115      653200
 1116              	.LASF2:
 1117 0027 7363616C 		.ascii	"scale3\000"
 1117      653300
 1118              	.LASF4:
 1119 002e 7369676E 		.ascii	"signed char\000"
 1119      65642063 
 1119      68617200 
 1120              	.LASF5:
 1121 003a 73686F72 		.ascii	"short int\000"
 1121      7420696E 
 1121      7400
 1122              	.LASF14:
 1123 0044 73697A65 		.ascii	"sizetype\000"
 1123      74797065 
 1123      00
 1124              	.LASF43:
 1125 004d 42444352 		.ascii	"BDCR\000"
 1125      00
 1126              	.LASF50:
 1127 0052 434B4741 		.ascii	"CKGATENR\000"
 1127      54454E52 
 1127      00
 1128              	.LASF44:
 1129 005b 5F726573 		.ascii	"_reserved_0x78\000"
 1129      65727665 
 1129      645F3078 
 1129      373800
 1130              	.LASF47:
 1131 006a 504C4C49 		.ascii	"PLLI2SCFGR\000"
 1131      32534346 
 1131      475200
 1132              	.LASF8:
 1133 0075 5F5F7569 		.ascii	"__uint32_t\000"
 1133      6E743332 
 1133      5F7400
 1134              	.LASF23:
 1135 0080 41504231 		.ascii	"APB1RSTR\000"
 1135      52535452 
 1135      00
 1136              	.LASF46:
 1137 0089 53534347 		.ascii	"SSCGR\000"
 1137      5200
 1138              	.LASF37:
 1139 008f 41484233 		.ascii	"AHB3LPENR\000"
 1139      4C50454E 
 1139      5200
 1140              	.LASF57:
 1141 0099 7372632F 		.ascii	"src/sys/power.c\000"
 1141      7379732F 
 1141      706F7765 
 1141      722E6300 
 1142              	.LASF18:
 1143 00a9 43464752 		.ascii	"CFGR\000"
 1143      00
 1144              	.LASF30:
 1145 00ae 5F726573 		.ascii	"_reserved_0x3c\000"
 1145      65727665 
 1145      645F3078 
 1145      336300
 1146              	.LASF31:
 1147 00bd 41504231 		.ascii	"APB1ENR\000"
 1147      454E5200 
 1148              	.LASF58:
 1149 00c5 2F696E76 		.ascii	"/invite/Bureau/SPC/C_project\000"
 1149      6974652F 
 1149      42757265 
 1149      61752F53 
 1149      50432F43 
 1150              	.LASF49:
 1151 00e2 44434B43 		.ascii	"DCKCFGR\000"
 1151      46475200 
 1152              	.LASF56:
 1153 00ea 474E5520 		.ascii	"GNU C11 5.4.1 20160919 -mtune=cortex-m4 -mthumb -ma"
 1153      43313120 
 1153      352E342E 
 1153      31203230 
 1153      31363039 
 1154 011d 7263683D 		.ascii	"rch=armv7e-m -mfloat-abi=hard -mfpu=fpv4-sp-d16 -g "
 1154      61726D76 
 1154      37652D6D 
 1154      202D6D66 
 1154      6C6F6174 
 1155 0150 2D4F3020 		.ascii	"-O0 -Os -fsingle-precision-constant\000"
 1155      2D4F7320 
 1155      2D667369 
 1155      6E676C65 
 1155      2D707265 
 1156              	.LASF28:
 1157 0174 41484232 		.ascii	"AHB2ENR\000"
 1157      454E5200 
 1158              	.LASF29:
 1159 017c 41484233 		.ascii	"AHB3ENR\000"
 1159      454E5200 
 1160              	.LASF10:
 1161 0184 6C6F6E67 		.ascii	"long long int\000"
 1161      206C6F6E 
 1161      6720696E 
 1161      7400
 1162              	.LASF54:
 1163 0192 73746172 		.ascii	"start_Overdrive\000"
 1163      745F4F76 
 1163      65726472 
 1163      69766500 
 1164              	.LASF7:
 1165 01a2 6C6F6E67 		.ascii	"long int\000"
 1165      20696E74 
 1165      00
 1166              	.LASF51:
 1167 01ab 44434B43 		.ascii	"DCKCFGR2\000"
 1167      46475232 
 1167      00
 1168              	.LASF24:
 1169 01b4 41504232 		.ascii	"APB2RSTR\000"
 1169      52535452 
 1169      00
 1170              	.LASF3:
 1171 01bd 756E7369 		.ascii	"unsigned char\000"
 1171      676E6564 
 1171      20636861 
 1171      7200
 1172              	.LASF34:
 1173 01cb 5F726573 		.ascii	"_reserved_0x4c\000"
 1173      65727665 
 1173      645F3078 
 1173      346300
 1174              	.LASF32:
 1175 01da 41504232 		.ascii	"APB2ENR\000"
 1175      454E5200 
 1176              	.LASF59:
 1177 01e2 5F5F4453 		.ascii	"__DSB\000"
 1177      4200
 1178              	.LASF11:
 1179 01e8 6C6F6E67 		.ascii	"long long unsigned int\000"
 1179      206C6F6E 
 1179      6720756E 
 1179      7369676E 
 1179      65642069 
 1180              	.LASF13:
 1181 01ff 75696E74 		.ascii	"uint32_t\000"
 1181      33325F74 
 1181      00
 1182              	.LASF61:
 1183 0208 7363616C 		.ascii	"scale\000"
 1183      6500
 1184              	.LASF12:
 1185 020e 756E7369 		.ascii	"unsigned int\000"
 1185      676E6564 
 1185      20696E74 
 1185      00
 1186              	.LASF20:
 1187 021b 41484232 		.ascii	"AHB2RSTR\000"
 1187      52535452 
 1187      00
 1188              	.LASF16:
 1189 0224 5243435F 		.ascii	"RCC_registers\000"
 1189      72656769 
 1189      73746572 
 1189      7300
 1190              	.LASF17:
 1191 0232 504C4C43 		.ascii	"PLLCFGR\000"
 1191      46475200 
 1192              	.LASF33:
 1193 023a 5F726573 		.ascii	"_reserved_0x48\000"
 1193      65727665 
 1193      645F3078 
 1193      343800
 1194              	.LASF39:
 1195 0249 41504231 		.ascii	"APB1LPENR\000"
 1195      4C50454E 
 1195      5200
 1196              	.LASF6:
 1197 0253 73686F72 		.ascii	"short unsigned int\000"
 1197      7420756E 
 1197      7369676E 
 1197      65642069 
 1197      6E7400
 1198              	.LASF22:
 1199 0266 5F726573 		.ascii	"_reserved_0x1c\000"
 1199      65727665 
 1199      645F3078 
 1199      316300
 1200              	.LASF36:
 1201 0275 41484232 		.ascii	"AHB2LPENR\000"
 1201      4C50454E 
 1201      5200
 1202              	.LASF55:
 1203 027f 73746F70 		.ascii	"stop_Overdrive\000"
 1203      5F4F7665 
 1203      72647269 
 1203      766500
 1204              	.LASF9:
 1205 028e 6C6F6E67 		.ascii	"long unsigned int\000"
 1205      20756E73 
 1205      69676E65 
 1205      6420696E 
 1205      7400
 1206              	.LASF15:
 1207 02a0 5057525F 		.ascii	"PWR_registers\000"
 1207      72656769 
 1207      73746572 
 1207      7300
 1208              	.LASF38:
 1209 02ae 5F726573 		.ascii	"_reserved_0x5c\000"
 1209      65727665 
 1209      645F3078 
 1209      356300
 1210              	.LASF27:
 1211 02bd 41484231 		.ascii	"AHB1ENR\000"
 1211      454E5200 
 1212              	.LASF60:
 1213 02c5 656E6162 		.ascii	"enable_PWR\000"
 1213      6C655F50 
 1213      575200
 1214              	.LASF41:
 1215 02d0 5F726573 		.ascii	"_reserved_0x68\000"
 1215      65727665 
 1215      645F3078 
 1215      363800
 1216              	.LASF19:
 1217 02df 41484231 		.ascii	"AHB1RSTR\000"
 1217      52535452 
 1217      00
 1218              	.LASF25:
 1219 02e8 5F726573 		.ascii	"_reserved_0x28\000"
 1219      65727665 
 1219      645F3078 
 1219      323800
 1220              	.LASF21:
 1221 02f7 41484233 		.ascii	"AHB3RSTR\000"
 1221      52535452 
 1221      00
 1222              	.LASF45:
 1223 0300 5F726573 		.ascii	"_reserved_0x7c\000"
 1223      65727665 
 1223      645F3078 
 1223      376300
 1224              	.LASF48:
 1225 030f 504C4C53 		.ascii	"PLLSAICFGR\000"
 1225      41494346 
 1225      475200
 1226              	.LASF53:
 1227 031a 6765745F 		.ascii	"get_voltage_scale\000"
 1227      766F6C74 
 1227      6167655F 
 1227      7363616C 
 1227      6500
 1228              	.LASF40:
 1229 032c 41504232 		.ascii	"APB2LPENR\000"
 1229      4C50454E 
 1229      5200
 1230              	.LASF26:
 1231 0336 5F726573 		.ascii	"_reserved_0x2c\000"
 1231      65727665 
 1231      645F3078 
 1231      326300
 1232              	.LASF52:
 1233 0345 7365745F 		.ascii	"set_voltage_scale\000"
 1233      766F6C74 
 1233      6167655F 
 1233      7363616C 
 1233      6500
 1234              		.ident	"GCC: (15:5.4.1+svn241155-1) 5.4.1 20160919"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 power.c
     /tmp/ccigUwM7.s:21     .text:0000000000000000 $t
     /tmp/ccigUwM7.s:26     .text:0000000000000000 set_voltage_scale
     /tmp/ccigUwM7.s:79     .text:0000000000000024 $d
     /tmp/ccigUwM7.s:86     .text:000000000000002c $t
     /tmp/ccigUwM7.s:91     .text:000000000000002c get_voltage_scale
     /tmp/ccigUwM7.s:127    .text:0000000000000044 $d
     /tmp/ccigUwM7.s:132    .text:000000000000004c $t
     /tmp/ccigUwM7.s:137    .text:000000000000004c start_Overdrive
     /tmp/ccigUwM7.s:189    .text:000000000000007c $d
     /tmp/ccigUwM7.s:194    .text:0000000000000084 $t
     /tmp/ccigUwM7.s:199    .text:0000000000000084 stop_Overdrive
     /tmp/ccigUwM7.s:244    .text:00000000000000a4 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC
PWR
