   1              		.syntax unified
   2              		.arch armv7e-m
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"init.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.align	1
  22              		.global	set_FLASH_latency
  23              		.thumb
  24              		.thumb_func
  25              		.type	set_FLASH_latency, %function
  26              	set_FLASH_latency:
  27              	.LFB392:
  28              		.file 1 "src/sys/init.c"
   1:src/sys/init.c **** #include "devices.h"
   2:src/sys/init.c **** #include "clock.h"
   3:src/sys/init.c **** #include "power.h"
   4:src/sys/init.c **** #include "serial_io.h"
   5:src/sys/init.c **** #include "cm4.h"
   6:src/sys/init.c **** 
   7:src/sys/init.c **** 
   8:src/sys/init.c **** void set_FLASH_latency(int32_t latency) {
  29              		.loc 1 8 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
   9:src/sys/init.c ****   FLASH.ACR= 
  10:src/sys/init.c ****     (FLASH.ACR & ~(15<<0) & ~(7<<8)) | 
  34              		.loc 1 10 0
  35 0000 0B4A     		ldr	r2, .L7
  36 0002 1368     		ldr	r3, [r2]
   8:src/sys/init.c ****   FLASH.ACR= 
  37              		.loc 1 8 0
  38 0004 10B5     		push	{r4, lr}
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 4, -8
  41              		.cfi_offset 14, -4
  42              		.loc 1 10 0
  43 0006 23F4E163 		bic	r3, r3, #1800
  11:src/sys/init.c ****     ((((latency>0)?7:0)<<8)|((latency & 15)<<0));
  44              		.loc 1 11 0
  45 000a 0028     		cmp	r0, #0
  46 000c CCBF     		ite	gt
  47 000e 4FF4E061 		movgt	r1, #1792
  48 0012 0021     		movle	r1, #0
  10:src/sys/init.c ****     ((((latency>0)?7:0)<<8)|((latency & 15)<<0));
  49              		.loc 1 10 0
  50 0014 00F00F04 		and	r4, r0, #15
  51 0018 23F00703 		bic	r3, r3, #7
  52 001c 2143     		orrs	r1, r1, r4
  53 001e 0B43     		orrs	r3, r3, r1
   9:src/sys/init.c ****     (FLASH.ACR & ~(15<<0) & ~(7<<8)) | 
  54              		.loc 1 9 0
  55 0020 1360     		str	r3, [r2]
  56              	.L3:
  12:src/sys/init.c ****   /* if latency > 0, we also enable cache and prefetch */ 
  13:src/sys/init.c ****   while(((FLASH.ACR>>0)&15)!=latency);
  57              		.loc 1 13 0 discriminator 1
  58 0022 1368     		ldr	r3, [r2]
  59 0024 03F00F03 		and	r3, r3, #15
  60 0028 8342     		cmp	r3, r0
  61 002a FAD1     		bne	.L3
  14:src/sys/init.c **** }
  62              		.loc 1 14 0
  63 002c 10BD     		pop	{r4, pc}
  64              	.L8:
  65 002e 00BF     		.align	2
  66              	.L7:
  67 0030 00000000 		.word	FLASH
  68              		.cfi_endproc
  69              	.LFE392:
  70              		.size	set_FLASH_latency, .-set_FLASH_latency
  71              		.align	1
  72              		.global	fpu_init
  73              		.thumb
  74              		.thumb_func
  75              		.type	fpu_init, %function
  76              	fpu_init:
  77              	.LFB393:
  15:src/sys/init.c **** 
  16:src/sys/init.c **** void fpu_init() { 
  78              		.loc 1 16 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  17:src/sys/init.c ****   /* enable FPU for unpriviledged access  */
  18:src/sys/init.c ****   FPU_CPACR |= (3<<20)|(3<<22);
  83              		.loc 1 18 0
  84 0034 034A     		ldr	r2, .L10
  85 0036 1368     		ldr	r3, [r2]
  86 0038 43F47003 		orr	r3, r3, #15728640
  87 003c 1360     		str	r3, [r2]
  88              	.LBB10:
  89              	.LBB11:
  90              		.file 2 "src/sys/cmsis_gcc.h"
   1:src/sys/cmsis_gcc.h **** /**************************************************************************//**
   2:src/sys/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:src/sys/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:src/sys/cmsis_gcc.h ****  * @version  V4.30
   5:src/sys/cmsis_gcc.h ****  * @date     20. October 2015
   6:src/sys/cmsis_gcc.h ****  ******************************************************************************/
   7:src/sys/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:src/sys/cmsis_gcc.h **** 
   9:src/sys/cmsis_gcc.h ****    All rights reserved.
  10:src/sys/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:src/sys/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:src/sys/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:src/sys/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:src/sys/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:src/sys/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:src/sys/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:src/sys/cmsis_gcc.h ****      specific prior written permission.
  20:src/sys/cmsis_gcc.h ****    *
  21:src/sys/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:src/sys/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:src/sys/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:src/sys/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:src/sys/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:src/sys/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:src/sys/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:src/sys/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:src/sys/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:src/sys/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:src/sys/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:src/sys/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:src/sys/cmsis_gcc.h **** 
  34:src/sys/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  35:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_H
  36:src/sys/cmsis_gcc.h **** 
  37:src/sys/cmsis_gcc.h **** /* ignore some GCC warnings */
  38:src/sys/cmsis_gcc.h **** #if defined ( __GNUC__ )
  39:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic push
  40:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  41:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  42:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  43:src/sys/cmsis_gcc.h **** #endif
  44:src/sys/cmsis_gcc.h **** 
  45:src/sys/cmsis_gcc.h **** 
  46:src/sys/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  47:src/sys/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  48:src/sys/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  49:src/sys/cmsis_gcc.h ****   @{
  50:src/sys/cmsis_gcc.h ****  */
  51:src/sys/cmsis_gcc.h **** 
  52:src/sys/cmsis_gcc.h **** /**
  53:src/sys/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  54:src/sys/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  55:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  56:src/sys/cmsis_gcc.h ****  */
  57:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  58:src/sys/cmsis_gcc.h **** {
  59:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  60:src/sys/cmsis_gcc.h **** }
  61:src/sys/cmsis_gcc.h **** 
  62:src/sys/cmsis_gcc.h **** 
  63:src/sys/cmsis_gcc.h **** /**
  64:src/sys/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  65:src/sys/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  66:src/sys/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  67:src/sys/cmsis_gcc.h ****  */
  68:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  69:src/sys/cmsis_gcc.h **** {
  70:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  71:src/sys/cmsis_gcc.h **** }
  72:src/sys/cmsis_gcc.h **** 
  73:src/sys/cmsis_gcc.h **** 
  74:src/sys/cmsis_gcc.h **** /**
  75:src/sys/cmsis_gcc.h ****   \brief   Get Control Register
  76:src/sys/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  77:src/sys/cmsis_gcc.h ****   \return               Control Register value
  78:src/sys/cmsis_gcc.h ****  */
  79:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  80:src/sys/cmsis_gcc.h **** {
  81:src/sys/cmsis_gcc.h ****   uint32_t result;
  82:src/sys/cmsis_gcc.h **** 
  83:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  84:src/sys/cmsis_gcc.h ****   return(result);
  85:src/sys/cmsis_gcc.h **** }
  86:src/sys/cmsis_gcc.h **** 
  87:src/sys/cmsis_gcc.h **** 
  88:src/sys/cmsis_gcc.h **** /**
  89:src/sys/cmsis_gcc.h ****   \brief   Set Control Register
  90:src/sys/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  91:src/sys/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  92:src/sys/cmsis_gcc.h ****  */
  93:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  94:src/sys/cmsis_gcc.h **** {
  95:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  96:src/sys/cmsis_gcc.h **** }
  97:src/sys/cmsis_gcc.h **** 
  98:src/sys/cmsis_gcc.h **** 
  99:src/sys/cmsis_gcc.h **** /**
 100:src/sys/cmsis_gcc.h ****   \brief   Get IPSR Register
 101:src/sys/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 102:src/sys/cmsis_gcc.h ****   \return               IPSR Register value
 103:src/sys/cmsis_gcc.h ****  */
 104:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 105:src/sys/cmsis_gcc.h **** {
 106:src/sys/cmsis_gcc.h ****   uint32_t result;
 107:src/sys/cmsis_gcc.h **** 
 108:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 109:src/sys/cmsis_gcc.h ****   return(result);
 110:src/sys/cmsis_gcc.h **** }
 111:src/sys/cmsis_gcc.h **** 
 112:src/sys/cmsis_gcc.h **** 
 113:src/sys/cmsis_gcc.h **** /**
 114:src/sys/cmsis_gcc.h ****   \brief   Get APSR Register
 115:src/sys/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 116:src/sys/cmsis_gcc.h ****   \return               APSR Register value
 117:src/sys/cmsis_gcc.h ****  */
 118:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 119:src/sys/cmsis_gcc.h **** {
 120:src/sys/cmsis_gcc.h ****   uint32_t result;
 121:src/sys/cmsis_gcc.h **** 
 122:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 123:src/sys/cmsis_gcc.h ****   return(result);
 124:src/sys/cmsis_gcc.h **** }
 125:src/sys/cmsis_gcc.h **** 
 126:src/sys/cmsis_gcc.h **** 
 127:src/sys/cmsis_gcc.h **** /**
 128:src/sys/cmsis_gcc.h ****   \brief   Get xPSR Register
 129:src/sys/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 130:src/sys/cmsis_gcc.h **** 
 131:src/sys/cmsis_gcc.h ****     \return               xPSR Register value
 132:src/sys/cmsis_gcc.h ****  */
 133:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 134:src/sys/cmsis_gcc.h **** {
 135:src/sys/cmsis_gcc.h ****   uint32_t result;
 136:src/sys/cmsis_gcc.h **** 
 137:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 138:src/sys/cmsis_gcc.h ****   return(result);
 139:src/sys/cmsis_gcc.h **** }
 140:src/sys/cmsis_gcc.h **** 
 141:src/sys/cmsis_gcc.h **** 
 142:src/sys/cmsis_gcc.h **** /**
 143:src/sys/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 144:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 145:src/sys/cmsis_gcc.h ****   \return               PSP Register value
 146:src/sys/cmsis_gcc.h ****  */
 147:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 148:src/sys/cmsis_gcc.h **** {
 149:src/sys/cmsis_gcc.h ****   register uint32_t result;
 150:src/sys/cmsis_gcc.h **** 
 151:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 152:src/sys/cmsis_gcc.h ****   return(result);
 153:src/sys/cmsis_gcc.h **** }
 154:src/sys/cmsis_gcc.h **** 
 155:src/sys/cmsis_gcc.h **** 
 156:src/sys/cmsis_gcc.h **** /**
 157:src/sys/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 158:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 159:src/sys/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 160:src/sys/cmsis_gcc.h ****  */
 161:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 162:src/sys/cmsis_gcc.h **** {
 163:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 164:src/sys/cmsis_gcc.h **** }
 165:src/sys/cmsis_gcc.h **** 
 166:src/sys/cmsis_gcc.h **** 
 167:src/sys/cmsis_gcc.h **** /**
 168:src/sys/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 169:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 170:src/sys/cmsis_gcc.h ****   \return               MSP Register value
 171:src/sys/cmsis_gcc.h ****  */
 172:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 173:src/sys/cmsis_gcc.h **** {
 174:src/sys/cmsis_gcc.h ****   register uint32_t result;
 175:src/sys/cmsis_gcc.h **** 
 176:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 177:src/sys/cmsis_gcc.h ****   return(result);
 178:src/sys/cmsis_gcc.h **** }
 179:src/sys/cmsis_gcc.h **** 
 180:src/sys/cmsis_gcc.h **** 
 181:src/sys/cmsis_gcc.h **** /**
 182:src/sys/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 183:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 184:src/sys/cmsis_gcc.h **** 
 185:src/sys/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 186:src/sys/cmsis_gcc.h ****  */
 187:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 188:src/sys/cmsis_gcc.h **** {
 189:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 190:src/sys/cmsis_gcc.h **** }
 191:src/sys/cmsis_gcc.h **** 
 192:src/sys/cmsis_gcc.h **** 
 193:src/sys/cmsis_gcc.h **** /**
 194:src/sys/cmsis_gcc.h ****   \brief   Get Priority Mask
 195:src/sys/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 196:src/sys/cmsis_gcc.h ****   \return               Priority Mask value
 197:src/sys/cmsis_gcc.h ****  */
 198:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 199:src/sys/cmsis_gcc.h **** {
 200:src/sys/cmsis_gcc.h ****   uint32_t result;
 201:src/sys/cmsis_gcc.h **** 
 202:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 203:src/sys/cmsis_gcc.h ****   return(result);
 204:src/sys/cmsis_gcc.h **** }
 205:src/sys/cmsis_gcc.h **** 
 206:src/sys/cmsis_gcc.h **** 
 207:src/sys/cmsis_gcc.h **** /**
 208:src/sys/cmsis_gcc.h ****   \brief   Set Priority Mask
 209:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 210:src/sys/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 211:src/sys/cmsis_gcc.h ****  */
 212:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 213:src/sys/cmsis_gcc.h **** {
 214:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 215:src/sys/cmsis_gcc.h **** }
 216:src/sys/cmsis_gcc.h **** 
 217:src/sys/cmsis_gcc.h **** 
 218:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 219:src/sys/cmsis_gcc.h **** 
 220:src/sys/cmsis_gcc.h **** /**
 221:src/sys/cmsis_gcc.h ****   \brief   Enable FIQ
 222:src/sys/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 223:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 224:src/sys/cmsis_gcc.h ****  */
 225:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 226:src/sys/cmsis_gcc.h **** {
 227:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 228:src/sys/cmsis_gcc.h **** }
 229:src/sys/cmsis_gcc.h **** 
 230:src/sys/cmsis_gcc.h **** 
 231:src/sys/cmsis_gcc.h **** /**
 232:src/sys/cmsis_gcc.h ****   \brief   Disable FIQ
 233:src/sys/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 234:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 235:src/sys/cmsis_gcc.h ****  */
 236:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 237:src/sys/cmsis_gcc.h **** {
 238:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 239:src/sys/cmsis_gcc.h **** }
 240:src/sys/cmsis_gcc.h **** 
 241:src/sys/cmsis_gcc.h **** 
 242:src/sys/cmsis_gcc.h **** /**
 243:src/sys/cmsis_gcc.h ****   \brief   Get Base Priority
 244:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 245:src/sys/cmsis_gcc.h ****   \return               Base Priority register value
 246:src/sys/cmsis_gcc.h ****  */
 247:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 248:src/sys/cmsis_gcc.h **** {
 249:src/sys/cmsis_gcc.h ****   uint32_t result;
 250:src/sys/cmsis_gcc.h **** 
 251:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 252:src/sys/cmsis_gcc.h ****   return(result);
 253:src/sys/cmsis_gcc.h **** }
 254:src/sys/cmsis_gcc.h **** 
 255:src/sys/cmsis_gcc.h **** 
 256:src/sys/cmsis_gcc.h **** /**
 257:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority
 258:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 259:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 260:src/sys/cmsis_gcc.h ****  */
 261:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 262:src/sys/cmsis_gcc.h **** {
 263:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 264:src/sys/cmsis_gcc.h **** }
 265:src/sys/cmsis_gcc.h **** 
 266:src/sys/cmsis_gcc.h **** 
 267:src/sys/cmsis_gcc.h **** /**
 268:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 269:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 270:src/sys/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 271:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 272:src/sys/cmsis_gcc.h ****  */
 273:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 274:src/sys/cmsis_gcc.h **** {
 275:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 276:src/sys/cmsis_gcc.h **** }
 277:src/sys/cmsis_gcc.h **** 
 278:src/sys/cmsis_gcc.h **** 
 279:src/sys/cmsis_gcc.h **** /**
 280:src/sys/cmsis_gcc.h ****   \brief   Get Fault Mask
 281:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 282:src/sys/cmsis_gcc.h ****   \return               Fault Mask register value
 283:src/sys/cmsis_gcc.h ****  */
 284:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 285:src/sys/cmsis_gcc.h **** {
 286:src/sys/cmsis_gcc.h ****   uint32_t result;
 287:src/sys/cmsis_gcc.h **** 
 288:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 289:src/sys/cmsis_gcc.h ****   return(result);
 290:src/sys/cmsis_gcc.h **** }
 291:src/sys/cmsis_gcc.h **** 
 292:src/sys/cmsis_gcc.h **** 
 293:src/sys/cmsis_gcc.h **** /**
 294:src/sys/cmsis_gcc.h ****   \brief   Set Fault Mask
 295:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 296:src/sys/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 297:src/sys/cmsis_gcc.h ****  */
 298:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 299:src/sys/cmsis_gcc.h **** {
 300:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 301:src/sys/cmsis_gcc.h **** }
 302:src/sys/cmsis_gcc.h **** 
 303:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 304:src/sys/cmsis_gcc.h **** 
 305:src/sys/cmsis_gcc.h **** 
 306:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 307:src/sys/cmsis_gcc.h **** 
 308:src/sys/cmsis_gcc.h **** /**
 309:src/sys/cmsis_gcc.h ****   \brief   Get FPSCR
 310:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 311:src/sys/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 312:src/sys/cmsis_gcc.h ****  */
 313:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 314:src/sys/cmsis_gcc.h **** {
 315:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 316:src/sys/cmsis_gcc.h ****   uint32_t result;
 317:src/sys/cmsis_gcc.h **** 
 318:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 319:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 320:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 321:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 322:src/sys/cmsis_gcc.h ****   return(result);
 323:src/sys/cmsis_gcc.h **** #else
 324:src/sys/cmsis_gcc.h ****    return(0);
 325:src/sys/cmsis_gcc.h **** #endif
 326:src/sys/cmsis_gcc.h **** }
 327:src/sys/cmsis_gcc.h **** 
 328:src/sys/cmsis_gcc.h **** 
 329:src/sys/cmsis_gcc.h **** /**
 330:src/sys/cmsis_gcc.h ****   \brief   Set FPSCR
 331:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 332:src/sys/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 333:src/sys/cmsis_gcc.h ****  */
 334:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 335:src/sys/cmsis_gcc.h **** {
 336:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 337:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 338:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 339:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 340:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 341:src/sys/cmsis_gcc.h **** #endif
 342:src/sys/cmsis_gcc.h **** }
 343:src/sys/cmsis_gcc.h **** 
 344:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 345:src/sys/cmsis_gcc.h **** 
 346:src/sys/cmsis_gcc.h **** 
 347:src/sys/cmsis_gcc.h **** 
 348:src/sys/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 349:src/sys/cmsis_gcc.h **** 
 350:src/sys/cmsis_gcc.h **** 
 351:src/sys/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 352:src/sys/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 353:src/sys/cmsis_gcc.h ****   Access to dedicated instructions
 354:src/sys/cmsis_gcc.h ****   @{
 355:src/sys/cmsis_gcc.h **** */
 356:src/sys/cmsis_gcc.h **** 
 357:src/sys/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 358:src/sys/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 359:src/sys/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 360:src/sys/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 361:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 362:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 363:src/sys/cmsis_gcc.h **** #else
 364:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 365:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 366:src/sys/cmsis_gcc.h **** #endif
 367:src/sys/cmsis_gcc.h **** 
 368:src/sys/cmsis_gcc.h **** /**
 369:src/sys/cmsis_gcc.h ****   \brief   No Operation
 370:src/sys/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 371:src/sys/cmsis_gcc.h ****  */
 372:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 373:src/sys/cmsis_gcc.h **** {
 374:src/sys/cmsis_gcc.h ****   __ASM volatile ("nop");
 375:src/sys/cmsis_gcc.h **** }
 376:src/sys/cmsis_gcc.h **** 
 377:src/sys/cmsis_gcc.h **** 
 378:src/sys/cmsis_gcc.h **** /**
 379:src/sys/cmsis_gcc.h ****   \brief   Wait For Interrupt
 380:src/sys/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 381:src/sys/cmsis_gcc.h ****  */
 382:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 383:src/sys/cmsis_gcc.h **** {
 384:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfi");
 385:src/sys/cmsis_gcc.h **** }
 386:src/sys/cmsis_gcc.h **** 
 387:src/sys/cmsis_gcc.h **** 
 388:src/sys/cmsis_gcc.h **** /**
 389:src/sys/cmsis_gcc.h ****   \brief   Wait For Event
 390:src/sys/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 391:src/sys/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 392:src/sys/cmsis_gcc.h ****  */
 393:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 394:src/sys/cmsis_gcc.h **** {
 395:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfe");
 396:src/sys/cmsis_gcc.h **** }
 397:src/sys/cmsis_gcc.h **** 
 398:src/sys/cmsis_gcc.h **** 
 399:src/sys/cmsis_gcc.h **** /**
 400:src/sys/cmsis_gcc.h ****   \brief   Send Event
 401:src/sys/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 402:src/sys/cmsis_gcc.h ****  */
 403:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 404:src/sys/cmsis_gcc.h **** {
 405:src/sys/cmsis_gcc.h ****   __ASM volatile ("sev");
 406:src/sys/cmsis_gcc.h **** }
 407:src/sys/cmsis_gcc.h **** 
 408:src/sys/cmsis_gcc.h **** 
 409:src/sys/cmsis_gcc.h **** /**
 410:src/sys/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 411:src/sys/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 412:src/sys/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 413:src/sys/cmsis_gcc.h ****            after the instruction has been completed.
 414:src/sys/cmsis_gcc.h ****  */
 415:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 416:src/sys/cmsis_gcc.h **** {
 417:src/sys/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 418:src/sys/cmsis_gcc.h **** }
 419:src/sys/cmsis_gcc.h **** 
 420:src/sys/cmsis_gcc.h **** 
 421:src/sys/cmsis_gcc.h **** /**
 422:src/sys/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 423:src/sys/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 424:src/sys/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 425:src/sys/cmsis_gcc.h ****  */
 426:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 427:src/sys/cmsis_gcc.h **** {
 428:src/sys/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  91              		.loc 2 428 0
  92              		.syntax unified
  93              	@ 428 "src/sys/cmsis_gcc.h" 1
  94 003e BFF34F8F 		dsb 0xF
  95              	@ 0 "" 2
  96              		.thumb
  97              		.syntax unified
  98 0042 7047     		bx	lr
  99              	.L11:
 100              		.align	2
 101              	.L10:
 102 0044 00000000 		.word	FPU_CPACR
 103              	.LBE11:
 104              	.LBE10:
 105              		.cfi_endproc
 106              	.LFE393:
 107              		.size	fpu_init, .-fpu_init
 108              		.align	1
 109              		.global	enable_io_compensation
 110              		.thumb
 111              		.thumb_func
 112              		.type	enable_io_compensation, %function
 113              	enable_io_compensation:
 114              	.LFB394:
  19:src/sys/init.c ****   __DSB();
  20:src/sys/init.c **** }
  21:src/sys/init.c **** 
  22:src/sys/init.c **** void enable_io_compensation() {
 115              		.loc 1 22 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120              	.LBB12:
 121              	.LBB13:
 122              		.file 3 "src/sys/devices.h"
   1:src/sys/devices.h **** #ifndef __IO_H
   2:src/sys/devices.h **** #define __IO_H
   3:src/sys/devices.h **** 
   4:src/sys/devices.h **** #include<stdint.h>
   5:src/sys/devices.h **** #include "cm4.h"
   6:src/sys/devices.h **** 
   7:src/sys/devices.h **** #define __reserved(offset) \
   8:src/sys/devices.h ****   uint32_t _reserved_ ## offset
   9:src/sys/devices.h **** 
  10:src/sys/devices.h **** #define __reserved_interval(offset1,offset2) \
  11:src/sys/devices.h ****   uint32_t _reserved_ ## offset1 ## _ ## offset2[((offset2)-(offset1))/4]
  12:src/sys/devices.h **** 
  13:src/sys/devices.h **** /* PM §4.2.10 */ 
  14:src/sys/devices.h **** struct MPU_registers {
  15:src/sys/devices.h ****   uint32_t TYPER;
  16:src/sys/devices.h ****   uint32_t CTRL;
  17:src/sys/devices.h ****   uint32_t RNR;
  18:src/sys/devices.h ****   uint32_t RBAR;
  19:src/sys/devices.h ****   uint32_t RASR;
  20:src/sys/devices.h ****   uint32_t RBAR_A1;
  21:src/sys/devices.h ****   uint32_t RASR_A1;
  22:src/sys/devices.h ****   uint32_t RBAR_A2;
  23:src/sys/devices.h ****   uint32_t RASR_A2;
  24:src/sys/devices.h ****   uint32_t RBAR_A3;
  25:src/sys/devices.h ****   uint32_t RASR_A3;
  26:src/sys/devices.h **** };
  27:src/sys/devices.h **** 
  28:src/sys/devices.h **** /* PM §4.3.11 */ 
  29:src/sys/devices.h **** struct NVIC_registers {
  30:src/sys/devices.h ****   uint32_t ISER[3];
  31:src/sys/devices.h ****   __reserved_interval(0x0c,0x80);
  32:src/sys/devices.h ****   uint32_t ICER[3];
  33:src/sys/devices.h ****   __reserved_interval(0x8c,0x100);
  34:src/sys/devices.h ****   uint32_t ISPR[3];
  35:src/sys/devices.h ****   __reserved_interval(0x10c,0x180);
  36:src/sys/devices.h ****   uint32_t ICPR[3];
  37:src/sys/devices.h ****   __reserved_interval(0x18c,0x200);
  38:src/sys/devices.h ****   uint32_t IABR[3];
  39:src/sys/devices.h ****   __reserved_interval(0x20c,0x300);
  40:src/sys/devices.h ****   uint8_t  IP[81];
  41:src/sys/devices.h ****   uint8_t _reserved_bytes[3];
  42:src/sys/devices.h **** };
  43:src/sys/devices.h **** 
  44:src/sys/devices.h **** /* PM §4.4.19 */ 
  45:src/sys/devices.h **** struct SCB_registers {
  46:src/sys/devices.h ****   uint32_t CPUID;
  47:src/sys/devices.h ****   uint32_t ICSR;
  48:src/sys/devices.h ****   uint32_t VTOR;
  49:src/sys/devices.h ****   uint32_t AIRCR;
  50:src/sys/devices.h ****   uint32_t SCR;
  51:src/sys/devices.h ****   uint32_t CCR;
  52:src/sys/devices.h ****   uint32_t SHPR1;
  53:src/sys/devices.h ****   uint32_t SHPR2;
  54:src/sys/devices.h ****   uint32_t SHPR3;
  55:src/sys/devices.h ****   uint32_t SHCRS;
  56:src/sys/devices.h ****   uint32_t CFSR;
  57:src/sys/devices.h ****   uint32_t HFSR;
  58:src/sys/devices.h ****   uint32_t MMAR;
  59:src/sys/devices.h ****   uint32_t BFAR;
  60:src/sys/devices.h ****   uint32_t AFSR;
  61:src/sys/devices.h **** };
  62:src/sys/devices.h **** 
  63:src/sys/devices.h **** /* PM §4.5.6 */ 
  64:src/sys/devices.h **** struct STK_registers {
  65:src/sys/devices.h ****   uint32_t CTRL;
  66:src/sys/devices.h ****   uint32_t LOAD;
  67:src/sys/devices.h ****   uint32_t VAL;
  68:src/sys/devices.h ****   uint32_t CALIB;
  69:src/sys/devices.h **** };
  70:src/sys/devices.h **** 
  71:src/sys/devices.h **** /* PM §4.6 */ 
  72:src/sys/devices.h **** struct FPU_registers {
  73:src/sys/devices.h ****   __reserved(0x0);
  74:src/sys/devices.h ****   uint32_t CCR;
  75:src/sys/devices.h ****   uint32_t CAR;
  76:src/sys/devices.h ****   uint32_t DSCR;
  77:src/sys/devices.h **** };
  78:src/sys/devices.h **** 
  79:src/sys/devices.h **** 
  80:src/sys/devices.h **** /* RM §3.6.7 */ 
  81:src/sys/devices.h **** struct FLASH_registers {
  82:src/sys/devices.h ****   uint32_t ACR;
  83:src/sys/devices.h ****   uint32_t KEYR;
  84:src/sys/devices.h ****   uint32_t OPTKEYR;
  85:src/sys/devices.h ****   uint32_t SR;
  86:src/sys/devices.h ****   uint32_t CR;
  87:src/sys/devices.h ****   uint32_t OPTCR;  
  88:src/sys/devices.h **** };
  89:src/sys/devices.h **** 
  90:src/sys/devices.h **** /* RM §4.4.4 */
  91:src/sys/devices.h **** struct CRC_registers {
  92:src/sys/devices.h ****   uint32_t DR;
  93:src/sys/devices.h ****   uint32_t ICR;
  94:src/sys/devices.h ****   uint32_t CR;
  95:src/sys/devices.h **** };
  96:src/sys/devices.h **** 
  97:src/sys/devices.h **** /* RM §5.5 */
  98:src/sys/devices.h **** struct PWR_registers {
  99:src/sys/devices.h ****   uint32_t CR;
 100:src/sys/devices.h ****   uint32_t CSR;
 101:src/sys/devices.h **** };
 102:src/sys/devices.h **** 
 103:src/sys/devices.h **** /* RM §6.3.28 */
 104:src/sys/devices.h **** struct RCC_registers {
 105:src/sys/devices.h ****   uint32_t CR;
 106:src/sys/devices.h ****   uint32_t PLLCFGR;
 107:src/sys/devices.h ****   uint32_t CFGR;
 108:src/sys/devices.h ****   uint32_t CIR;
 109:src/sys/devices.h ****   uint32_t AHB1RSTR;
 110:src/sys/devices.h ****   uint32_t AHB2RSTR;
 111:src/sys/devices.h ****   uint32_t AHB3RSTR;
 112:src/sys/devices.h ****   __reserved(0x1c);
 113:src/sys/devices.h ****   uint32_t APB1RSTR;
 114:src/sys/devices.h ****   uint32_t APB2RSTR;
 115:src/sys/devices.h ****   __reserved(0x28);
 116:src/sys/devices.h ****   __reserved(0x2c);
 117:src/sys/devices.h ****   uint32_t AHB1ENR;
 118:src/sys/devices.h ****   uint32_t AHB2ENR;
 119:src/sys/devices.h ****   uint32_t AHB3ENR;
 120:src/sys/devices.h ****   __reserved(0x3c);
 121:src/sys/devices.h ****   uint32_t APB1ENR;
 122:src/sys/devices.h ****   uint32_t APB2ENR;
 123:src/sys/devices.h ****   __reserved(0x48);
 124:src/sys/devices.h ****   __reserved(0x4c);
 125:src/sys/devices.h ****   uint32_t AHB1LPENR;
 126:src/sys/devices.h ****   uint32_t AHB2LPENR;
 127:src/sys/devices.h ****   uint32_t AHB3LPENR;
 128:src/sys/devices.h ****   __reserved(0x5c);
 129:src/sys/devices.h ****   uint32_t APB1LPENR;
 130:src/sys/devices.h ****   uint32_t APB2LPENR;
 131:src/sys/devices.h ****   __reserved(0x68);
 132:src/sys/devices.h ****   __reserved(0x6c);
 133:src/sys/devices.h ****   uint32_t BDCR;
 134:src/sys/devices.h ****   uint32_t CSR;
 135:src/sys/devices.h ****   __reserved(0x78);
 136:src/sys/devices.h ****   __reserved(0x7c);
 137:src/sys/devices.h ****   uint32_t SSCGR;
 138:src/sys/devices.h ****   uint32_t PLLI2SCFGR;
 139:src/sys/devices.h ****   uint32_t PLLSAICFGR;
 140:src/sys/devices.h ****   uint32_t DCKCFGR;
 141:src/sys/devices.h ****   uint32_t CKGATENR;
 142:src/sys/devices.h ****   uint32_t DCKCFGR2;
 143:src/sys/devices.h **** };
 144:src/sys/devices.h **** 
 145:src/sys/devices.h **** /* RM §7.4.11 */
 146:src/sys/devices.h **** struct GPIO_registers {
 147:src/sys/devices.h ****   uint32_t MODER;
 148:src/sys/devices.h ****   uint32_t OTYPER;
 149:src/sys/devices.h ****   uint32_t OSPEEDR;
 150:src/sys/devices.h ****   uint32_t PUPDR;
 151:src/sys/devices.h ****   uint32_t IDR;
 152:src/sys/devices.h ****   uint32_t ODR;
 153:src/sys/devices.h ****   uint32_t BSRR;
 154:src/sys/devices.h ****   uint32_t LCKR;
 155:src/sys/devices.h ****   uint32_t AFRL;
 156:src/sys/devices.h ****   uint32_t AFRH;
 157:src/sys/devices.h **** };
 158:src/sys/devices.h **** 
 159:src/sys/devices.h **** /* RM §8.2.9 */
 160:src/sys/devices.h **** struct SYSCFG_registers {
 161:src/sys/devices.h ****   uint32_t MEMRMP;
 162:src/sys/devices.h ****   uint32_t PMC;
 163:src/sys/devices.h ****   uint32_t EXTICR1;
 164:src/sys/devices.h ****   uint32_t EXTICR2;
 165:src/sys/devices.h ****   uint32_t EXTICR3;
 166:src/sys/devices.h ****   uint32_t EXTICR4;
 167:src/sys/devices.h ****   __reserved(0x18);
 168:src/sys/devices.h ****   __reserved(0x1c);
 169:src/sys/devices.h ****   uint32_t CMPCR;
 170:src/sys/devices.h ****   __reserved(0x24);
 171:src/sys/devices.h ****   __reserved(0x28);
 172:src/sys/devices.h ****   uint32_t CFGR;
 173:src/sys/devices.h **** };
 174:src/sys/devices.h **** 
 175:src/sys/devices.h **** /* RM §9.5.11 */
 176:src/sys/devices.h **** struct DMA_Sx_registers {
 177:src/sys/devices.h ****   uint32_t CR;
 178:src/sys/devices.h ****   uint32_t NDTR;
 179:src/sys/devices.h ****   void* PAR;
 180:src/sys/devices.h ****   void* M0AR;
 181:src/sys/devices.h ****   void* M1AR;
 182:src/sys/devices.h ****   uint32_t FCR;
 183:src/sys/devices.h **** };
 184:src/sys/devices.h **** struct DMA_registers {
 185:src/sys/devices.h ****   uint32_t LISR;
 186:src/sys/devices.h ****   uint32_t HISR;
 187:src/sys/devices.h ****   uint32_t LIFCR;
 188:src/sys/devices.h ****   uint32_t HIFCR;
 189:src/sys/devices.h ****   struct DMA_Sx_registers S[8];
 190:src/sys/devices.h **** };
 191:src/sys/devices.h **** 
 192:src/sys/devices.h **** /* RM §10.3.7 */
 193:src/sys/devices.h **** struct EXTI_registers {
 194:src/sys/devices.h ****   uint32_t IMR;
 195:src/sys/devices.h ****   uint32_t EMR;
 196:src/sys/devices.h ****   uint32_t RTSR;
 197:src/sys/devices.h ****   uint32_t FTSR;
 198:src/sys/devices.h ****   uint32_t SWIER;
 199:src/sys/devices.h ****   uint32_t PR;
 200:src/sys/devices.h **** };
 201:src/sys/devices.h **** 
 202:src/sys/devices.h **** /* RM §11.8 */
 203:src/sys/devices.h **** struct FMC_registers {
 204:src/sys/devices.h ****   uint32_t BCR1;
 205:src/sys/devices.h ****   uint32_t BCR2;
 206:src/sys/devices.h ****   uint32_t BCR3;
 207:src/sys/devices.h ****   uint32_t BCR4;
 208:src/sys/devices.h ****   uint32_t BTR1;
 209:src/sys/devices.h ****   uint32_t BTR2;
 210:src/sys/devices.h ****   uint32_t BTR3;
 211:src/sys/devices.h ****   uint32_t BTR4;
 212:src/sys/devices.h ****   uint32_t BWTR1;
 213:src/sys/devices.h ****   uint32_t BWTR2;
 214:src/sys/devices.h ****   uint32_t BWTR3;
 215:src/sys/devices.h ****   uint32_t BWTR4;
 216:src/sys/devices.h ****   uint32_t PCR;
 217:src/sys/devices.h ****   uint32_t SR;
 218:src/sys/devices.h ****   uint32_t PMEM;
 219:src/sys/devices.h ****   uint32_t PATT;
 220:src/sys/devices.h ****   uint32_t ECCR;
 221:src/sys/devices.h ****   uint32_t SDCR1;
 222:src/sys/devices.h ****   uint32_t SDCR2;
 223:src/sys/devices.h ****   uint32_t SDTR1;
 224:src/sys/devices.h ****   uint32_t SDTR2;
 225:src/sys/devices.h ****   uint32_t SDCMR;
 226:src/sys/devices.h ****   uint32_t SDRTR;
 227:src/sys/devices.h ****   uint32_t SDSR;
 228:src/sys/devices.h **** };
 229:src/sys/devices.h **** 
 230:src/sys/devices.h **** /* RM §12.5.14 */
 231:src/sys/devices.h **** struct QUADSPI_registers {
 232:src/sys/devices.h ****   uint32_t CR;
 233:src/sys/devices.h ****   uint32_t DCR;
 234:src/sys/devices.h ****   uint32_t SR;
 235:src/sys/devices.h ****   uint32_t FCR;
 236:src/sys/devices.h ****   uint32_t DLR;
 237:src/sys/devices.h ****   uint32_t CCR;
 238:src/sys/devices.h ****   uint32_t AR;
 239:src/sys/devices.h ****   uint32_t ABR;
 240:src/sys/devices.h ****   uint32_t DR;
 241:src/sys/devices.h ****   uint32_t PSMKR;
 242:src/sys/devices.h ****   uint32_t PSMAR;
 243:src/sys/devices.h ****   uint32_t PIR;
 244:src/sys/devices.h ****   uint32_t LPTR;
 245:src/sys/devices.h **** };
 246:src/sys/devices.h **** 
 247:src/sys/devices.h **** /* RM §13.13.18 */
 248:src/sys/devices.h **** struct ADCx_registers {
 249:src/sys/devices.h ****   uint32_t SR;
 250:src/sys/devices.h ****   uint32_t CR1;
 251:src/sys/devices.h ****   uint32_t CR2;
 252:src/sys/devices.h ****   uint32_t SMPR1;
 253:src/sys/devices.h ****   uint32_t SMPR2;
 254:src/sys/devices.h ****   uint32_t JOFR1;
 255:src/sys/devices.h ****   uint32_t JOFR2;
 256:src/sys/devices.h ****   uint32_t JOFR3;
 257:src/sys/devices.h ****   uint32_t JOFR4;
 258:src/sys/devices.h ****   uint32_t HTR;
 259:src/sys/devices.h ****   uint32_t LTR;
 260:src/sys/devices.h ****   uint32_t SQR1;
 261:src/sys/devices.h ****   uint32_t SQR2;
 262:src/sys/devices.h ****   uint32_t SQR3;
 263:src/sys/devices.h ****   uint32_t JSQR;
 264:src/sys/devices.h ****   uint32_t JDR1;
 265:src/sys/devices.h ****   uint32_t JDR2;
 266:src/sys/devices.h ****   uint32_t JDR3;
 267:src/sys/devices.h ****   uint32_t JDR4;
 268:src/sys/devices.h ****   uint32_t DR;
 269:src/sys/devices.h **** };
 270:src/sys/devices.h **** 
 271:src/sys/devices.h **** struct ADC_common_registers {
 272:src/sys/devices.h ****   uint32_t CSR;
 273:src/sys/devices.h ****   uint32_t CCR;
 274:src/sys/devices.h ****   uint32_t CDR;
 275:src/sys/devices.h **** };
 276:src/sys/devices.h **** 
 277:src/sys/devices.h **** 
 278:src/sys/devices.h **** /* RM §14.5.15 */
 279:src/sys/devices.h **** struct DAC_registers {
 280:src/sys/devices.h ****   uint32_t CR;
 281:src/sys/devices.h ****   uint32_t SWTRIGR;
 282:src/sys/devices.h ****   uint32_t DHR12R1;
 283:src/sys/devices.h ****   uint32_t DHR12L1;
 284:src/sys/devices.h ****   uint32_t DHR8R1;
 285:src/sys/devices.h ****   uint32_t DHR12R2;
 286:src/sys/devices.h ****   uint32_t DHR12L2;
 287:src/sys/devices.h ****   uint32_t DHR8R2;
 288:src/sys/devices.h ****   uint32_t DHR12RD;
 289:src/sys/devices.h ****   uint32_t DHR12LD;
 290:src/sys/devices.h ****   uint32_t DHR8RD;
 291:src/sys/devices.h ****   uint32_t DOR1;
 292:src/sys/devices.h ****   uint32_t DOR2;
 293:src/sys/devices.h ****   uint32_t SR;
 294:src/sys/devices.h **** };
 295:src/sys/devices.h **** 
 296:src/sys/devices.h **** /* RM §15.8.12 */
 297:src/sys/devices.h **** struct DCMI_registers {
 298:src/sys/devices.h ****   uint32_t CR;
 299:src/sys/devices.h ****   uint32_t SR;
 300:src/sys/devices.h ****   uint32_t RIS;
 301:src/sys/devices.h ****   uint32_t IER;
 302:src/sys/devices.h ****   uint32_t MIS;
 303:src/sys/devices.h ****   uint32_t ICR;
 304:src/sys/devices.h ****   uint32_t ESCR;
 305:src/sys/devices.h ****   uint32_t ESUR;
 306:src/sys/devices.h ****   uint32_t CWSTRT;
 307:src/sys/devices.h ****   uint32_t CWSIZE;
 308:src/sys/devices.h ****   uint32_t DR;
 309:src/sys/devices.h **** };
 310:src/sys/devices.h **** 
 311:src/sys/devices.h **** /* RM §16.4.21 TIM1,8 */
 312:src/sys/devices.h **** /* RM §17.4.21 TIM2,3,4,5 */
 313:src/sys/devices.h **** /* RM §18.4.13 TIM9,12 */
 314:src/sys/devices.h **** /* RM §18.5.1  TIM10,11,13,14 */
 315:src/sys/devices.h **** /* RM §19.4.9  TIM6,7 */
 316:src/sys/devices.h **** struct TIMx_registers {
 317:src/sys/devices.h ****   uint32_t CR1;
 318:src/sys/devices.h ****   uint32_t CR2;
 319:src/sys/devices.h ****   uint32_t SMCR;
 320:src/sys/devices.h ****   uint32_t DIER;
 321:src/sys/devices.h ****   uint32_t SR;
 322:src/sys/devices.h ****   uint32_t EGR;
 323:src/sys/devices.h ****   uint32_t CCMR1;
 324:src/sys/devices.h ****   uint32_t CCMR2;
 325:src/sys/devices.h ****   uint32_t CCER;
 326:src/sys/devices.h ****   uint32_t CNT;
 327:src/sys/devices.h ****   uint32_t PSC;
 328:src/sys/devices.h ****   uint32_t ARR;
 329:src/sys/devices.h ****   uint32_t RCR;
 330:src/sys/devices.h ****   uint32_t CCR1;
 331:src/sys/devices.h ****   uint32_t CCR2;
 332:src/sys/devices.h ****   uint32_t CCR3;
 333:src/sys/devices.h ****   uint32_t CCR4;
 334:src/sys/devices.h ****   uint32_t BDTR;
 335:src/sys/devices.h ****   uint32_t DCR;
 336:src/sys/devices.h ****   uint32_t DMAR;
 337:src/sys/devices.h ****   uint32_t OR;
 338:src/sys/devices.h **** };
 339:src/sys/devices.h **** 
 340:src/sys/devices.h **** /* RM §20.4.5 */
 341:src/sys/devices.h **** struct IWDG_registers {
 342:src/sys/devices.h ****   uint32_t KR;
 343:src/sys/devices.h ****   uint32_t PR;
 344:src/sys/devices.h ****   uint32_t RLR;
 345:src/sys/devices.h ****   uint32_t SR;
 346:src/sys/devices.h **** };
 347:src/sys/devices.h **** 
 348:src/sys/devices.h **** /* RM §21.6.4 */
 349:src/sys/devices.h **** struct WWDG_registers {
 350:src/sys/devices.h ****   uint32_t CR;
 351:src/sys/devices.h ****   uint32_t CFR;
 352:src/sys/devices.h ****   uint32_t SR;
 353:src/sys/devices.h **** };
 354:src/sys/devices.h **** 
 355:src/sys/devices.h **** /* RM §22.6.21 */
 356:src/sys/devices.h **** struct RTC_registers {
 357:src/sys/devices.h ****   uint32_t TR;
 358:src/sys/devices.h ****   uint32_t DR;
 359:src/sys/devices.h ****   uint32_t CR;
 360:src/sys/devices.h ****   uint32_t ISR;
 361:src/sys/devices.h ****   uint32_t PRER;
 362:src/sys/devices.h ****   uint32_t WUTR;
 363:src/sys/devices.h ****   uint32_t CALIBR;
 364:src/sys/devices.h ****   uint32_t ALRMAR;
 365:src/sys/devices.h ****   uint32_t ALRMBR;
 366:src/sys/devices.h ****   uint32_t WPR;
 367:src/sys/devices.h ****   uint32_t SSR;
 368:src/sys/devices.h ****   uint32_t SHIFTR;
 369:src/sys/devices.h ****   uint32_t TSTR;
 370:src/sys/devices.h ****   uint32_t TSSSR;
 371:src/sys/devices.h ****   uint32_t CALR;
 372:src/sys/devices.h ****   uint32_t TAFCR;
 373:src/sys/devices.h ****   uint32_t ALRMASSR;
 374:src/sys/devices.h ****   uint32_t ALRMBSSR;
 375:src/sys/devices.h ****   uint32_t BKPR[20];
 376:src/sys/devices.h **** };
 377:src/sys/devices.h **** 
 378:src/sys/devices.h **** /* RM §23.7.12 */
 379:src/sys/devices.h **** struct FMPI2C_registers {
 380:src/sys/devices.h ****   uint32_t CR1;
 381:src/sys/devices.h ****   uint32_t CR2;
 382:src/sys/devices.h ****   uint32_t OAR1;
 383:src/sys/devices.h ****   uint32_t OAR2;
 384:src/sys/devices.h ****   uint32_t TIMINGR;
 385:src/sys/devices.h ****   uint32_t TIMEOUTR;
 386:src/sys/devices.h ****   uint32_t ISR;
 387:src/sys/devices.h ****   uint32_t ICR;
 388:src/sys/devices.h ****   uint32_t PECR;
 389:src/sys/devices.h ****   uint32_t RXDR;
 390:src/sys/devices.h ****   uint32_t TXDR;
 391:src/sys/devices.h **** };
 392:src/sys/devices.h **** 
 393:src/sys/devices.h **** /* RM §24.6.14 */
 394:src/sys/devices.h **** struct I2C_registers {
 395:src/sys/devices.h ****   uint32_t CR1;
 396:src/sys/devices.h ****   uint32_t CR2;
 397:src/sys/devices.h ****   uint32_t OAR1;
 398:src/sys/devices.h ****   uint32_t OAR2;
 399:src/sys/devices.h ****   uint32_t DR;
 400:src/sys/devices.h ****   uint32_t SR1;
 401:src/sys/devices.h ****   uint32_t SR2;
 402:src/sys/devices.h ****   uint32_t CCR;
 403:src/sys/devices.h ****   uint32_t TRISE;
 404:src/sys/devices.h ****   uint32_t FLTR;
 405:src/sys/devices.h **** };
 406:src/sys/devices.h **** 
 407:src/sys/devices.h **** /* RM §25.6.8 */
 408:src/sys/devices.h **** struct USART_registers {
 409:src/sys/devices.h ****   uint32_t SR;
 410:src/sys/devices.h ****   uint32_t DR;
 411:src/sys/devices.h ****   uint32_t BRR;
 412:src/sys/devices.h ****   uint32_t CR1;
 413:src/sys/devices.h ****   uint32_t CR2;
 414:src/sys/devices.h ****   uint32_t CR3;
 415:src/sys/devices.h ****   uint32_t GTPR;
 416:src/sys/devices.h **** };
 417:src/sys/devices.h **** 
 418:src/sys/devices.h **** /* RM §26.7.10 */
 419:src/sys/devices.h **** struct SPI_I2S_registers {
 420:src/sys/devices.h ****   uint32_t CR1;
 421:src/sys/devices.h ****   uint32_t CR2;
 422:src/sys/devices.h ****   uint32_t SR;
 423:src/sys/devices.h ****   uint32_t DR;
 424:src/sys/devices.h ****   uint32_t CRCPR;
 425:src/sys/devices.h ****   uint32_t RXCRCR;
 426:src/sys/devices.h ****   uint32_t TXCRCR;
 427:src/sys/devices.h ****   uint32_t I2SCFGR;
 428:src/sys/devices.h ****   uint32_t I2SPR;
 429:src/sys/devices.h **** };
 430:src/sys/devices.h **** 
 431:src/sys/devices.h **** /* RM §27.5.10 */
 432:src/sys/devices.h **** struct SPDIFRX_registers {
 433:src/sys/devices.h ****   uint32_t CR;
 434:src/sys/devices.h ****   uint32_t IMR;
 435:src/sys/devices.h ****   uint32_t SR;
 436:src/sys/devices.h ****   uint32_t IFCR;
 437:src/sys/devices.h ****   uint32_t DR;
 438:src/sys/devices.h ****   uint32_t CSR;
 439:src/sys/devices.h ****   uint32_t DIR;
 440:src/sys/devices.h **** };
 441:src/sys/devices.h **** 
 442:src/sys/devices.h **** /* RM §28.5.10 */
 443:src/sys/devices.h **** struct SAI_x_registers {
 444:src/sys/devices.h ****   uint32_t CR1;
 445:src/sys/devices.h ****   uint32_t CR2;
 446:src/sys/devices.h ****   uint32_t FRCR;
 447:src/sys/devices.h ****   uint32_t SLOTR;
 448:src/sys/devices.h ****   uint32_t IM;
 449:src/sys/devices.h ****   uint32_t SR;
 450:src/sys/devices.h ****   uint32_t CLRFR;
 451:src/sys/devices.h ****   uint32_t DR;
 452:src/sys/devices.h **** };
 453:src/sys/devices.h **** 
 454:src/sys/devices.h **** struct SAI_registers {
 455:src/sys/devices.h ****   uint32_t GCR;
 456:src/sys/devices.h ****   struct SAI_x_registers A;
 457:src/sys/devices.h ****   struct SAI_x_registers B;
 458:src/sys/devices.h **** };
 459:src/sys/devices.h **** 
 460:src/sys/devices.h **** /* RM §29.8.16 */
 461:src/sys/devices.h **** struct SDIO_registers {
 462:src/sys/devices.h ****   uint32_t POWER;
 463:src/sys/devices.h ****   uint32_t CLKCR;
 464:src/sys/devices.h ****   uint32_t CMD;
 465:src/sys/devices.h ****   uint32_t RESPCMD;
 466:src/sys/devices.h ****   uint32_t RESP1;
 467:src/sys/devices.h ****   uint32_t RESP2;
 468:src/sys/devices.h ****   uint32_t RESP3;
 469:src/sys/devices.h ****   uint32_t RESP4;
 470:src/sys/devices.h ****   uint32_t DTIMER;
 471:src/sys/devices.h ****   uint32_t DLEN;
 472:src/sys/devices.h ****   uint32_t DCTRL;
 473:src/sys/devices.h ****   uint32_t DCOUNT;
 474:src/sys/devices.h ****   uint32_t STA;
 475:src/sys/devices.h ****   uint32_t ICR;
 476:src/sys/devices.h ****   uint32_t MASK;
 477:src/sys/devices.h ****   __reserved(0x40);
 478:src/sys/devices.h ****   __reserved(0x44);
 479:src/sys/devices.h ****   uint32_t FIFOCNT;
 480:src/sys/devices.h ****   __reserved_interval(0x4c,0x80);
 481:src/sys/devices.h ****   uint32_t FIFO[32];
 482:src/sys/devices.h **** };
 483:src/sys/devices.h ****   
 484:src/sys/devices.h **** /* RM §30.9.5 */
 485:src/sys/devices.h **** struct bxCAN_TxRx_registers {
 486:src/sys/devices.h ****   uint32_t IR;
 487:src/sys/devices.h ****   uint32_t DTR;
 488:src/sys/devices.h ****   uint32_t DLR;
 489:src/sys/devices.h ****   uint32_t DHR;
 490:src/sys/devices.h **** };
 491:src/sys/devices.h **** 
 492:src/sys/devices.h **** struct bxCAN_registers {
 493:src/sys/devices.h ****   uint32_t MCR;
 494:src/sys/devices.h ****   uint32_t MSR;
 495:src/sys/devices.h ****   uint32_t TSR;
 496:src/sys/devices.h ****   uint32_t RF0R;
 497:src/sys/devices.h ****   uint32_t RF1R;
 498:src/sys/devices.h ****   uint32_t IER;
 499:src/sys/devices.h ****   uint32_t ESR;
 500:src/sys/devices.h ****   uint32_t BTR;
 501:src/sys/devices.h ****   __reserved_interval(0x20,0x180);
 502:src/sys/devices.h ****   struct bxCAN_TxRx_registers Tx[3];
 503:src/sys/devices.h ****   struct bxCAN_TxRx_registers Rx[2];
 504:src/sys/devices.h ****   __reserved_interval(0x1d0,0x200);
 505:src/sys/devices.h ****   uint32_t FMR;
 506:src/sys/devices.h ****   uint32_t FM1R;
 507:src/sys/devices.h ****   __reserved(0x208);
 508:src/sys/devices.h ****   uint32_t FS1R;
 509:src/sys/devices.h ****   __reserved(0x210);
 510:src/sys/devices.h ****   uint32_t FFA1R;
 511:src/sys/devices.h ****   __reserved(0x218);
 512:src/sys/devices.h ****   uint32_t FA1R;
 513:src/sys/devices.h ****   __reserved_interval(0x220,0x240);
 514:src/sys/devices.h ****   struct {uint32_t R1; uint32_t R2;} F[28];
 515:src/sys/devices.h **** };
 516:src/sys/devices.h **** 
 517:src/sys/devices.h **** /* RM §32.7.7 */
 518:src/sys/devices.h **** struct OTG_registers {
 519:src/sys/devices.h ****    /* TODO */
 520:src/sys/devices.h **** };
 521:src/sys/devices.h **** 
 522:src/sys/devices.h **** /* RM §32.7.7 */
 523:src/sys/devices.h **** struct HDMI_CEC_registers {
 524:src/sys/devices.h ****   uint32_t CR;
 525:src/sys/devices.h ****   uint32_t CFGR;
 526:src/sys/devices.h ****   uint32_t TXDR;
 527:src/sys/devices.h ****   uint32_t RXDR;
 528:src/sys/devices.h ****   uint32_t ISR;
 529:src/sys/devices.h ****   uint32_t IER;
 530:src/sys/devices.h **** };
 531:src/sys/devices.h **** 
 532:src/sys/devices.h **** /* RM §33.18 */
 533:src/sys/devices.h **** struct DBGMCU_registers {
 534:src/sys/devices.h ****   uint32_t IDCODE;
 535:src/sys/devices.h ****   uint32_t CR;
 536:src/sys/devices.h ****   uint32_t APB1FZ;
 537:src/sys/devices.h ****   uint32_t APB2FZ;
 538:src/sys/devices.h **** };
 539:src/sys/devices.h **** 
 540:src/sys/devices.h **** /* Constant values */
 541:src/sys/devices.h **** 
 542:src/sys/devices.h **** extern const uint16_t Package_data;
 543:src/sys/devices.h **** extern const uint16_t TS_CAL2;
 544:src/sys/devices.h **** extern const uint16_t TS_CAL1;
 545:src/sys/devices.h **** extern const uint16_t VREFIN_CAL;
 546:src/sys/devices.h **** extern const uint16_t Flash_size;
 547:src/sys/devices.h **** extern const uint32_t U_ID[3];
 548:src/sys/devices.h **** 
 549:src/sys/devices.h **** /* Core Devices base addresses */
 550:src/sys/devices.h **** 
 551:src/sys/devices.h **** extern volatile struct DBGMCU_registers DBG;
 552:src/sys/devices.h **** 
 553:src/sys/devices.h **** extern volatile struct FPU_registers FPU;
 554:src/sys/devices.h **** extern volatile uint32_t NVIC_STIR;
 555:src/sys/devices.h **** extern volatile struct MPU_registers MPU;
 556:src/sys/devices.h **** extern volatile uint32_t FPU_CPACR;
 557:src/sys/devices.h **** extern volatile struct SCB_registers SCB;
 558:src/sys/devices.h **** extern volatile struct NVIC_registers NVIC;
 559:src/sys/devices.h **** extern volatile struct STK_registers SysTick;
 560:src/sys/devices.h **** 
 561:src/sys/devices.h **** /* Devices base addresses */
 562:src/sys/devices.h **** 
 563:src/sys/devices.h **** extern volatile struct QUADSPI_registers QUADSPI;
 564:src/sys/devices.h **** 
 565:src/sys/devices.h **** extern volatile struct DCMI_registers DCMI;
 566:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_FS;
 567:src/sys/devices.h **** 
 568:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_HS;
 569:src/sys/devices.h **** extern volatile struct DMA_registers DMA2;
 570:src/sys/devices.h **** extern volatile struct DMA_registers DMA1;
 571:src/sys/devices.h **** extern uint32_t BKPSRAM[1024];
 572:src/sys/devices.h **** extern volatile struct FLASH_registers FLASH;
 573:src/sys/devices.h **** extern volatile struct RCC_registers RCC;
 574:src/sys/devices.h **** extern volatile struct CRC_registers CRC;
 575:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOH;
 576:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOG;
 577:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOF;
 578:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOE;
 579:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOD;
 580:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOC;
 581:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOB;
 582:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOA;
 583:src/sys/devices.h **** 
 584:src/sys/devices.h **** extern volatile struct SAI_registers SAI2;
 585:src/sys/devices.h **** extern volatile struct SAI_registers SAI1;
 586:src/sys/devices.h **** 
 587:src/sys/devices.h **** extern volatile struct TIMx_registers TIM11;
 588:src/sys/devices.h **** extern volatile struct TIMx_registers TIM10;
 589:src/sys/devices.h **** extern volatile struct TIMx_registers TIM9;
 590:src/sys/devices.h **** extern volatile struct EXTI_registers EXTI;
 591:src/sys/devices.h **** extern volatile struct SYSCFG_registers SYSCFG;
 592:src/sys/devices.h **** extern volatile struct SPI_registers SPI4;
 593:src/sys/devices.h **** extern volatile struct SPI_registers SPI1;
 594:src/sys/devices.h **** extern volatile struct SDIO_registers SDMMC;
 595:src/sys/devices.h **** extern volatile struct ADCx_registers ADC1;
 596:src/sys/devices.h **** extern volatile struct ADCx_registers ADC2;
 597:src/sys/devices.h **** extern volatile struct ADCx_registers ADC3;
 598:src/sys/devices.h **** extern volatile struct ADC_common_registers ADC_common;
 599:src/sys/devices.h **** extern volatile struct USART_registers USART6;
 600:src/sys/devices.h **** extern volatile struct USART_registers USART1;
 601:src/sys/devices.h **** extern volatile struct TIMx_registers TIM8;
 602:src/sys/devices.h **** extern volatile struct TIMx_registers TIM1;
 603:src/sys/devices.h **** 
 604:src/sys/devices.h **** extern volatile struct DAC_registers DAC;
 605:src/sys/devices.h **** extern volatile struct PWR_registers PWR;
 606:src/sys/devices.h **** extern volatile struct HDMI_CEC_registers HDMI_CEC;
 607:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN2;
 608:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN1;
 609:src/sys/devices.h **** extern volatile struct FMPI2C_registers FMPI2C1;
 610:src/sys/devices.h **** extern volatile struct I2C_registers I2C3;
 611:src/sys/devices.h **** extern volatile struct I2C_registers I2C2;
 612:src/sys/devices.h **** extern volatile struct I2C_registers I2C1;
 613:src/sys/devices.h **** extern volatile struct USART_registers UART5;
 614:src/sys/devices.h **** extern volatile struct USART_registers UART4;
 615:src/sys/devices.h **** extern volatile struct USART_registers USART3;
 616:src/sys/devices.h **** extern volatile struct USART_registers USART2;
 617:src/sys/devices.h **** extern volatile struct SPDIF_RX_registers SPDIF_RX;
 618:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI3_I2S3;
 619:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI2_I2S2;
 620:src/sys/devices.h **** extern volatile struct IWDG_registers IWDG;
 621:src/sys/devices.h **** extern volatile struct WWDG_registers WWDG;
 622:src/sys/devices.h **** extern volatile struct RTC_registers RTC_BKP;
 623:src/sys/devices.h **** extern volatile struct TIMx_registers TIM14;
 624:src/sys/devices.h **** extern volatile struct TIMx_registers TIM13;
 625:src/sys/devices.h **** extern volatile struct TIMx_registers TIM12;
 626:src/sys/devices.h **** extern volatile struct TIMx_registers TIM7;
 627:src/sys/devices.h **** extern volatile struct TIMx_registers TIM6;
 628:src/sys/devices.h **** extern volatile struct TIMx_registers TIM5;
 629:src/sys/devices.h **** extern volatile struct TIMx_registers TIM4;
 630:src/sys/devices.h **** extern volatile struct TIMx_registers TIM3;
 631:src/sys/devices.h **** extern volatile struct TIMx_registers TIM2;
 632:src/sys/devices.h **** 
 633:src/sys/devices.h **** #define __set_bit(_w,_i) ((_w)|=(1<<(_i)))
 634:src/sys/devices.h **** #define __clr_bit(_w,_i) ((_w) &= ~(1<<(_i)))
 635:src/sys/devices.h **** #define __really_inline__ static inline __attribute__((always_inline)) 
 636:src/sys/devices.h **** #define __sync __DSB
 637:src/sys/devices.h **** 
 638:src/sys/devices.h **** #define __declare_device_control(name,bus,bus_bit) \
 639:src/sys/devices.h ****   void __really_inline__ enable_##name() { \
 640:src/sys/devices.h ****     __set_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 641:src/sys/devices.h ****   void __really_inline__ low_power_enable_##name() { \
 642:src/sys/devices.h ****     __set_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 643:src/sys/devices.h ****   void __really_inline__ disable_##name() { \
 644:src/sys/devices.h ****     __clr_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 645:src/sys/devices.h ****   void __really_inline__ low_power_disable_## name() { \
 646:src/sys/devices.h ****     __clr_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 647:src/sys/devices.h ****   void __really_inline__ reset_##name() { \
 648:src/sys/devices.h ****     __set_bit(RCC.bus##RSTR,bus_bit); __sync(); } \
 649:src/sys/devices.h **** \
 650:src/sys/devices.h **** 
 651:src/sys/devices.h **** /* __declare_device_control(FMC,AHB3,0) FMC not available in LQFP64 package */
 652:src/sys/devices.h **** __declare_device_control(QUADSPI,AHB3,1)
 653:src/sys/devices.h **** 
 654:src/sys/devices.h **** __declare_device_control(DCMI,AHB2,0)
 655:src/sys/devices.h **** __declare_device_control(USB_OTG_FS,AHB2,7)
 656:src/sys/devices.h **** 
 657:src/sys/devices.h **** __declare_device_control(USB_OTG_HS,AHB1,29)
 658:src/sys/devices.h **** __declare_device_control(DMA2,AHB1,22)
 659:src/sys/devices.h **** __declare_device_control(DMA1,AHB1,21)
 660:src/sys/devices.h **** __declare_device_control(CRC,AHB1,12)
 661:src/sys/devices.h **** __declare_device_control(GPIOH,AHB1,7)
 662:src/sys/devices.h **** __declare_device_control(GPIOG,AHB1,6)
 663:src/sys/devices.h **** __declare_device_control(GPIOF,AHB1,5)
 664:src/sys/devices.h **** __declare_device_control(GPIOE,AHB1,4)
 665:src/sys/devices.h **** __declare_device_control(GPIOD,AHB1,3)
 666:src/sys/devices.h **** __declare_device_control(GPIOC,AHB1,2)
 667:src/sys/devices.h **** __declare_device_control(GPIOB,AHB1,1)
 668:src/sys/devices.h **** __declare_device_control(GPIOA,AHB1,0)
 669:src/sys/devices.h **** 
 670:src/sys/devices.h **** __declare_device_control(SAI2,APB2,23)
 671:src/sys/devices.h **** __declare_device_control(SAI1,APB2,22)
 672:src/sys/devices.h **** 
 673:src/sys/devices.h **** __declare_device_control(TIM11,APB2,18)
 674:src/sys/devices.h **** __declare_device_control(TIM10,APB2,17)
 675:src/sys/devices.h **** __declare_device_control(TIM9,APB2,16)
 676:src/sys/devices.h **** __declare_device_control(SYSCFG,APB2,14)
 123              		.loc 3 676 0
 124 0048 074A     		ldr	r2, .L16
 125 004a 536C     		ldr	r3, [r2, #68]
 126 004c 43F48043 		orr	r3, r3, #16384
 127 0050 5364     		str	r3, [r2, #68]
 128              	.LBB14:
 129              	.LBB15:
 130              		.loc 2 428 0
 131              		.syntax unified
 132              	@ 428 "src/sys/cmsis_gcc.h" 1
 133 0052 BFF34F8F 		dsb 0xF
 134              	@ 0 "" 2
 135              		.thumb
 136              		.syntax unified
 137              	.LBE15:
 138              	.LBE14:
 139              	.LBE13:
 140              	.LBE12:
  23:src/sys/init.c ****   enable_SYSCFG();
  24:src/sys/init.c ****   SYSCFG.CMPCR|=(1<<0);
 141              		.loc 1 24 0
 142 0056 054B     		ldr	r3, .L16+4
 143 0058 1A6A     		ldr	r2, [r3, #32]
 144 005a 42F00102 		orr	r2, r2, #1
 145 005e 1A62     		str	r2, [r3, #32]
 146              	.L13:
  25:src/sys/init.c ****   while((SYSCFG.CMPCR & (1<<8)) == 0);
 147              		.loc 1 25 0 discriminator 1
 148 0060 1A6A     		ldr	r2, [r3, #32]
 149 0062 D205     		lsls	r2, r2, #23
 150 0064 FCD5     		bpl	.L13
  26:src/sys/init.c **** }
 151              		.loc 1 26 0
 152 0066 7047     		bx	lr
 153              	.L17:
 154              		.align	2
 155              	.L16:
 156 0068 00000000 		.word	RCC
 157 006c 00000000 		.word	SYSCFG
 158              		.cfi_endproc
 159              	.LFE394:
 160              		.size	enable_io_compensation, .-enable_io_compensation
 161              		.align	1
 162              		.global	clock_init
 163              		.thumb
 164              		.thumb_func
 165              		.type	clock_init, %function
 166              	clock_init:
 167              	.LFB395:
  27:src/sys/init.c **** 
  28:src/sys/init.c **** void clock_init() {
 168              		.loc 1 28 0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172 0070 07B5     		push	{r0, r1, r2, lr}
 173              		.cfi_def_cfa_offset 16
 174              		.cfi_offset 14, -4
  29:src/sys/init.c ****   set_MCO(MCO1_PLL,5,MCO2_SYS,5);
 175              		.loc 1 29 0
 176 0072 0523     		movs	r3, #5
 177 0074 1946     		mov	r1, r3
 178 0076 0022     		movs	r2, #0
 179 0078 0320     		movs	r0, #3
 180 007a FFF7FEFF 		bl	set_MCO
 181              	.LVL1:
  30:src/sys/init.c ****   set_voltage_scale(scale1);
 182              		.loc 1 30 0
 183 007e 0320     		movs	r0, #3
 184 0080 FFF7FEFF 		bl	set_voltage_scale
 185              	.LVL2:
  31:src/sys/init.c ****   start_Overdrive();
 186              		.loc 1 31 0
 187 0084 FFF7FEFF 		bl	start_Overdrive
 188              	.LVL3:
  32:src/sys/init.c ****   start_PLL(PLLSRC_HSI,16,336,2,7,7);
 189              		.loc 1 32 0
 190 0088 0723     		movs	r3, #7
 191 008a 0193     		str	r3, [sp, #4]
 192 008c 0093     		str	r3, [sp]
 193 008e 4FF4A872 		mov	r2, #336
 194 0092 0223     		movs	r3, #2
 195 0094 1021     		movs	r1, #16
 196 0096 0020     		movs	r0, #0
 197 0098 FFF7FEFF 		bl	start_PLL
 198              	.LVL4:
  33:src/sys/init.c ****   set_bus_clock_dividers_exp(0,2,1);
 199              		.loc 1 33 0
 200 009c 0122     		movs	r2, #1
 201 009e 0221     		movs	r1, #2
 202 00a0 0020     		movs	r0, #0
 203 00a2 FFF7FEFF 		bl	set_bus_clock_dividers_exp
 204              	.LVL5:
  34:src/sys/init.c ****   set_FLASH_latency(5);
 205              		.loc 1 34 0
 206 00a6 0520     		movs	r0, #5
 207 00a8 FFF7FEFF 		bl	set_FLASH_latency
 208              	.LVL6:
  35:src/sys/init.c ****   set_SYSCLK(SW_PLL_P);
 209              		.loc 1 35 0
 210 00ac 0220     		movs	r0, #2
 211 00ae FFF7FEFF 		bl	set_SYSCLK
 212              	.LVL7:
  36:src/sys/init.c ****   enable_io_compensation();
 213              		.loc 1 36 0
 214 00b2 FFF7FEFF 		bl	enable_io_compensation
 215              	.LVL8:
  37:src/sys/init.c ****   enable_MCO_GPIO();
  38:src/sys/init.c **** }
 216              		.loc 1 38 0
 217 00b6 03B0     		add	sp, sp, #12
 218              		.cfi_def_cfa_offset 4
 219              		@ sp needed
 220 00b8 5DF804EB 		ldr	lr, [sp], #4
 221              		.cfi_restore 14
 222              		.cfi_def_cfa_offset 0
  37:src/sys/init.c ****   enable_MCO_GPIO();
 223              		.loc 1 37 0
 224 00bc FFF7FEBF 		b	enable_MCO_GPIO
 225              	.LVL9:
 226              		.cfi_endproc
 227              	.LFE395:
 228              		.size	clock_init, .-clock_init
 229              		.align	1
 230              		.global	software_init_hook
 231              		.thumb
 232              		.thumb_func
 233              		.type	software_init_hook, %function
 234              	software_init_hook:
 235              	.LFB396:
  39:src/sys/init.c **** 
  40:src/sys/init.c **** void software_init_hook() { /* called from crt0.S */
 236              		.loc 1 40 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240 00c0 08B5     		push	{r3, lr}
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 3, -8
 243              		.cfi_offset 14, -4
  41:src/sys/init.c ****   fpu_init();
 244              		.loc 1 41 0
 245 00c2 FFF7FEFF 		bl	fpu_init
 246              	.LVL10:
  42:src/sys/init.c ****   clock_init();
 247              		.loc 1 42 0
 248 00c6 FFF7FEFF 		bl	clock_init
 249              	.LVL11:
  43:src/sys/init.c ****   serial_io_init();
  44:src/sys/init.c **** }
 250              		.loc 1 44 0
 251 00ca BDE80840 		pop	{r3, lr}
 252              		.cfi_restore 14
 253              		.cfi_restore 3
 254              		.cfi_def_cfa_offset 0
  43:src/sys/init.c ****   serial_io_init();
 255              		.loc 1 43 0
 256 00ce FFF7FEBF 		b	serial_io_init
 257              	.LVL12:
 258              		.cfi_endproc
 259              	.LFE396:
 260              		.size	software_init_hook, .-software_init_hook
 261              	.Letext0:
 262              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 263              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 264              		.file 6 "src/sys/clock.h"
 265              		.file 7 "src/sys/power.h"
 266              		.file 8 "src/sys/serial_io.h"
 267 00d2 00BF     		.section	.debug_info,"",%progbits
 268              	.Ldebug_info0:
 269 0000 3C060000 		.4byte	0x63c
 270 0004 0400     		.2byte	0x4
 271 0006 00000000 		.4byte	.Ldebug_abbrev0
 272 000a 04       		.byte	0x4
 273 000b 01       		.uleb128 0x1
 274 000c A6030000 		.4byte	.LASF95
 275 0010 0C       		.byte	0xc
 276 0011 E3040000 		.4byte	.LASF96
 277 0015 06010000 		.4byte	.LASF97
 278 0019 00000000 		.4byte	.Ltext0
 279 001d D2000000 		.4byte	.Letext0-.Ltext0
 280 0021 00000000 		.4byte	.Ldebug_line0
 281 0025 02       		.uleb128 0x2
 282 0026 01       		.byte	0x1
 283 0027 06       		.byte	0x6
 284 0028 3D000000 		.4byte	.LASF0
 285 002c 02       		.uleb128 0x2
 286 002d 01       		.byte	0x1
 287 002e 08       		.byte	0x8
 288 002f F5010000 		.4byte	.LASF1
 289 0033 02       		.uleb128 0x2
 290 0034 02       		.byte	0x2
 291 0035 05       		.byte	0x5
 292 0036 52000000 		.4byte	.LASF2
 293 003a 02       		.uleb128 0x2
 294 003b 02       		.byte	0x2
 295 003c 07       		.byte	0x7
 296 003d EB020000 		.4byte	.LASF3
 297 0041 03       		.uleb128 0x3
 298 0042 8E030000 		.4byte	.LASF5
 299 0046 04       		.byte	0x4
 300 0047 3F       		.byte	0x3f
 301 0048 4C000000 		.4byte	0x4c
 302 004c 02       		.uleb128 0x2
 303 004d 04       		.byte	0x4
 304 004e 05       		.byte	0x5
 305 004f B7010000 		.4byte	.LASF4
 306 0053 03       		.uleb128 0x3
 307 0054 A1000000 		.4byte	.LASF6
 308 0058 04       		.byte	0x4
 309 0059 41       		.byte	0x41
 310 005a 5E000000 		.4byte	0x5e
 311 005e 02       		.uleb128 0x2
 312 005f 04       		.byte	0x4
 313 0060 07       		.byte	0x7
 314 0061 40030000 		.4byte	.LASF7
 315 0065 02       		.uleb128 0x2
 316 0066 08       		.byte	0x8
 317 0067 05       		.byte	0x5
 318 0068 93000000 		.4byte	.LASF8
 319 006c 02       		.uleb128 0x2
 320 006d 08       		.byte	0x8
 321 006e 07       		.byte	0x7
 322 006f 43020000 		.4byte	.LASF9
 323 0073 04       		.uleb128 0x4
 324 0074 04       		.byte	0x4
 325 0075 05       		.byte	0x5
 326 0076 696E7400 		.ascii	"int\000"
 327 007a 02       		.uleb128 0x2
 328 007b 04       		.byte	0x4
 329 007c 07       		.byte	0x7
 330 007d 63020000 		.4byte	.LASF10
 331 0081 03       		.uleb128 0x3
 332 0082 E3020000 		.4byte	.LASF11
 333 0086 05       		.byte	0x5
 334 0087 2C       		.byte	0x2c
 335 0088 41000000 		.4byte	0x41
 336 008c 03       		.uleb128 0x3
 337 008d 5A020000 		.4byte	.LASF12
 338 0091 05       		.byte	0x5
 339 0092 30       		.byte	0x30
 340 0093 53000000 		.4byte	0x53
 341 0097 02       		.uleb128 0x2
 342 0098 04       		.byte	0x4
 343 0099 07       		.byte	0x7
 344 009a 62000000 		.4byte	.LASF13
 345 009e 05       		.uleb128 0x5
 346 009f 24020000 		.4byte	.LASF17
 347 00a3 18       		.byte	0x18
 348 00a4 03       		.byte	0x3
 349 00a5 51       		.byte	0x51
 350 00a6 F1000000 		.4byte	0xf1
 351 00aa 06       		.uleb128 0x6
 352 00ab 41435200 		.ascii	"ACR\000"
 353 00af 03       		.byte	0x3
 354 00b0 52       		.byte	0x52
 355 00b1 8C000000 		.4byte	0x8c
 356 00b5 00       		.byte	0
 357 00b6 07       		.uleb128 0x7
 358 00b7 D2000000 		.4byte	.LASF14
 359 00bb 03       		.byte	0x3
 360 00bc 53       		.byte	0x53
 361 00bd 8C000000 		.4byte	0x8c
 362 00c1 04       		.byte	0x4
 363 00c2 07       		.uleb128 0x7
 364 00c3 8F010000 		.4byte	.LASF15
 365 00c7 03       		.byte	0x3
 366 00c8 54       		.byte	0x54
 367 00c9 8C000000 		.4byte	0x8c
 368 00cd 08       		.byte	0x8
 369 00ce 06       		.uleb128 0x6
 370 00cf 535200   		.ascii	"SR\000"
 371 00d2 03       		.byte	0x3
 372 00d3 55       		.byte	0x55
 373 00d4 8C000000 		.4byte	0x8c
 374 00d8 0C       		.byte	0xc
 375 00d9 06       		.uleb128 0x6
 376 00da 435200   		.ascii	"CR\000"
 377 00dd 03       		.byte	0x3
 378 00de 56       		.byte	0x56
 379 00df 8C000000 		.4byte	0x8c
 380 00e3 10       		.byte	0x10
 381 00e4 07       		.uleb128 0x7
 382 00e5 C4040000 		.4byte	.LASF16
 383 00e9 03       		.byte	0x3
 384 00ea 57       		.byte	0x57
 385 00eb 8C000000 		.4byte	0x8c
 386 00ef 14       		.byte	0x14
 387 00f0 00       		.byte	0
 388 00f1 05       		.uleb128 0x5
 389 00f2 99020000 		.4byte	.LASF18
 390 00f6 98       		.byte	0x98
 391 00f7 03       		.byte	0x3
 392 00f8 68       		.byte	0x68
 393 00f9 C5020000 		.4byte	0x2c5
 394 00fd 06       		.uleb128 0x6
 395 00fe 435200   		.ascii	"CR\000"
 396 0101 03       		.byte	0x3
 397 0102 69       		.byte	0x69
 398 0103 8C000000 		.4byte	0x8c
 399 0107 00       		.byte	0
 400 0108 07       		.uleb128 0x7
 401 0109 BA020000 		.4byte	.LASF19
 402 010d 03       		.byte	0x3
 403 010e 6A       		.byte	0x6a
 404 010f 8C000000 		.4byte	0x8c
 405 0113 04       		.byte	0x4
 406 0114 07       		.uleb128 0x7
 407 0115 E0000000 		.4byte	.LASF20
 408 0119 03       		.byte	0x3
 409 011a 6B       		.byte	0x6b
 410 011b 8C000000 		.4byte	0x8c
 411 011f 08       		.byte	0x8
 412 0120 06       		.uleb128 0x6
 413 0121 43495200 		.ascii	"CIR\000"
 414 0125 03       		.byte	0x3
 415 0126 6C       		.byte	0x6c
 416 0127 8C000000 		.4byte	0x8c
 417 012b 0C       		.byte	0xc
 418 012c 07       		.uleb128 0x7
 419 012d 48040000 		.4byte	.LASF21
 420 0131 03       		.byte	0x3
 421 0132 6D       		.byte	0x6d
 422 0133 8C000000 		.4byte	0x8c
 423 0137 10       		.byte	0x10
 424 0138 07       		.uleb128 0x7
 425 0139 70020000 		.4byte	.LASF22
 426 013d 03       		.byte	0x3
 427 013e 6E       		.byte	0x6e
 428 013f 8C000000 		.4byte	0x8c
 429 0143 14       		.byte	0x14
 430 0144 07       		.uleb128 0x7
 431 0145 6B040000 		.4byte	.LASF23
 432 0149 03       		.byte	0x3
 433 014a 6F       		.byte	0x6f
 434 014b 8C000000 		.4byte	0x8c
 435 014f 18       		.byte	0x18
 436 0150 07       		.uleb128 0x7
 437 0151 0E030000 		.4byte	.LASF24
 438 0155 03       		.byte	0x3
 439 0156 70       		.byte	0x70
 440 0157 8C000000 		.4byte	0x8c
 441 015b 1C       		.byte	0x1c
 442 015c 07       		.uleb128 0x7
 443 015d 3E010000 		.4byte	.LASF25
 444 0161 03       		.byte	0x3
 445 0162 71       		.byte	0x71
 446 0163 8C000000 		.4byte	0x8c
 447 0167 20       		.byte	0x20
 448 0168 07       		.uleb128 0x7
 449 0169 1D030000 		.4byte	.LASF26
 450 016d 03       		.byte	0x3
 451 016e 72       		.byte	0x72
 452 016f 8C000000 		.4byte	0x8c
 453 0173 24       		.byte	0x24
 454 0174 07       		.uleb128 0x7
 455 0175 5C040000 		.4byte	.LASF27
 456 0179 03       		.byte	0x3
 457 017a 73       		.byte	0x73
 458 017b 8C000000 		.4byte	0x8c
 459 017f 28       		.byte	0x28
 460 0180 07       		.uleb128 0x7
 461 0181 B5040000 		.4byte	.LASF28
 462 0185 03       		.byte	0x3
 463 0186 74       		.byte	0x74
 464 0187 8C000000 		.4byte	0x8c
 465 018b 2C       		.byte	0x2c
 466 018c 07       		.uleb128 0x7
 467 018d AC000000 		.4byte	.LASF29
 468 0191 03       		.byte	0x3
 469 0192 75       		.byte	0x75
 470 0193 8C000000 		.4byte	0x8c
 471 0197 30       		.byte	0x30
 472 0198 07       		.uleb128 0x7
 473 0199 6E010000 		.4byte	.LASF30
 474 019d 03       		.byte	0x3
 475 019e 76       		.byte	0x76
 476 019f 8C000000 		.4byte	0x8c
 477 01a3 34       		.byte	0x34
 478 01a4 07       		.uleb128 0x7
 479 01a5 76010000 		.4byte	.LASF31
 480 01a9 03       		.byte	0x3
 481 01aa 77       		.byte	0x77
 482 01ab 8C000000 		.4byte	0x8c
 483 01af 38       		.byte	0x38
 484 01b0 07       		.uleb128 0x7
 485 01b1 EF000000 		.4byte	.LASF32
 486 01b5 03       		.byte	0x3
 487 01b6 78       		.byte	0x78
 488 01b7 8C000000 		.4byte	0x8c
 489 01bb 3C       		.byte	0x3c
 490 01bc 07       		.uleb128 0x7
 491 01bd FE000000 		.4byte	.LASF33
 492 01c1 03       		.byte	0x3
 493 01c2 79       		.byte	0x79
 494 01c3 8C000000 		.4byte	0x8c
 495 01c7 40       		.byte	0x40
 496 01c8 07       		.uleb128 0x7
 497 01c9 12020000 		.4byte	.LASF34
 498 01cd 03       		.byte	0x3
 499 01ce 7A       		.byte	0x7a
 500 01cf 8C000000 		.4byte	0x8c
 501 01d3 44       		.byte	0x44
 502 01d4 07       		.uleb128 0x7
 503 01d5 C2020000 		.4byte	.LASF35
 504 01d9 03       		.byte	0x3
 505 01da 7B       		.byte	0x7b
 506 01db 8C000000 		.4byte	0x8c
 507 01df 48       		.byte	0x48
 508 01e0 07       		.uleb128 0x7
 509 01e1 03020000 		.4byte	.LASF36
 510 01e5 03       		.byte	0x3
 511 01e6 7C       		.byte	0x7c
 512 01e7 8C000000 		.4byte	0x8c
 513 01eb 4C       		.byte	0x4c
 514 01ec 07       		.uleb128 0x7
 515 01ed 00000000 		.4byte	.LASF37
 516 01f1 03       		.byte	0x3
 517 01f2 7D       		.byte	0x7d
 518 01f3 8C000000 		.4byte	0x8c
 519 01f7 50       		.byte	0x50
 520 01f8 07       		.uleb128 0x7
 521 01f9 26030000 		.4byte	.LASF38
 522 01fd 03       		.byte	0x3
 523 01fe 7E       		.byte	0x7e
 524 01ff 8C000000 		.4byte	0x8c
 525 0203 54       		.byte	0x54
 526 0204 07       		.uleb128 0x7
 527 0205 E5000000 		.4byte	.LASF39
 528 0209 03       		.byte	0x3
 529 020a 7F       		.byte	0x7f
 530 020b 8C000000 		.4byte	0x8c
 531 020f 58       		.byte	0x58
 532 0210 07       		.uleb128 0x7
 533 0211 65030000 		.4byte	.LASF40
 534 0215 03       		.byte	0x3
 535 0216 80       		.byte	0x80
 536 0217 8C000000 		.4byte	0x8c
 537 021b 5C       		.byte	0x5c
 538 021c 07       		.uleb128 0x7
 539 021d D1020000 		.4byte	.LASF41
 540 0221 03       		.byte	0x3
 541 0222 81       		.byte	0x81
 542 0223 8C000000 		.4byte	0x8c
 543 0227 60       		.byte	0x60
 544 0228 07       		.uleb128 0x7
 545 0229 AB040000 		.4byte	.LASF42
 546 022d 03       		.byte	0x3
 547 022e 82       		.byte	0x82
 548 022f 8C000000 		.4byte	0x8c
 549 0233 64       		.byte	0x64
 550 0234 07       		.uleb128 0x7
 551 0235 39040000 		.4byte	.LASF43
 552 0239 03       		.byte	0x3
 553 023a 83       		.byte	0x83
 554 023b 8C000000 		.4byte	0x8c
 555 023f 68       		.byte	0x68
 556 0240 07       		.uleb128 0x7
 557 0241 19000000 		.4byte	.LASF44
 558 0245 03       		.byte	0x3
 559 0246 84       		.byte	0x84
 560 0247 8C000000 		.4byte	0x8c
 561 024b 6C       		.byte	0x6c
 562 024c 07       		.uleb128 0x7
 563 024d 6B000000 		.4byte	.LASF45
 564 0251 03       		.byte	0x3
 565 0252 85       		.byte	0x85
 566 0253 8C000000 		.4byte	0x8c
 567 0257 70       		.byte	0x70
 568 0258 06       		.uleb128 0x6
 569 0259 43535200 		.ascii	"CSR\000"
 570 025d 03       		.byte	0x3
 571 025e 86       		.byte	0x86
 572 025f 8C000000 		.4byte	0x8c
 573 0263 74       		.byte	0x74
 574 0264 07       		.uleb128 0x7
 575 0265 79000000 		.4byte	.LASF46
 576 0269 03       		.byte	0x3
 577 026a 87       		.byte	0x87
 578 026b 8C000000 		.4byte	0x8c
 579 026f 78       		.byte	0x78
 580 0270 07       		.uleb128 0x7
 581 0271 7F040000 		.4byte	.LASF47
 582 0275 03       		.byte	0x3
 583 0276 88       		.byte	0x88
 584 0277 8C000000 		.4byte	0x8c
 585 027b 7C       		.byte	0x7c
 586 027c 07       		.uleb128 0x7
 587 027d B4000000 		.4byte	.LASF48
 588 0281 03       		.byte	0x3
 589 0282 89       		.byte	0x89
 590 0283 8C000000 		.4byte	0x8c
 591 0287 80       		.byte	0x80
 592 0288 07       		.uleb128 0x7
 593 0289 88000000 		.4byte	.LASF49
 594 028d 03       		.byte	0x3
 595 028e 8A       		.byte	0x8a
 596 028f 8C000000 		.4byte	0x8c
 597 0293 84       		.byte	0x84
 598 0294 07       		.uleb128 0x7
 599 0295 8E040000 		.4byte	.LASF50
 600 0299 03       		.byte	0x3
 601 029a 8B       		.byte	0x8b
 602 029b 8C000000 		.4byte	0x8c
 603 029f 88       		.byte	0x88
 604 02a0 07       		.uleb128 0x7
 605 02a1 47010000 		.4byte	.LASF51
 606 02a5 03       		.byte	0x3
 607 02a6 8C       		.byte	0x8c
 608 02a7 8C000000 		.4byte	0x8c
 609 02ab 8C       		.byte	0x8c
 610 02ac 07       		.uleb128 0x7
 611 02ad 70000000 		.4byte	.LASF52
 612 02b1 03       		.byte	0x3
 613 02b2 8D       		.byte	0x8d
 614 02b3 8C000000 		.4byte	0x8c
 615 02b7 90       		.byte	0x90
 616 02b8 07       		.uleb128 0x7
 617 02b9 D7000000 		.4byte	.LASF53
 618 02bd 03       		.byte	0x3
 619 02be 8E       		.byte	0x8e
 620 02bf 8C000000 		.4byte	0x8c
 621 02c3 94       		.byte	0x94
 622 02c4 00       		.byte	0
 623 02c5 05       		.uleb128 0x5
 624 02c6 7E010000 		.4byte	.LASF54
 625 02ca 30       		.byte	0x30
 626 02cb 03       		.byte	0x3
 627 02cc A0       		.byte	0xa0
 628 02cd 62030000 		.4byte	0x362
 629 02d1 07       		.uleb128 0x7
 630 02d2 A0010000 		.4byte	.LASF55
 631 02d6 03       		.byte	0x3
 632 02d7 A1       		.byte	0xa1
 633 02d8 8C000000 		.4byte	0x8c
 634 02dc 00       		.byte	0
 635 02dd 06       		.uleb128 0x6
 636 02de 504D4300 		.ascii	"PMC\000"
 637 02e2 03       		.byte	0x3
 638 02e3 A2       		.byte	0xa2
 639 02e4 8C000000 		.4byte	0x8c
 640 02e8 04       		.byte	0x4
 641 02e9 07       		.uleb128 0x7
 642 02ea 79020000 		.4byte	.LASF56
 643 02ee 03       		.byte	0x3
 644 02ef A3       		.byte	0xa3
 645 02f0 8C000000 		.4byte	0x8c
 646 02f4 08       		.byte	0x8
 647 02f5 07       		.uleb128 0x7
 648 02f6 81020000 		.4byte	.LASF57
 649 02fa 03       		.byte	0x3
 650 02fb A4       		.byte	0xa4
 651 02fc 8C000000 		.4byte	0x8c
 652 0300 0C       		.byte	0xc
 653 0301 07       		.uleb128 0x7
 654 0302 89020000 		.4byte	.LASF58
 655 0306 03       		.byte	0x3
 656 0307 A5       		.byte	0xa5
 657 0308 8C000000 		.4byte	0x8c
 658 030c 10       		.byte	0x10
 659 030d 07       		.uleb128 0x7
 660 030e 91020000 		.4byte	.LASF59
 661 0312 03       		.byte	0x3
 662 0313 A6       		.byte	0xa6
 663 0314 8C000000 		.4byte	0x8c
 664 0318 14       		.byte	0x14
 665 0319 07       		.uleb128 0x7
 666 031a BA000000 		.4byte	.LASF60
 667 031e 03       		.byte	0x3
 668 031f A7       		.byte	0xa7
 669 0320 8C000000 		.4byte	0x8c
 670 0324 18       		.byte	0x18
 671 0325 07       		.uleb128 0x7
 672 0326 0E030000 		.4byte	.LASF24
 673 032a 03       		.byte	0x3
 674 032b A8       		.byte	0xa8
 675 032c 8C000000 		.4byte	0x8c
 676 0330 1C       		.byte	0x1c
 677 0331 07       		.uleb128 0x7
 678 0332 EF010000 		.4byte	.LASF61
 679 0336 03       		.byte	0x3
 680 0337 A9       		.byte	0xa9
 681 0338 8C000000 		.4byte	0x8c
 682 033c 20       		.byte	0x20
 683 033d 07       		.uleb128 0x7
 684 033e 74030000 		.4byte	.LASF62
 685 0342 03       		.byte	0x3
 686 0343 AA       		.byte	0xaa
 687 0344 8C000000 		.4byte	0x8c
 688 0348 24       		.byte	0x24
 689 0349 07       		.uleb128 0x7
 690 034a 5C040000 		.4byte	.LASF27
 691 034e 03       		.byte	0x3
 692 034f AB       		.byte	0xab
 693 0350 8C000000 		.4byte	0x8c
 694 0354 28       		.byte	0x28
 695 0355 07       		.uleb128 0x7
 696 0356 E0000000 		.4byte	.LASF20
 697 035a 03       		.byte	0x3
 698 035b AC       		.byte	0xac
 699 035c 8C000000 		.4byte	0x8c
 700 0360 2C       		.byte	0x2c
 701 0361 00       		.byte	0
 702 0362 08       		.uleb128 0x8
 703 0363 01       		.byte	0x1
 704 0364 2C000000 		.4byte	0x2c
 705 0368 06       		.byte	0x6
 706 0369 07       		.byte	0x7
 707 036a 7B030000 		.4byte	0x37b
 708 036e 09       		.uleb128 0x9
 709 036f 74040000 		.4byte	.LASF63
 710 0373 00       		.byte	0
 711 0374 09       		.uleb128 0x9
 712 0375 51040000 		.4byte	.LASF64
 713 0379 01       		.byte	0x1
 714 037a 00       		.byte	0
 715 037b 08       		.uleb128 0x8
 716 037c 01       		.byte	0x1
 717 037d 2C000000 		.4byte	0x2c
 718 0381 06       		.byte	0x6
 719 0382 08       		.byte	0x8
 720 0383 A0030000 		.4byte	0x3a0
 721 0387 09       		.uleb128 0x9
 722 0388 F2040000 		.4byte	.LASF65
 723 038c 00       		.byte	0
 724 038d 09       		.uleb128 0x9
 725 038e CA040000 		.4byte	.LASF66
 726 0392 01       		.byte	0x1
 727 0393 09       		.uleb128 0x9
 728 0394 C9010000 		.4byte	.LASF67
 729 0398 02       		.byte	0x2
 730 0399 09       		.uleb128 0x9
 731 039a D2010000 		.4byte	.LASF68
 732 039e 03       		.byte	0x3
 733 039f 00       		.byte	0
 734 03a0 08       		.uleb128 0x8
 735 03a1 01       		.byte	0x1
 736 03a2 2C000000 		.4byte	0x2c
 737 03a6 06       		.byte	0x6
 738 03a7 09       		.byte	0x9
 739 03a8 C5030000 		.4byte	0x3c5
 740 03ac 09       		.uleb128 0x9
 741 03ad 30040000 		.4byte	.LASF69
 742 03b1 00       		.byte	0
 743 03b2 09       		.uleb128 0x9
 744 03b3 C0010000 		.4byte	.LASF70
 745 03b7 01       		.byte	0x1
 746 03b8 09       		.uleb128 0x9
 747 03b9 FE020000 		.4byte	.LASF71
 748 03bd 02       		.byte	0x2
 749 03be 09       		.uleb128 0x9
 750 03bf 49000000 		.4byte	.LASF72
 751 03c3 03       		.byte	0x3
 752 03c4 00       		.byte	0
 753 03c5 08       		.uleb128 0x8
 754 03c6 01       		.byte	0x1
 755 03c7 2C000000 		.4byte	0x2c
 756 03cb 06       		.byte	0x6
 757 03cc 0A       		.byte	0xa
 758 03cd EA030000 		.4byte	0x3ea
 759 03d1 09       		.uleb128 0x9
 760 03d2 A7020000 		.4byte	.LASF73
 761 03d6 00       		.byte	0
 762 03d7 09       		.uleb128 0x9
 763 03d8 97010000 		.4byte	.LASF74
 764 03dc 01       		.byte	0x1
 765 03dd 09       		.uleb128 0x9
 766 03de C9000000 		.4byte	.LASF75
 767 03e2 02       		.byte	0x2
 768 03e3 09       		.uleb128 0x9
 769 03e4 DB010000 		.4byte	.LASF76
 770 03e8 03       		.byte	0x3
 771 03e9 00       		.byte	0
 772 03ea 08       		.uleb128 0x8
 773 03eb 01       		.byte	0x1
 774 03ec 2C000000 		.4byte	0x2c
 775 03f0 07       		.byte	0x7
 776 03f1 02       		.byte	0x2
 777 03f2 09040000 		.4byte	0x409
 778 03f6 09       		.uleb128 0x9
 779 03f7 28000000 		.4byte	.LASF77
 780 03fb 03       		.byte	0x3
 781 03fc 09       		.uleb128 0x9
 782 03fd 2F000000 		.4byte	.LASF78
 783 0401 02       		.byte	0x2
 784 0402 09       		.uleb128 0x9
 785 0403 36000000 		.4byte	.LASF79
 786 0407 01       		.byte	0x1
 787 0408 00       		.byte	0
 788 0409 0A       		.uleb128 0xa
 789 040a 3D020000 		.4byte	.LASF98
 790 040e 02       		.byte	0x2
 791 040f AA01     		.2byte	0x1aa
 792 0411 03       		.byte	0x3
 793 0412 0B       		.uleb128 0xb
 794 0413 98030000 		.4byte	.LASF99
 795 0417 03       		.byte	0x3
 796 0418 A402     		.2byte	0x2a4
 797 041a 03       		.byte	0x3
 798 041b 0C       		.uleb128 0xc
 799 041c 99040000 		.4byte	.LASF100
 800 0420 01       		.byte	0x1
 801 0421 08       		.byte	0x8
 802 0422 00000000 		.4byte	.LFB392
 803 0426 34000000 		.4byte	.LFE392-.LFB392
 804 042a 01       		.uleb128 0x1
 805 042b 9C       		.byte	0x9c
 806 042c 3E040000 		.4byte	0x43e
 807 0430 0D       		.uleb128 0xd
 808 0431 DB020000 		.4byte	.LASF101
 809 0435 01       		.byte	0x1
 810 0436 08       		.byte	0x8
 811 0437 81000000 		.4byte	0x81
 812 043b 01       		.uleb128 0x1
 813 043c 50       		.byte	0x50
 814 043d 00       		.byte	0
 815 043e 0E       		.uleb128 0xe
 816 043f 34020000 		.4byte	.LASF80
 817 0443 01       		.byte	0x1
 818 0444 10       		.byte	0x10
 819 0445 34000000 		.4byte	.LFB393
 820 0449 14000000 		.4byte	.LFE393-.LFB393
 821 044d 01       		.uleb128 0x1
 822 044e 9C       		.byte	0x9c
 823 044f 63040000 		.4byte	0x463
 824 0453 0F       		.uleb128 0xf
 825 0454 09040000 		.4byte	0x409
 826 0458 3E000000 		.4byte	.LBB10
 827 045c 0A000000 		.4byte	.LBE10-.LBB10
 828 0460 01       		.byte	0x1
 829 0461 13       		.byte	0x13
 830 0462 00       		.byte	0
 831 0463 0E       		.uleb128 0xe
 832 0464 57010000 		.4byte	.LASF81
 833 0468 01       		.byte	0x1
 834 0469 16       		.byte	0x16
 835 046a 48000000 		.4byte	.LFB394
 836 046e 28000000 		.4byte	.LFE394-.LFB394
 837 0472 01       		.uleb128 0x1
 838 0473 9C       		.byte	0x9c
 839 0474 99040000 		.4byte	0x499
 840 0478 10       		.uleb128 0x10
 841 0479 12040000 		.4byte	0x412
 842 047d 48000000 		.4byte	.LBB12
 843 0481 0E000000 		.4byte	.LBE12-.LBB12
 844 0485 01       		.byte	0x1
 845 0486 17       		.byte	0x17
 846 0487 11       		.uleb128 0x11
 847 0488 09040000 		.4byte	0x409
 848 048c 52000000 		.4byte	.LBB14
 849 0490 04000000 		.4byte	.LBE14-.LBB14
 850 0494 03       		.byte	0x3
 851 0495 A402     		.2byte	0x2a4
 852 0497 00       		.byte	0
 853 0498 00       		.byte	0
 854 0499 0E       		.uleb128 0xe
 855 049a 83030000 		.4byte	.LASF82
 856 049e 01       		.byte	0x1
 857 049f 1C       		.byte	0x1c
 858 04a0 70000000 		.4byte	.LFB395
 859 04a4 50000000 		.4byte	.LFE395-.LFB395
 860 04a8 01       		.uleb128 0x1
 861 04a9 9C       		.byte	0x9c
 862 04aa 72050000 		.4byte	0x572
 863 04ae 12       		.uleb128 0x12
 864 04af 7E000000 		.4byte	.LVL1
 865 04b3 E7050000 		.4byte	0x5e7
 866 04b7 D0040000 		.4byte	0x4d0
 867 04bb 13       		.uleb128 0x13
 868 04bc 01       		.uleb128 0x1
 869 04bd 50       		.byte	0x50
 870 04be 01       		.uleb128 0x1
 871 04bf 33       		.byte	0x33
 872 04c0 13       		.uleb128 0x13
 873 04c1 01       		.uleb128 0x1
 874 04c2 51       		.byte	0x51
 875 04c3 01       		.uleb128 0x1
 876 04c4 35       		.byte	0x35
 877 04c5 13       		.uleb128 0x13
 878 04c6 01       		.uleb128 0x1
 879 04c7 52       		.byte	0x52
 880 04c8 01       		.uleb128 0x1
 881 04c9 30       		.byte	0x30
 882 04ca 13       		.uleb128 0x13
 883 04cb 01       		.uleb128 0x1
 884 04cc 53       		.byte	0x53
 885 04cd 01       		.uleb128 0x1
 886 04ce 35       		.byte	0x35
 887 04cf 00       		.byte	0
 888 04d0 12       		.uleb128 0x12
 889 04d1 84000000 		.4byte	.LVL2
 890 04d5 F2050000 		.4byte	0x5f2
 891 04d9 E3040000 		.4byte	0x4e3
 892 04dd 13       		.uleb128 0x13
 893 04de 01       		.uleb128 0x1
 894 04df 50       		.byte	0x50
 895 04e0 01       		.uleb128 0x1
 896 04e1 33       		.byte	0x33
 897 04e2 00       		.byte	0
 898 04e3 14       		.uleb128 0x14
 899 04e4 88000000 		.4byte	.LVL3
 900 04e8 FD050000 		.4byte	0x5fd
 901 04ec 12       		.uleb128 0x12
 902 04ed 9C000000 		.4byte	.LVL4
 903 04f1 08060000 		.4byte	0x608
 904 04f5 1C050000 		.4byte	0x51c
 905 04f9 13       		.uleb128 0x13
 906 04fa 01       		.uleb128 0x1
 907 04fb 50       		.byte	0x50
 908 04fc 01       		.uleb128 0x1
 909 04fd 30       		.byte	0x30
 910 04fe 13       		.uleb128 0x13
 911 04ff 01       		.uleb128 0x1
 912 0500 51       		.byte	0x51
 913 0501 01       		.uleb128 0x1
 914 0502 40       		.byte	0x40
 915 0503 13       		.uleb128 0x13
 916 0504 01       		.uleb128 0x1
 917 0505 52       		.byte	0x52
 918 0506 03       		.uleb128 0x3
 919 0507 0A       		.byte	0xa
 920 0508 5001     		.2byte	0x150
 921 050a 13       		.uleb128 0x13
 922 050b 01       		.uleb128 0x1
 923 050c 53       		.byte	0x53
 924 050d 01       		.uleb128 0x1
 925 050e 32       		.byte	0x32
 926 050f 13       		.uleb128 0x13
 927 0510 02       		.uleb128 0x2
 928 0511 7D       		.byte	0x7d
 929 0512 00       		.sleb128 0
 930 0513 01       		.uleb128 0x1
 931 0514 37       		.byte	0x37
 932 0515 13       		.uleb128 0x13
 933 0516 02       		.uleb128 0x2
 934 0517 7D       		.byte	0x7d
 935 0518 04       		.sleb128 4
 936 0519 01       		.uleb128 0x1
 937 051a 37       		.byte	0x37
 938 051b 00       		.byte	0
 939 051c 12       		.uleb128 0x12
 940 051d A6000000 		.4byte	.LVL5
 941 0521 13060000 		.4byte	0x613
 942 0525 39050000 		.4byte	0x539
 943 0529 13       		.uleb128 0x13
 944 052a 01       		.uleb128 0x1
 945 052b 50       		.byte	0x50
 946 052c 01       		.uleb128 0x1
 947 052d 30       		.byte	0x30
 948 052e 13       		.uleb128 0x13
 949 052f 01       		.uleb128 0x1
 950 0530 51       		.byte	0x51
 951 0531 01       		.uleb128 0x1
 952 0532 32       		.byte	0x32
 953 0533 13       		.uleb128 0x13
 954 0534 01       		.uleb128 0x1
 955 0535 52       		.byte	0x52
 956 0536 01       		.uleb128 0x1
 957 0537 31       		.byte	0x31
 958 0538 00       		.byte	0
 959 0539 12       		.uleb128 0x12
 960 053a AC000000 		.4byte	.LVL6
 961 053e 1B040000 		.4byte	0x41b
 962 0542 4C050000 		.4byte	0x54c
 963 0546 13       		.uleb128 0x13
 964 0547 01       		.uleb128 0x1
 965 0548 50       		.byte	0x50
 966 0549 01       		.uleb128 0x1
 967 054a 35       		.byte	0x35
 968 054b 00       		.byte	0
 969 054c 12       		.uleb128 0x12
 970 054d B2000000 		.4byte	.LVL7
 971 0551 1E060000 		.4byte	0x61e
 972 0555 5F050000 		.4byte	0x55f
 973 0559 13       		.uleb128 0x13
 974 055a 01       		.uleb128 0x1
 975 055b 50       		.byte	0x50
 976 055c 01       		.uleb128 0x1
 977 055d 32       		.byte	0x32
 978 055e 00       		.byte	0
 979 055f 14       		.uleb128 0x14
 980 0560 B6000000 		.4byte	.LVL8
 981 0564 63040000 		.4byte	0x463
 982 0568 15       		.uleb128 0x15
 983 0569 C0000000 		.4byte	.LVL9
 984 056d 29060000 		.4byte	0x629
 985 0571 00       		.byte	0
 986 0572 0E       		.uleb128 0xe
 987 0573 52030000 		.4byte	.LASF83
 988 0577 01       		.byte	0x1
 989 0578 28       		.byte	0x28
 990 0579 C0000000 		.4byte	.LFB396
 991 057d 12000000 		.4byte	.LFE396-.LFB396
 992 0581 01       		.uleb128 0x1
 993 0582 9C       		.byte	0x9c
 994 0583 A3050000 		.4byte	0x5a3
 995 0587 14       		.uleb128 0x14
 996 0588 C6000000 		.4byte	.LVL10
 997 058c 3E040000 		.4byte	0x43e
 998 0590 14       		.uleb128 0x14
 999 0591 CA000000 		.4byte	.LVL11
 1000 0595 99040000 		.4byte	0x499
 1001 0599 15       		.uleb128 0x15
 1002 059a D2000000 		.4byte	.LVL12
 1003 059e 34060000 		.4byte	0x634
 1004 05a2 00       		.byte	0
 1005 05a3 16       		.uleb128 0x16
 1006 05a4 1A020000 		.4byte	.LASF84
 1007 05a8 03       		.byte	0x3
 1008 05a9 2C02     		.2byte	0x22c
 1009 05ab AF050000 		.4byte	0x5af
 1010 05af 17       		.uleb128 0x17
 1011 05b0 8C000000 		.4byte	0x8c
 1012 05b4 16       		.uleb128 0x16
 1013 05b5 5C000000 		.4byte	.LASF85
 1014 05b9 03       		.byte	0x3
 1015 05ba 3C02     		.2byte	0x23c
 1016 05bc C0050000 		.4byte	0x5c0
 1017 05c0 17       		.uleb128 0x17
 1018 05c1 9E000000 		.4byte	0x9e
 1019 05c5 18       		.uleb128 0x18
 1020 05c6 52434300 		.ascii	"RCC\000"
 1021 05ca 03       		.byte	0x3
 1022 05cb 3D02     		.2byte	0x23d
 1023 05cd D1050000 		.4byte	0x5d1
 1024 05d1 17       		.uleb128 0x17
 1025 05d2 F1000000 		.4byte	0xf1
 1026 05d6 16       		.uleb128 0x16
 1027 05d7 07030000 		.4byte	.LASF86
 1028 05db 03       		.byte	0x3
 1029 05dc 4F02     		.2byte	0x24f
 1030 05de E2050000 		.4byte	0x5e2
 1031 05e2 17       		.uleb128 0x17
 1032 05e3 C5020000 		.4byte	0x2c5
 1033 05e7 19       		.uleb128 0x19
 1034 05e8 4F010000 		.4byte	.LASF87
 1035 05ec 4F010000 		.4byte	.LASF87
 1036 05f0 06       		.byte	0x6
 1037 05f1 15       		.byte	0x15
 1038 05f2 19       		.uleb128 0x19
 1039 05f3 D1040000 		.4byte	.LASF88
 1040 05f7 D1040000 		.4byte	.LASF88
 1041 05fb 07       		.byte	0x7
 1042 05fc 04       		.byte	0x4
 1043 05fd 19       		.uleb128 0x19
 1044 05fe A7010000 		.4byte	.LASF89
 1045 0602 A7010000 		.4byte	.LASF89
 1046 0606 07       		.byte	0x7
 1047 0607 08       		.byte	0x8
 1048 0608 19       		.uleb128 0x19
 1049 0609 B0020000 		.4byte	.LASF90
 1050 060d B0020000 		.4byte	.LASF90
 1051 0611 06       		.byte	0x6
 1052 0612 0C       		.byte	0xc
 1053 0613 19       		.uleb128 0x19
 1054 0614 23010000 		.4byte	.LASF91
 1055 0618 23010000 		.4byte	.LASF91
 1056 061c 06       		.byte	0x6
 1057 061d 11       		.byte	0x11
 1058 061e 19       		.uleb128 0x19
 1059 061f E4010000 		.4byte	.LASF92
 1060 0623 E4010000 		.4byte	.LASF92
 1061 0627 06       		.byte	0x6
 1062 0628 10       		.byte	0x10
 1063 0629 19       		.uleb128 0x19
 1064 062a 30030000 		.4byte	.LASF93
 1065 062e 30030000 		.4byte	.LASF93
 1066 0632 06       		.byte	0x6
 1067 0633 16       		.byte	0x16
 1068 0634 19       		.uleb128 0x19
 1069 0635 0A000000 		.4byte	.LASF94
 1070 0639 0A000000 		.4byte	.LASF94
 1071 063d 08       		.byte	0x8
 1072 063e 07       		.byte	0x7
 1073 063f 00       		.byte	0
 1074              		.section	.debug_abbrev,"",%progbits
 1075              	.Ldebug_abbrev0:
 1076 0000 01       		.uleb128 0x1
 1077 0001 11       		.uleb128 0x11
 1078 0002 01       		.byte	0x1
 1079 0003 25       		.uleb128 0x25
 1080 0004 0E       		.uleb128 0xe
 1081 0005 13       		.uleb128 0x13
 1082 0006 0B       		.uleb128 0xb
 1083 0007 03       		.uleb128 0x3
 1084 0008 0E       		.uleb128 0xe
 1085 0009 1B       		.uleb128 0x1b
 1086 000a 0E       		.uleb128 0xe
 1087 000b 11       		.uleb128 0x11
 1088 000c 01       		.uleb128 0x1
 1089 000d 12       		.uleb128 0x12
 1090 000e 06       		.uleb128 0x6
 1091 000f 10       		.uleb128 0x10
 1092 0010 17       		.uleb128 0x17
 1093 0011 00       		.byte	0
 1094 0012 00       		.byte	0
 1095 0013 02       		.uleb128 0x2
 1096 0014 24       		.uleb128 0x24
 1097 0015 00       		.byte	0
 1098 0016 0B       		.uleb128 0xb
 1099 0017 0B       		.uleb128 0xb
 1100 0018 3E       		.uleb128 0x3e
 1101 0019 0B       		.uleb128 0xb
 1102 001a 03       		.uleb128 0x3
 1103 001b 0E       		.uleb128 0xe
 1104 001c 00       		.byte	0
 1105 001d 00       		.byte	0
 1106 001e 03       		.uleb128 0x3
 1107 001f 16       		.uleb128 0x16
 1108 0020 00       		.byte	0
 1109 0021 03       		.uleb128 0x3
 1110 0022 0E       		.uleb128 0xe
 1111 0023 3A       		.uleb128 0x3a
 1112 0024 0B       		.uleb128 0xb
 1113 0025 3B       		.uleb128 0x3b
 1114 0026 0B       		.uleb128 0xb
 1115 0027 49       		.uleb128 0x49
 1116 0028 13       		.uleb128 0x13
 1117 0029 00       		.byte	0
 1118 002a 00       		.byte	0
 1119 002b 04       		.uleb128 0x4
 1120 002c 24       		.uleb128 0x24
 1121 002d 00       		.byte	0
 1122 002e 0B       		.uleb128 0xb
 1123 002f 0B       		.uleb128 0xb
 1124 0030 3E       		.uleb128 0x3e
 1125 0031 0B       		.uleb128 0xb
 1126 0032 03       		.uleb128 0x3
 1127 0033 08       		.uleb128 0x8
 1128 0034 00       		.byte	0
 1129 0035 00       		.byte	0
 1130 0036 05       		.uleb128 0x5
 1131 0037 13       		.uleb128 0x13
 1132 0038 01       		.byte	0x1
 1133 0039 03       		.uleb128 0x3
 1134 003a 0E       		.uleb128 0xe
 1135 003b 0B       		.uleb128 0xb
 1136 003c 0B       		.uleb128 0xb
 1137 003d 3A       		.uleb128 0x3a
 1138 003e 0B       		.uleb128 0xb
 1139 003f 3B       		.uleb128 0x3b
 1140 0040 0B       		.uleb128 0xb
 1141 0041 01       		.uleb128 0x1
 1142 0042 13       		.uleb128 0x13
 1143 0043 00       		.byte	0
 1144 0044 00       		.byte	0
 1145 0045 06       		.uleb128 0x6
 1146 0046 0D       		.uleb128 0xd
 1147 0047 00       		.byte	0
 1148 0048 03       		.uleb128 0x3
 1149 0049 08       		.uleb128 0x8
 1150 004a 3A       		.uleb128 0x3a
 1151 004b 0B       		.uleb128 0xb
 1152 004c 3B       		.uleb128 0x3b
 1153 004d 0B       		.uleb128 0xb
 1154 004e 49       		.uleb128 0x49
 1155 004f 13       		.uleb128 0x13
 1156 0050 38       		.uleb128 0x38
 1157 0051 0B       		.uleb128 0xb
 1158 0052 00       		.byte	0
 1159 0053 00       		.byte	0
 1160 0054 07       		.uleb128 0x7
 1161 0055 0D       		.uleb128 0xd
 1162 0056 00       		.byte	0
 1163 0057 03       		.uleb128 0x3
 1164 0058 0E       		.uleb128 0xe
 1165 0059 3A       		.uleb128 0x3a
 1166 005a 0B       		.uleb128 0xb
 1167 005b 3B       		.uleb128 0x3b
 1168 005c 0B       		.uleb128 0xb
 1169 005d 49       		.uleb128 0x49
 1170 005e 13       		.uleb128 0x13
 1171 005f 38       		.uleb128 0x38
 1172 0060 0B       		.uleb128 0xb
 1173 0061 00       		.byte	0
 1174 0062 00       		.byte	0
 1175 0063 08       		.uleb128 0x8
 1176 0064 04       		.uleb128 0x4
 1177 0065 01       		.byte	0x1
 1178 0066 0B       		.uleb128 0xb
 1179 0067 0B       		.uleb128 0xb
 1180 0068 49       		.uleb128 0x49
 1181 0069 13       		.uleb128 0x13
 1182 006a 3A       		.uleb128 0x3a
 1183 006b 0B       		.uleb128 0xb
 1184 006c 3B       		.uleb128 0x3b
 1185 006d 0B       		.uleb128 0xb
 1186 006e 01       		.uleb128 0x1
 1187 006f 13       		.uleb128 0x13
 1188 0070 00       		.byte	0
 1189 0071 00       		.byte	0
 1190 0072 09       		.uleb128 0x9
 1191 0073 28       		.uleb128 0x28
 1192 0074 00       		.byte	0
 1193 0075 03       		.uleb128 0x3
 1194 0076 0E       		.uleb128 0xe
 1195 0077 1C       		.uleb128 0x1c
 1196 0078 0B       		.uleb128 0xb
 1197 0079 00       		.byte	0
 1198 007a 00       		.byte	0
 1199 007b 0A       		.uleb128 0xa
 1200 007c 2E       		.uleb128 0x2e
 1201 007d 00       		.byte	0
 1202 007e 03       		.uleb128 0x3
 1203 007f 0E       		.uleb128 0xe
 1204 0080 3A       		.uleb128 0x3a
 1205 0081 0B       		.uleb128 0xb
 1206 0082 3B       		.uleb128 0x3b
 1207 0083 05       		.uleb128 0x5
 1208 0084 27       		.uleb128 0x27
 1209 0085 19       		.uleb128 0x19
 1210 0086 20       		.uleb128 0x20
 1211 0087 0B       		.uleb128 0xb
 1212 0088 00       		.byte	0
 1213 0089 00       		.byte	0
 1214 008a 0B       		.uleb128 0xb
 1215 008b 2E       		.uleb128 0x2e
 1216 008c 00       		.byte	0
 1217 008d 03       		.uleb128 0x3
 1218 008e 0E       		.uleb128 0xe
 1219 008f 3A       		.uleb128 0x3a
 1220 0090 0B       		.uleb128 0xb
 1221 0091 3B       		.uleb128 0x3b
 1222 0092 05       		.uleb128 0x5
 1223 0093 20       		.uleb128 0x20
 1224 0094 0B       		.uleb128 0xb
 1225 0095 00       		.byte	0
 1226 0096 00       		.byte	0
 1227 0097 0C       		.uleb128 0xc
 1228 0098 2E       		.uleb128 0x2e
 1229 0099 01       		.byte	0x1
 1230 009a 3F       		.uleb128 0x3f
 1231 009b 19       		.uleb128 0x19
 1232 009c 03       		.uleb128 0x3
 1233 009d 0E       		.uleb128 0xe
 1234 009e 3A       		.uleb128 0x3a
 1235 009f 0B       		.uleb128 0xb
 1236 00a0 3B       		.uleb128 0x3b
 1237 00a1 0B       		.uleb128 0xb
 1238 00a2 27       		.uleb128 0x27
 1239 00a3 19       		.uleb128 0x19
 1240 00a4 11       		.uleb128 0x11
 1241 00a5 01       		.uleb128 0x1
 1242 00a6 12       		.uleb128 0x12
 1243 00a7 06       		.uleb128 0x6
 1244 00a8 40       		.uleb128 0x40
 1245 00a9 18       		.uleb128 0x18
 1246 00aa 9742     		.uleb128 0x2117
 1247 00ac 19       		.uleb128 0x19
 1248 00ad 01       		.uleb128 0x1
 1249 00ae 13       		.uleb128 0x13
 1250 00af 00       		.byte	0
 1251 00b0 00       		.byte	0
 1252 00b1 0D       		.uleb128 0xd
 1253 00b2 05       		.uleb128 0x5
 1254 00b3 00       		.byte	0
 1255 00b4 03       		.uleb128 0x3
 1256 00b5 0E       		.uleb128 0xe
 1257 00b6 3A       		.uleb128 0x3a
 1258 00b7 0B       		.uleb128 0xb
 1259 00b8 3B       		.uleb128 0x3b
 1260 00b9 0B       		.uleb128 0xb
 1261 00ba 49       		.uleb128 0x49
 1262 00bb 13       		.uleb128 0x13
 1263 00bc 02       		.uleb128 0x2
 1264 00bd 18       		.uleb128 0x18
 1265 00be 00       		.byte	0
 1266 00bf 00       		.byte	0
 1267 00c0 0E       		.uleb128 0xe
 1268 00c1 2E       		.uleb128 0x2e
 1269 00c2 01       		.byte	0x1
 1270 00c3 3F       		.uleb128 0x3f
 1271 00c4 19       		.uleb128 0x19
 1272 00c5 03       		.uleb128 0x3
 1273 00c6 0E       		.uleb128 0xe
 1274 00c7 3A       		.uleb128 0x3a
 1275 00c8 0B       		.uleb128 0xb
 1276 00c9 3B       		.uleb128 0x3b
 1277 00ca 0B       		.uleb128 0xb
 1278 00cb 11       		.uleb128 0x11
 1279 00cc 01       		.uleb128 0x1
 1280 00cd 12       		.uleb128 0x12
 1281 00ce 06       		.uleb128 0x6
 1282 00cf 40       		.uleb128 0x40
 1283 00d0 18       		.uleb128 0x18
 1284 00d1 9742     		.uleb128 0x2117
 1285 00d3 19       		.uleb128 0x19
 1286 00d4 01       		.uleb128 0x1
 1287 00d5 13       		.uleb128 0x13
 1288 00d6 00       		.byte	0
 1289 00d7 00       		.byte	0
 1290 00d8 0F       		.uleb128 0xf
 1291 00d9 1D       		.uleb128 0x1d
 1292 00da 00       		.byte	0
 1293 00db 31       		.uleb128 0x31
 1294 00dc 13       		.uleb128 0x13
 1295 00dd 11       		.uleb128 0x11
 1296 00de 01       		.uleb128 0x1
 1297 00df 12       		.uleb128 0x12
 1298 00e0 06       		.uleb128 0x6
 1299 00e1 58       		.uleb128 0x58
 1300 00e2 0B       		.uleb128 0xb
 1301 00e3 59       		.uleb128 0x59
 1302 00e4 0B       		.uleb128 0xb
 1303 00e5 00       		.byte	0
 1304 00e6 00       		.byte	0
 1305 00e7 10       		.uleb128 0x10
 1306 00e8 1D       		.uleb128 0x1d
 1307 00e9 01       		.byte	0x1
 1308 00ea 31       		.uleb128 0x31
 1309 00eb 13       		.uleb128 0x13
 1310 00ec 11       		.uleb128 0x11
 1311 00ed 01       		.uleb128 0x1
 1312 00ee 12       		.uleb128 0x12
 1313 00ef 06       		.uleb128 0x6
 1314 00f0 58       		.uleb128 0x58
 1315 00f1 0B       		.uleb128 0xb
 1316 00f2 59       		.uleb128 0x59
 1317 00f3 0B       		.uleb128 0xb
 1318 00f4 00       		.byte	0
 1319 00f5 00       		.byte	0
 1320 00f6 11       		.uleb128 0x11
 1321 00f7 1D       		.uleb128 0x1d
 1322 00f8 00       		.byte	0
 1323 00f9 31       		.uleb128 0x31
 1324 00fa 13       		.uleb128 0x13
 1325 00fb 11       		.uleb128 0x11
 1326 00fc 01       		.uleb128 0x1
 1327 00fd 12       		.uleb128 0x12
 1328 00fe 06       		.uleb128 0x6
 1329 00ff 58       		.uleb128 0x58
 1330 0100 0B       		.uleb128 0xb
 1331 0101 59       		.uleb128 0x59
 1332 0102 05       		.uleb128 0x5
 1333 0103 00       		.byte	0
 1334 0104 00       		.byte	0
 1335 0105 12       		.uleb128 0x12
 1336 0106 898201   		.uleb128 0x4109
 1337 0109 01       		.byte	0x1
 1338 010a 11       		.uleb128 0x11
 1339 010b 01       		.uleb128 0x1
 1340 010c 31       		.uleb128 0x31
 1341 010d 13       		.uleb128 0x13
 1342 010e 01       		.uleb128 0x1
 1343 010f 13       		.uleb128 0x13
 1344 0110 00       		.byte	0
 1345 0111 00       		.byte	0
 1346 0112 13       		.uleb128 0x13
 1347 0113 8A8201   		.uleb128 0x410a
 1348 0116 00       		.byte	0
 1349 0117 02       		.uleb128 0x2
 1350 0118 18       		.uleb128 0x18
 1351 0119 9142     		.uleb128 0x2111
 1352 011b 18       		.uleb128 0x18
 1353 011c 00       		.byte	0
 1354 011d 00       		.byte	0
 1355 011e 14       		.uleb128 0x14
 1356 011f 898201   		.uleb128 0x4109
 1357 0122 00       		.byte	0
 1358 0123 11       		.uleb128 0x11
 1359 0124 01       		.uleb128 0x1
 1360 0125 31       		.uleb128 0x31
 1361 0126 13       		.uleb128 0x13
 1362 0127 00       		.byte	0
 1363 0128 00       		.byte	0
 1364 0129 15       		.uleb128 0x15
 1365 012a 898201   		.uleb128 0x4109
 1366 012d 00       		.byte	0
 1367 012e 11       		.uleb128 0x11
 1368 012f 01       		.uleb128 0x1
 1369 0130 9542     		.uleb128 0x2115
 1370 0132 19       		.uleb128 0x19
 1371 0133 31       		.uleb128 0x31
 1372 0134 13       		.uleb128 0x13
 1373 0135 00       		.byte	0
 1374 0136 00       		.byte	0
 1375 0137 16       		.uleb128 0x16
 1376 0138 34       		.uleb128 0x34
 1377 0139 00       		.byte	0
 1378 013a 03       		.uleb128 0x3
 1379 013b 0E       		.uleb128 0xe
 1380 013c 3A       		.uleb128 0x3a
 1381 013d 0B       		.uleb128 0xb
 1382 013e 3B       		.uleb128 0x3b
 1383 013f 05       		.uleb128 0x5
 1384 0140 49       		.uleb128 0x49
 1385 0141 13       		.uleb128 0x13
 1386 0142 3F       		.uleb128 0x3f
 1387 0143 19       		.uleb128 0x19
 1388 0144 3C       		.uleb128 0x3c
 1389 0145 19       		.uleb128 0x19
 1390 0146 00       		.byte	0
 1391 0147 00       		.byte	0
 1392 0148 17       		.uleb128 0x17
 1393 0149 35       		.uleb128 0x35
 1394 014a 00       		.byte	0
 1395 014b 49       		.uleb128 0x49
 1396 014c 13       		.uleb128 0x13
 1397 014d 00       		.byte	0
 1398 014e 00       		.byte	0
 1399 014f 18       		.uleb128 0x18
 1400 0150 34       		.uleb128 0x34
 1401 0151 00       		.byte	0
 1402 0152 03       		.uleb128 0x3
 1403 0153 08       		.uleb128 0x8
 1404 0154 3A       		.uleb128 0x3a
 1405 0155 0B       		.uleb128 0xb
 1406 0156 3B       		.uleb128 0x3b
 1407 0157 05       		.uleb128 0x5
 1408 0158 49       		.uleb128 0x49
 1409 0159 13       		.uleb128 0x13
 1410 015a 3F       		.uleb128 0x3f
 1411 015b 19       		.uleb128 0x19
 1412 015c 3C       		.uleb128 0x3c
 1413 015d 19       		.uleb128 0x19
 1414 015e 00       		.byte	0
 1415 015f 00       		.byte	0
 1416 0160 19       		.uleb128 0x19
 1417 0161 2E       		.uleb128 0x2e
 1418 0162 00       		.byte	0
 1419 0163 3F       		.uleb128 0x3f
 1420 0164 19       		.uleb128 0x19
 1421 0165 3C       		.uleb128 0x3c
 1422 0166 19       		.uleb128 0x19
 1423 0167 6E       		.uleb128 0x6e
 1424 0168 0E       		.uleb128 0xe
 1425 0169 03       		.uleb128 0x3
 1426 016a 0E       		.uleb128 0xe
 1427 016b 3A       		.uleb128 0x3a
 1428 016c 0B       		.uleb128 0xb
 1429 016d 3B       		.uleb128 0x3b
 1430 016e 0B       		.uleb128 0xb
 1431 016f 00       		.byte	0
 1432 0170 00       		.byte	0
 1433 0171 00       		.byte	0
 1434              		.section	.debug_aranges,"",%progbits
 1435 0000 1C000000 		.4byte	0x1c
 1436 0004 0200     		.2byte	0x2
 1437 0006 00000000 		.4byte	.Ldebug_info0
 1438 000a 04       		.byte	0x4
 1439 000b 00       		.byte	0
 1440 000c 0000     		.2byte	0
 1441 000e 0000     		.2byte	0
 1442 0010 00000000 		.4byte	.Ltext0
 1443 0014 D2000000 		.4byte	.Letext0-.Ltext0
 1444 0018 00000000 		.4byte	0
 1445 001c 00000000 		.4byte	0
 1446              		.section	.debug_line,"",%progbits
 1447              	.Ldebug_line0:
 1448 0000 10010000 		.section	.debug_str,"MS",%progbits,1
 1448      0200BB00 
 1448      00000201 
 1448      FB0E0D00 
 1448      01010101 
 1449              	.LASF37:
 1450 0000 41484231 		.ascii	"AHB1LPENR\000"
 1450      4C50454E 
 1450      5200
 1451              	.LASF94:
 1452 000a 73657269 		.ascii	"serial_io_init\000"
 1452      616C5F69 
 1452      6F5F696E 
 1452      697400
 1453              	.LASF44:
 1454 0019 5F726573 		.ascii	"_reserved_0x6c\000"
 1454      65727665 
 1454      645F3078 
 1454      366300
 1455              	.LASF77:
 1456 0028 7363616C 		.ascii	"scale1\000"
 1456      653100
 1457              	.LASF78:
 1458 002f 7363616C 		.ascii	"scale2\000"
 1458      653200
 1459              	.LASF79:
 1460 0036 7363616C 		.ascii	"scale3\000"
 1460      653300
 1461              	.LASF0:
 1462 003d 7369676E 		.ascii	"signed char\000"
 1462      65642063 
 1462      68617200 
 1463              	.LASF72:
 1464 0049 4D434F31 		.ascii	"MCO1_PLL\000"
 1464      5F504C4C 
 1464      00
 1465              	.LASF2:
 1466 0052 73686F72 		.ascii	"short int\000"
 1466      7420696E 
 1466      7400
 1467              	.LASF85:
 1468 005c 464C4153 		.ascii	"FLASH\000"
 1468      4800
 1469              	.LASF13:
 1470 0062 73697A65 		.ascii	"sizetype\000"
 1470      74797065 
 1470      00
 1471              	.LASF45:
 1472 006b 42444352 		.ascii	"BDCR\000"
 1472      00
 1473              	.LASF52:
 1474 0070 434B4741 		.ascii	"CKGATENR\000"
 1474      54454E52 
 1474      00
 1475              	.LASF46:
 1476 0079 5F726573 		.ascii	"_reserved_0x78\000"
 1476      65727665 
 1476      645F3078 
 1476      373800
 1477              	.LASF49:
 1478 0088 504C4C49 		.ascii	"PLLI2SCFGR\000"
 1478      32534346 
 1478      475200
 1479              	.LASF8:
 1480 0093 6C6F6E67 		.ascii	"long long int\000"
 1480      206C6F6E 
 1480      6720696E 
 1480      7400
 1481              	.LASF6:
 1482 00a1 5F5F7569 		.ascii	"__uint32_t\000"
 1482      6E743332 
 1482      5F7400
 1483              	.LASF29:
 1484 00ac 41484231 		.ascii	"AHB1ENR\000"
 1484      454E5200 
 1485              	.LASF48:
 1486 00b4 53534347 		.ascii	"SSCGR\000"
 1486      5200
 1487              	.LASF60:
 1488 00ba 5F726573 		.ascii	"_reserved_0x18\000"
 1488      65727665 
 1488      645F3078 
 1488      313800
 1489              	.LASF75:
 1490 00c9 4D434F32 		.ascii	"MCO2_HSE\000"
 1490      5F485345 
 1490      00
 1491              	.LASF14:
 1492 00d2 4B455952 		.ascii	"KEYR\000"
 1492      00
 1493              	.LASF53:
 1494 00d7 44434B43 		.ascii	"DCKCFGR2\000"
 1494      46475232 
 1494      00
 1495              	.LASF20:
 1496 00e0 43464752 		.ascii	"CFGR\000"
 1496      00
 1497              	.LASF39:
 1498 00e5 41484233 		.ascii	"AHB3LPENR\000"
 1498      4C50454E 
 1498      5200
 1499              	.LASF32:
 1500 00ef 5F726573 		.ascii	"_reserved_0x3c\000"
 1500      65727665 
 1500      645F3078 
 1500      336300
 1501              	.LASF33:
 1502 00fe 41504231 		.ascii	"APB1ENR\000"
 1502      454E5200 
 1503              	.LASF97:
 1504 0106 2F696E76 		.ascii	"/invite/Bureau/SPC/C_project\000"
 1504      6974652F 
 1504      42757265 
 1504      61752F53 
 1504      50432F43 
 1505              	.LASF91:
 1506 0123 7365745F 		.ascii	"set_bus_clock_dividers_exp\000"
 1506      6275735F 
 1506      636C6F63 
 1506      6B5F6469 
 1506      76696465 
 1507              	.LASF25:
 1508 013e 41504231 		.ascii	"APB1RSTR\000"
 1508      52535452 
 1508      00
 1509              	.LASF51:
 1510 0147 44434B43 		.ascii	"DCKCFGR\000"
 1510      46475200 
 1511              	.LASF87:
 1512 014f 7365745F 		.ascii	"set_MCO\000"
 1512      4D434F00 
 1513              	.LASF81:
 1514 0157 656E6162 		.ascii	"enable_io_compensation\000"
 1514      6C655F69 
 1514      6F5F636F 
 1514      6D70656E 
 1514      73617469 
 1515              	.LASF30:
 1516 016e 41484232 		.ascii	"AHB2ENR\000"
 1516      454E5200 
 1517              	.LASF31:
 1518 0176 41484233 		.ascii	"AHB3ENR\000"
 1518      454E5200 
 1519              	.LASF54:
 1520 017e 53595343 		.ascii	"SYSCFG_registers\000"
 1520      46475F72 
 1520      65676973 
 1520      74657273 
 1520      00
 1521              	.LASF15:
 1522 018f 4F50544B 		.ascii	"OPTKEYR\000"
 1522      45595200 
 1523              	.LASF74:
 1524 0197 4D434F32 		.ascii	"MCO2_I2S\000"
 1524      5F493253 
 1524      00
 1525              	.LASF55:
 1526 01a0 4D454D52 		.ascii	"MEMRMP\000"
 1526      4D5000
 1527              	.LASF89:
 1528 01a7 73746172 		.ascii	"start_Overdrive\000"
 1528      745F4F76 
 1528      65726472 
 1528      69766500 
 1529              	.LASF4:
 1530 01b7 6C6F6E67 		.ascii	"long int\000"
 1530      20696E74 
 1530      00
 1531              	.LASF70:
 1532 01c0 4D434F31 		.ascii	"MCO1_LSE\000"
 1532      5F4C5345 
 1532      00
 1533              	.LASF67:
 1534 01c9 53575F50 		.ascii	"SW_PLL_P\000"
 1534      4C4C5F50 
 1534      00
 1535              	.LASF68:
 1536 01d2 53575F50 		.ascii	"SW_PLL_R\000"
 1536      4C4C5F52 
 1536      00
 1537              	.LASF76:
 1538 01db 4D434F32 		.ascii	"MCO2_PLL\000"
 1538      5F504C4C 
 1538      00
 1539              	.LASF92:
 1540 01e4 7365745F 		.ascii	"set_SYSCLK\000"
 1540      53595343 
 1540      4C4B00
 1541              	.LASF61:
 1542 01ef 434D5043 		.ascii	"CMPCR\000"
 1542      5200
 1543              	.LASF1:
 1544 01f5 756E7369 		.ascii	"unsigned char\000"
 1544      676E6564 
 1544      20636861 
 1544      7200
 1545              	.LASF36:
 1546 0203 5F726573 		.ascii	"_reserved_0x4c\000"
 1546      65727665 
 1546      645F3078 
 1546      346300
 1547              	.LASF34:
 1548 0212 41504232 		.ascii	"APB2ENR\000"
 1548      454E5200 
 1549              	.LASF84:
 1550 021a 4650555F 		.ascii	"FPU_CPACR\000"
 1550      43504143 
 1550      5200
 1551              	.LASF17:
 1552 0224 464C4153 		.ascii	"FLASH_registers\000"
 1552      485F7265 
 1552      67697374 
 1552      65727300 
 1553              	.LASF80:
 1554 0234 6670755F 		.ascii	"fpu_init\000"
 1554      696E6974 
 1554      00
 1555              	.LASF98:
 1556 023d 5F5F4453 		.ascii	"__DSB\000"
 1556      4200
 1557              	.LASF9:
 1558 0243 6C6F6E67 		.ascii	"long long unsigned int\000"
 1558      206C6F6E 
 1558      6720756E 
 1558      7369676E 
 1558      65642069 
 1559              	.LASF12:
 1560 025a 75696E74 		.ascii	"uint32_t\000"
 1560      33325F74 
 1560      00
 1561              	.LASF10:
 1562 0263 756E7369 		.ascii	"unsigned int\000"
 1562      676E6564 
 1562      20696E74 
 1562      00
 1563              	.LASF22:
 1564 0270 41484232 		.ascii	"AHB2RSTR\000"
 1564      52535452 
 1564      00
 1565              	.LASF56:
 1566 0279 45585449 		.ascii	"EXTICR1\000"
 1566      43523100 
 1567              	.LASF57:
 1568 0281 45585449 		.ascii	"EXTICR2\000"
 1568      43523200 
 1569              	.LASF58:
 1570 0289 45585449 		.ascii	"EXTICR3\000"
 1570      43523300 
 1571              	.LASF59:
 1572 0291 45585449 		.ascii	"EXTICR4\000"
 1572      43523400 
 1573              	.LASF18:
 1574 0299 5243435F 		.ascii	"RCC_registers\000"
 1574      72656769 
 1574      73746572 
 1574      7300
 1575              	.LASF73:
 1576 02a7 4D434F32 		.ascii	"MCO2_SYS\000"
 1576      5F535953 
 1576      00
 1577              	.LASF90:
 1578 02b0 73746172 		.ascii	"start_PLL\000"
 1578      745F504C 
 1578      4C00
 1579              	.LASF19:
 1580 02ba 504C4C43 		.ascii	"PLLCFGR\000"
 1580      46475200 
 1581              	.LASF35:
 1582 02c2 5F726573 		.ascii	"_reserved_0x48\000"
 1582      65727665 
 1582      645F3078 
 1582      343800
 1583              	.LASF41:
 1584 02d1 41504231 		.ascii	"APB1LPENR\000"
 1584      4C50454E 
 1584      5200
 1585              	.LASF101:
 1586 02db 6C617465 		.ascii	"latency\000"
 1586      6E637900 
 1587              	.LASF11:
 1588 02e3 696E7433 		.ascii	"int32_t\000"
 1588      325F7400 
 1589              	.LASF3:
 1590 02eb 73686F72 		.ascii	"short unsigned int\000"
 1590      7420756E 
 1590      7369676E 
 1590      65642069 
 1590      6E7400
 1591              	.LASF71:
 1592 02fe 4D434F31 		.ascii	"MCO1_HSE\000"
 1592      5F485345 
 1592      00
 1593              	.LASF86:
 1594 0307 53595343 		.ascii	"SYSCFG\000"
 1594      464700
 1595              	.LASF24:
 1596 030e 5F726573 		.ascii	"_reserved_0x1c\000"
 1596      65727665 
 1596      645F3078 
 1596      316300
 1597              	.LASF26:
 1598 031d 41504232 		.ascii	"APB2RSTR\000"
 1598      52535452 
 1598      00
 1599              	.LASF38:
 1600 0326 41484232 		.ascii	"AHB2LPENR\000"
 1600      4C50454E 
 1600      5200
 1601              	.LASF93:
 1602 0330 656E6162 		.ascii	"enable_MCO_GPIO\000"
 1602      6C655F4D 
 1602      434F5F47 
 1602      50494F00 
 1603              	.LASF7:
 1604 0340 6C6F6E67 		.ascii	"long unsigned int\000"
 1604      20756E73 
 1604      69676E65 
 1604      6420696E 
 1604      7400
 1605              	.LASF83:
 1606 0352 736F6674 		.ascii	"software_init_hook\000"
 1606      77617265 
 1606      5F696E69 
 1606      745F686F 
 1606      6F6B00
 1607              	.LASF40:
 1608 0365 5F726573 		.ascii	"_reserved_0x5c\000"
 1608      65727665 
 1608      645F3078 
 1608      356300
 1609              	.LASF62:
 1610 0374 5F726573 		.ascii	"_reserved_0x24\000"
 1610      65727665 
 1610      645F3078 
 1610      323400
 1611              	.LASF82:
 1612 0383 636C6F63 		.ascii	"clock_init\000"
 1612      6B5F696E 
 1612      697400
 1613              	.LASF5:
 1614 038e 5F5F696E 		.ascii	"__int32_t\000"
 1614      7433325F 
 1614      7400
 1615              	.LASF99:
 1616 0398 656E6162 		.ascii	"enable_SYSCFG\000"
 1616      6C655F53 
 1616      59534346 
 1616      4700
 1617              	.LASF95:
 1618 03a6 474E5520 		.ascii	"GNU C11 5.4.1 20160919 -mtune=cortex-m4 -mthumb -ma"
 1618      43313120 
 1618      352E342E 
 1618      31203230 
 1618      31363039 
 1619 03d9 7263683D 		.ascii	"rch=armv7e-m -mfloat-abi=hard -mfpu=fpv4-sp-d16 -g "
 1619      61726D76 
 1619      37652D6D 
 1619      202D6D66 
 1619      6C6F6174 
 1620 040c 2D4F3020 		.ascii	"-O0 -Os -fsingle-precision-constant\000"
 1620      2D4F7320 
 1620      2D667369 
 1620      6E676C65 
 1620      2D707265 
 1621              	.LASF69:
 1622 0430 4D434F31 		.ascii	"MCO1_HSI\000"
 1622      5F485349 
 1622      00
 1623              	.LASF43:
 1624 0439 5F726573 		.ascii	"_reserved_0x68\000"
 1624      65727665 
 1624      645F3078 
 1624      363800
 1625              	.LASF21:
 1626 0448 41484231 		.ascii	"AHB1RSTR\000"
 1626      52535452 
 1626      00
 1627              	.LASF64:
 1628 0451 504C4C53 		.ascii	"PLLSRC_HSE\000"
 1628      52435F48 
 1628      534500
 1629              	.LASF27:
 1630 045c 5F726573 		.ascii	"_reserved_0x28\000"
 1630      65727665 
 1630      645F3078 
 1630      323800
 1631              	.LASF23:
 1632 046b 41484233 		.ascii	"AHB3RSTR\000"
 1632      52535452 
 1632      00
 1633              	.LASF63:
 1634 0474 504C4C53 		.ascii	"PLLSRC_HSI\000"
 1634      52435F48 
 1634      534900
 1635              	.LASF47:
 1636 047f 5F726573 		.ascii	"_reserved_0x7c\000"
 1636      65727665 
 1636      645F3078 
 1636      376300
 1637              	.LASF50:
 1638 048e 504C4C53 		.ascii	"PLLSAICFGR\000"
 1638      41494346 
 1638      475200
 1639              	.LASF100:
 1640 0499 7365745F 		.ascii	"set_FLASH_latency\000"
 1640      464C4153 
 1640      485F6C61 
 1640      74656E63 
 1640      7900
 1641              	.LASF42:
 1642 04ab 41504232 		.ascii	"APB2LPENR\000"
 1642      4C50454E 
 1642      5200
 1643              	.LASF28:
 1644 04b5 5F726573 		.ascii	"_reserved_0x2c\000"
 1644      65727665 
 1644      645F3078 
 1644      326300
 1645              	.LASF16:
 1646 04c4 4F505443 		.ascii	"OPTCR\000"
 1646      5200
 1647              	.LASF66:
 1648 04ca 53575F48 		.ascii	"SW_HSE\000"
 1648      534500
 1649              	.LASF88:
 1650 04d1 7365745F 		.ascii	"set_voltage_scale\000"
 1650      766F6C74 
 1650      6167655F 
 1650      7363616C 
 1650      6500
 1651              	.LASF96:
 1652 04e3 7372632F 		.ascii	"src/sys/init.c\000"
 1652      7379732F 
 1652      696E6974 
 1652      2E6300
 1653              	.LASF65:
 1654 04f2 53575F48 		.ascii	"SW_HSI\000"
 1654      534900
 1655              		.ident	"GCC: (15:5.4.1+svn241155-1) 5.4.1 20160919"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 init.c
     /tmp/cciEAK5g.s:21     .text:0000000000000000 $t
     /tmp/cciEAK5g.s:26     .text:0000000000000000 set_FLASH_latency
     /tmp/cciEAK5g.s:67     .text:0000000000000030 $d
     /tmp/cciEAK5g.s:71     .text:0000000000000034 $t
     /tmp/cciEAK5g.s:76     .text:0000000000000034 fpu_init
     /tmp/cciEAK5g.s:102    .text:0000000000000044 $d
     /tmp/cciEAK5g.s:108    .text:0000000000000048 $t
     /tmp/cciEAK5g.s:113    .text:0000000000000048 enable_io_compensation
     /tmp/cciEAK5g.s:156    .text:0000000000000068 $d
     /tmp/cciEAK5g.s:161    .text:0000000000000070 $t
     /tmp/cciEAK5g.s:166    .text:0000000000000070 clock_init
     /tmp/cciEAK5g.s:234    .text:00000000000000c0 software_init_hook
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
FLASH
FPU_CPACR
RCC
SYSCFG
set_MCO
set_voltage_scale
start_Overdrive
start_PLL
set_bus_clock_dividers_exp
set_SYSCLK
enable_MCO_GPIO
serial_io_init
