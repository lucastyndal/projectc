   1              		.syntax unified
   2              		.arch armv7e-m
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"clock.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.align	1
  22              		.global	start_PLL
  23              		.thumb
  24              		.thumb_func
  25              		.type	start_PLL, %function
  26              	start_PLL:
  27              	.LFB392:
  28              		.file 1 "src/sys/clock.c"
   1:src/sys/clock.c **** #include"clock.h"
   2:src/sys/clock.c **** #include"devices.h"
   3:src/sys/clock.c **** #include "cm4.h"
   4:src/sys/clock.c **** 
   5:src/sys/clock.c **** void start_PLL(PLLSRC SRC,
   6:src/sys/clock.c **** 		 int32_t M,int32_t N,int32_t P,int32_t Q,int32_t R) { 
  29              		.loc 1 6 0
  30              		.cfi_startproc
  31              		@ args = 8, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 30B5     		push	{r4, r5, lr}
  35              		.cfi_def_cfa_offset 12
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
   7:src/sys/clock.c ****   /* setup parameters */
   8:src/sys/clock.c ****   RCC.PLLCFGR = 
  39              		.loc 1 8 0
  40 0002 049C     		ldr	r4, [sp, #16]
  41 0004 039D     		ldr	r5, [sp, #12]
  42 0006 2407     		lsls	r4, r4, #28
  43 0008 44EA0564 		orr	r4, r4, r5, lsl #24
  44 000c 2143     		orrs	r1, r1, r4
  45              	.LVL1:
  46 000e 41EA8050 		orr	r0, r1, r0, lsl #22
  47              	.LVL2:
  48 0012 40EA8214 		orr	r4, r0, r2, lsl #6
  49 0016 0222     		movs	r2, #2
  50              	.LVL3:
  51 0018 93FBF2F3 		sdiv	r3, r3, r2
  52              	.LVL4:
  53 001c 5A1E     		subs	r2, r3, #1
  54 001e 064B     		ldr	r3, .L6
  55 0020 44EA0244 		orr	r4, r4, r2, lsl #16
  56 0024 5C60     		str	r4, [r3, #4]
   9:src/sys/clock.c ****     (M<<0)    | (N<<6)  | ((P/2-1)<<16) |
  10:src/sys/clock.c ****     (SRC<<22) | (Q<<24) | (R<<28) ;
  11:src/sys/clock.c ****   
  12:src/sys/clock.c ****   /* Switch on PLL : PLLON=1; */ 
  13:src/sys/clock.c ****   RCC.CR |= 1<<24;
  57              		.loc 1 13 0
  58 0026 1A68     		ldr	r2, [r3]
  59 0028 42F08072 		orr	r2, r2, #16777216
  60 002c 1A60     		str	r2, [r3]
  61              	.L2:
  14:src/sys/clock.c ****   
  15:src/sys/clock.c ****   /* wait for PLLRDY==1; */
  16:src/sys/clock.c ****   while ((RCC.CR&(1<<25))==0);
  62              		.loc 1 16 0 discriminator 1
  63 002e 1A68     		ldr	r2, [r3]
  64 0030 9201     		lsls	r2, r2, #6
  65 0032 FCD5     		bpl	.L2
  17:src/sys/clock.c **** }  
  66              		.loc 1 17 0
  67 0034 30BD     		pop	{r4, r5, pc}
  68              	.LVL5:
  69              	.L7:
  70 0036 00BF     		.align	2
  71              	.L6:
  72 0038 00000000 		.word	RCC
  73              		.cfi_endproc
  74              	.LFE392:
  75              		.size	start_PLL, .-start_PLL
  76              		.align	1
  77              		.global	stop_PLL
  78              		.thumb
  79              		.thumb_func
  80              		.type	stop_PLL, %function
  81              	stop_PLL:
  82              	.LFB393:
  18:src/sys/clock.c **** 
  19:src/sys/clock.c **** void stop_PLL() {
  83              		.loc 1 19 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              		@ link register save eliminated.
  20:src/sys/clock.c ****   /* Switch off PLL : PLLON=0; */ 
  21:src/sys/clock.c ****   RCC.CR &= ~(1<<24);
  88              		.loc 1 21 0
  89 003c 034A     		ldr	r2, .L9
  90 003e 1368     		ldr	r3, [r2]
  91 0040 23F08073 		bic	r3, r3, #16777216
  92 0044 1360     		str	r3, [r2]
  93              	.LBB16:
  94              	.LBB17:
  95              		.file 2 "src/sys/cmsis_gcc.h"
   1:src/sys/cmsis_gcc.h **** /**************************************************************************//**
   2:src/sys/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:src/sys/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:src/sys/cmsis_gcc.h ****  * @version  V4.30
   5:src/sys/cmsis_gcc.h ****  * @date     20. October 2015
   6:src/sys/cmsis_gcc.h ****  ******************************************************************************/
   7:src/sys/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:src/sys/cmsis_gcc.h **** 
   9:src/sys/cmsis_gcc.h ****    All rights reserved.
  10:src/sys/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:src/sys/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:src/sys/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:src/sys/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:src/sys/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:src/sys/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:src/sys/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:src/sys/cmsis_gcc.h ****      specific prior written permission.
  20:src/sys/cmsis_gcc.h ****    *
  21:src/sys/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:src/sys/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:src/sys/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:src/sys/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:src/sys/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:src/sys/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:src/sys/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:src/sys/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:src/sys/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:src/sys/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:src/sys/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:src/sys/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:src/sys/cmsis_gcc.h **** 
  34:src/sys/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  35:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_H
  36:src/sys/cmsis_gcc.h **** 
  37:src/sys/cmsis_gcc.h **** /* ignore some GCC warnings */
  38:src/sys/cmsis_gcc.h **** #if defined ( __GNUC__ )
  39:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic push
  40:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  41:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  42:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  43:src/sys/cmsis_gcc.h **** #endif
  44:src/sys/cmsis_gcc.h **** 
  45:src/sys/cmsis_gcc.h **** 
  46:src/sys/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  47:src/sys/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  48:src/sys/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  49:src/sys/cmsis_gcc.h ****   @{
  50:src/sys/cmsis_gcc.h ****  */
  51:src/sys/cmsis_gcc.h **** 
  52:src/sys/cmsis_gcc.h **** /**
  53:src/sys/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  54:src/sys/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  55:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  56:src/sys/cmsis_gcc.h ****  */
  57:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  58:src/sys/cmsis_gcc.h **** {
  59:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  60:src/sys/cmsis_gcc.h **** }
  61:src/sys/cmsis_gcc.h **** 
  62:src/sys/cmsis_gcc.h **** 
  63:src/sys/cmsis_gcc.h **** /**
  64:src/sys/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  65:src/sys/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  66:src/sys/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  67:src/sys/cmsis_gcc.h ****  */
  68:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  69:src/sys/cmsis_gcc.h **** {
  70:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  71:src/sys/cmsis_gcc.h **** }
  72:src/sys/cmsis_gcc.h **** 
  73:src/sys/cmsis_gcc.h **** 
  74:src/sys/cmsis_gcc.h **** /**
  75:src/sys/cmsis_gcc.h ****   \brief   Get Control Register
  76:src/sys/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  77:src/sys/cmsis_gcc.h ****   \return               Control Register value
  78:src/sys/cmsis_gcc.h ****  */
  79:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  80:src/sys/cmsis_gcc.h **** {
  81:src/sys/cmsis_gcc.h ****   uint32_t result;
  82:src/sys/cmsis_gcc.h **** 
  83:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  84:src/sys/cmsis_gcc.h ****   return(result);
  85:src/sys/cmsis_gcc.h **** }
  86:src/sys/cmsis_gcc.h **** 
  87:src/sys/cmsis_gcc.h **** 
  88:src/sys/cmsis_gcc.h **** /**
  89:src/sys/cmsis_gcc.h ****   \brief   Set Control Register
  90:src/sys/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  91:src/sys/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  92:src/sys/cmsis_gcc.h ****  */
  93:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  94:src/sys/cmsis_gcc.h **** {
  95:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  96:src/sys/cmsis_gcc.h **** }
  97:src/sys/cmsis_gcc.h **** 
  98:src/sys/cmsis_gcc.h **** 
  99:src/sys/cmsis_gcc.h **** /**
 100:src/sys/cmsis_gcc.h ****   \brief   Get IPSR Register
 101:src/sys/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 102:src/sys/cmsis_gcc.h ****   \return               IPSR Register value
 103:src/sys/cmsis_gcc.h ****  */
 104:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 105:src/sys/cmsis_gcc.h **** {
 106:src/sys/cmsis_gcc.h ****   uint32_t result;
 107:src/sys/cmsis_gcc.h **** 
 108:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 109:src/sys/cmsis_gcc.h ****   return(result);
 110:src/sys/cmsis_gcc.h **** }
 111:src/sys/cmsis_gcc.h **** 
 112:src/sys/cmsis_gcc.h **** 
 113:src/sys/cmsis_gcc.h **** /**
 114:src/sys/cmsis_gcc.h ****   \brief   Get APSR Register
 115:src/sys/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 116:src/sys/cmsis_gcc.h ****   \return               APSR Register value
 117:src/sys/cmsis_gcc.h ****  */
 118:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 119:src/sys/cmsis_gcc.h **** {
 120:src/sys/cmsis_gcc.h ****   uint32_t result;
 121:src/sys/cmsis_gcc.h **** 
 122:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 123:src/sys/cmsis_gcc.h ****   return(result);
 124:src/sys/cmsis_gcc.h **** }
 125:src/sys/cmsis_gcc.h **** 
 126:src/sys/cmsis_gcc.h **** 
 127:src/sys/cmsis_gcc.h **** /**
 128:src/sys/cmsis_gcc.h ****   \brief   Get xPSR Register
 129:src/sys/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 130:src/sys/cmsis_gcc.h **** 
 131:src/sys/cmsis_gcc.h ****     \return               xPSR Register value
 132:src/sys/cmsis_gcc.h ****  */
 133:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 134:src/sys/cmsis_gcc.h **** {
 135:src/sys/cmsis_gcc.h ****   uint32_t result;
 136:src/sys/cmsis_gcc.h **** 
 137:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 138:src/sys/cmsis_gcc.h ****   return(result);
 139:src/sys/cmsis_gcc.h **** }
 140:src/sys/cmsis_gcc.h **** 
 141:src/sys/cmsis_gcc.h **** 
 142:src/sys/cmsis_gcc.h **** /**
 143:src/sys/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 144:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 145:src/sys/cmsis_gcc.h ****   \return               PSP Register value
 146:src/sys/cmsis_gcc.h ****  */
 147:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 148:src/sys/cmsis_gcc.h **** {
 149:src/sys/cmsis_gcc.h ****   register uint32_t result;
 150:src/sys/cmsis_gcc.h **** 
 151:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 152:src/sys/cmsis_gcc.h ****   return(result);
 153:src/sys/cmsis_gcc.h **** }
 154:src/sys/cmsis_gcc.h **** 
 155:src/sys/cmsis_gcc.h **** 
 156:src/sys/cmsis_gcc.h **** /**
 157:src/sys/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 158:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 159:src/sys/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 160:src/sys/cmsis_gcc.h ****  */
 161:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 162:src/sys/cmsis_gcc.h **** {
 163:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 164:src/sys/cmsis_gcc.h **** }
 165:src/sys/cmsis_gcc.h **** 
 166:src/sys/cmsis_gcc.h **** 
 167:src/sys/cmsis_gcc.h **** /**
 168:src/sys/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 169:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 170:src/sys/cmsis_gcc.h ****   \return               MSP Register value
 171:src/sys/cmsis_gcc.h ****  */
 172:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 173:src/sys/cmsis_gcc.h **** {
 174:src/sys/cmsis_gcc.h ****   register uint32_t result;
 175:src/sys/cmsis_gcc.h **** 
 176:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 177:src/sys/cmsis_gcc.h ****   return(result);
 178:src/sys/cmsis_gcc.h **** }
 179:src/sys/cmsis_gcc.h **** 
 180:src/sys/cmsis_gcc.h **** 
 181:src/sys/cmsis_gcc.h **** /**
 182:src/sys/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 183:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 184:src/sys/cmsis_gcc.h **** 
 185:src/sys/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 186:src/sys/cmsis_gcc.h ****  */
 187:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 188:src/sys/cmsis_gcc.h **** {
 189:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 190:src/sys/cmsis_gcc.h **** }
 191:src/sys/cmsis_gcc.h **** 
 192:src/sys/cmsis_gcc.h **** 
 193:src/sys/cmsis_gcc.h **** /**
 194:src/sys/cmsis_gcc.h ****   \brief   Get Priority Mask
 195:src/sys/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 196:src/sys/cmsis_gcc.h ****   \return               Priority Mask value
 197:src/sys/cmsis_gcc.h ****  */
 198:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 199:src/sys/cmsis_gcc.h **** {
 200:src/sys/cmsis_gcc.h ****   uint32_t result;
 201:src/sys/cmsis_gcc.h **** 
 202:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 203:src/sys/cmsis_gcc.h ****   return(result);
 204:src/sys/cmsis_gcc.h **** }
 205:src/sys/cmsis_gcc.h **** 
 206:src/sys/cmsis_gcc.h **** 
 207:src/sys/cmsis_gcc.h **** /**
 208:src/sys/cmsis_gcc.h ****   \brief   Set Priority Mask
 209:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 210:src/sys/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 211:src/sys/cmsis_gcc.h ****  */
 212:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 213:src/sys/cmsis_gcc.h **** {
 214:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 215:src/sys/cmsis_gcc.h **** }
 216:src/sys/cmsis_gcc.h **** 
 217:src/sys/cmsis_gcc.h **** 
 218:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 219:src/sys/cmsis_gcc.h **** 
 220:src/sys/cmsis_gcc.h **** /**
 221:src/sys/cmsis_gcc.h ****   \brief   Enable FIQ
 222:src/sys/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 223:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 224:src/sys/cmsis_gcc.h ****  */
 225:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 226:src/sys/cmsis_gcc.h **** {
 227:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 228:src/sys/cmsis_gcc.h **** }
 229:src/sys/cmsis_gcc.h **** 
 230:src/sys/cmsis_gcc.h **** 
 231:src/sys/cmsis_gcc.h **** /**
 232:src/sys/cmsis_gcc.h ****   \brief   Disable FIQ
 233:src/sys/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 234:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 235:src/sys/cmsis_gcc.h ****  */
 236:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 237:src/sys/cmsis_gcc.h **** {
 238:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 239:src/sys/cmsis_gcc.h **** }
 240:src/sys/cmsis_gcc.h **** 
 241:src/sys/cmsis_gcc.h **** 
 242:src/sys/cmsis_gcc.h **** /**
 243:src/sys/cmsis_gcc.h ****   \brief   Get Base Priority
 244:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 245:src/sys/cmsis_gcc.h ****   \return               Base Priority register value
 246:src/sys/cmsis_gcc.h ****  */
 247:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 248:src/sys/cmsis_gcc.h **** {
 249:src/sys/cmsis_gcc.h ****   uint32_t result;
 250:src/sys/cmsis_gcc.h **** 
 251:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 252:src/sys/cmsis_gcc.h ****   return(result);
 253:src/sys/cmsis_gcc.h **** }
 254:src/sys/cmsis_gcc.h **** 
 255:src/sys/cmsis_gcc.h **** 
 256:src/sys/cmsis_gcc.h **** /**
 257:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority
 258:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 259:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 260:src/sys/cmsis_gcc.h ****  */
 261:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 262:src/sys/cmsis_gcc.h **** {
 263:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 264:src/sys/cmsis_gcc.h **** }
 265:src/sys/cmsis_gcc.h **** 
 266:src/sys/cmsis_gcc.h **** 
 267:src/sys/cmsis_gcc.h **** /**
 268:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 269:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 270:src/sys/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 271:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 272:src/sys/cmsis_gcc.h ****  */
 273:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 274:src/sys/cmsis_gcc.h **** {
 275:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 276:src/sys/cmsis_gcc.h **** }
 277:src/sys/cmsis_gcc.h **** 
 278:src/sys/cmsis_gcc.h **** 
 279:src/sys/cmsis_gcc.h **** /**
 280:src/sys/cmsis_gcc.h ****   \brief   Get Fault Mask
 281:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 282:src/sys/cmsis_gcc.h ****   \return               Fault Mask register value
 283:src/sys/cmsis_gcc.h ****  */
 284:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 285:src/sys/cmsis_gcc.h **** {
 286:src/sys/cmsis_gcc.h ****   uint32_t result;
 287:src/sys/cmsis_gcc.h **** 
 288:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 289:src/sys/cmsis_gcc.h ****   return(result);
 290:src/sys/cmsis_gcc.h **** }
 291:src/sys/cmsis_gcc.h **** 
 292:src/sys/cmsis_gcc.h **** 
 293:src/sys/cmsis_gcc.h **** /**
 294:src/sys/cmsis_gcc.h ****   \brief   Set Fault Mask
 295:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 296:src/sys/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 297:src/sys/cmsis_gcc.h ****  */
 298:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 299:src/sys/cmsis_gcc.h **** {
 300:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 301:src/sys/cmsis_gcc.h **** }
 302:src/sys/cmsis_gcc.h **** 
 303:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 304:src/sys/cmsis_gcc.h **** 
 305:src/sys/cmsis_gcc.h **** 
 306:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 307:src/sys/cmsis_gcc.h **** 
 308:src/sys/cmsis_gcc.h **** /**
 309:src/sys/cmsis_gcc.h ****   \brief   Get FPSCR
 310:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 311:src/sys/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 312:src/sys/cmsis_gcc.h ****  */
 313:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 314:src/sys/cmsis_gcc.h **** {
 315:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 316:src/sys/cmsis_gcc.h ****   uint32_t result;
 317:src/sys/cmsis_gcc.h **** 
 318:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 319:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 320:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 321:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 322:src/sys/cmsis_gcc.h ****   return(result);
 323:src/sys/cmsis_gcc.h **** #else
 324:src/sys/cmsis_gcc.h ****    return(0);
 325:src/sys/cmsis_gcc.h **** #endif
 326:src/sys/cmsis_gcc.h **** }
 327:src/sys/cmsis_gcc.h **** 
 328:src/sys/cmsis_gcc.h **** 
 329:src/sys/cmsis_gcc.h **** /**
 330:src/sys/cmsis_gcc.h ****   \brief   Set FPSCR
 331:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 332:src/sys/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 333:src/sys/cmsis_gcc.h ****  */
 334:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 335:src/sys/cmsis_gcc.h **** {
 336:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 337:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 338:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 339:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 340:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 341:src/sys/cmsis_gcc.h **** #endif
 342:src/sys/cmsis_gcc.h **** }
 343:src/sys/cmsis_gcc.h **** 
 344:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 345:src/sys/cmsis_gcc.h **** 
 346:src/sys/cmsis_gcc.h **** 
 347:src/sys/cmsis_gcc.h **** 
 348:src/sys/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 349:src/sys/cmsis_gcc.h **** 
 350:src/sys/cmsis_gcc.h **** 
 351:src/sys/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 352:src/sys/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 353:src/sys/cmsis_gcc.h ****   Access to dedicated instructions
 354:src/sys/cmsis_gcc.h ****   @{
 355:src/sys/cmsis_gcc.h **** */
 356:src/sys/cmsis_gcc.h **** 
 357:src/sys/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 358:src/sys/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 359:src/sys/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 360:src/sys/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 361:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 362:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 363:src/sys/cmsis_gcc.h **** #else
 364:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 365:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 366:src/sys/cmsis_gcc.h **** #endif
 367:src/sys/cmsis_gcc.h **** 
 368:src/sys/cmsis_gcc.h **** /**
 369:src/sys/cmsis_gcc.h ****   \brief   No Operation
 370:src/sys/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 371:src/sys/cmsis_gcc.h ****  */
 372:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 373:src/sys/cmsis_gcc.h **** {
 374:src/sys/cmsis_gcc.h ****   __ASM volatile ("nop");
 375:src/sys/cmsis_gcc.h **** }
 376:src/sys/cmsis_gcc.h **** 
 377:src/sys/cmsis_gcc.h **** 
 378:src/sys/cmsis_gcc.h **** /**
 379:src/sys/cmsis_gcc.h ****   \brief   Wait For Interrupt
 380:src/sys/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 381:src/sys/cmsis_gcc.h ****  */
 382:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 383:src/sys/cmsis_gcc.h **** {
 384:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfi");
 385:src/sys/cmsis_gcc.h **** }
 386:src/sys/cmsis_gcc.h **** 
 387:src/sys/cmsis_gcc.h **** 
 388:src/sys/cmsis_gcc.h **** /**
 389:src/sys/cmsis_gcc.h ****   \brief   Wait For Event
 390:src/sys/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 391:src/sys/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 392:src/sys/cmsis_gcc.h ****  */
 393:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 394:src/sys/cmsis_gcc.h **** {
 395:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfe");
 396:src/sys/cmsis_gcc.h **** }
 397:src/sys/cmsis_gcc.h **** 
 398:src/sys/cmsis_gcc.h **** 
 399:src/sys/cmsis_gcc.h **** /**
 400:src/sys/cmsis_gcc.h ****   \brief   Send Event
 401:src/sys/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 402:src/sys/cmsis_gcc.h ****  */
 403:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 404:src/sys/cmsis_gcc.h **** {
 405:src/sys/cmsis_gcc.h ****   __ASM volatile ("sev");
 406:src/sys/cmsis_gcc.h **** }
 407:src/sys/cmsis_gcc.h **** 
 408:src/sys/cmsis_gcc.h **** 
 409:src/sys/cmsis_gcc.h **** /**
 410:src/sys/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 411:src/sys/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 412:src/sys/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 413:src/sys/cmsis_gcc.h ****            after the instruction has been completed.
 414:src/sys/cmsis_gcc.h ****  */
 415:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 416:src/sys/cmsis_gcc.h **** {
 417:src/sys/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 418:src/sys/cmsis_gcc.h **** }
 419:src/sys/cmsis_gcc.h **** 
 420:src/sys/cmsis_gcc.h **** 
 421:src/sys/cmsis_gcc.h **** /**
 422:src/sys/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 423:src/sys/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 424:src/sys/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 425:src/sys/cmsis_gcc.h ****  */
 426:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 427:src/sys/cmsis_gcc.h **** {
 428:src/sys/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  96              		.loc 2 428 0
  97              		.syntax unified
  98              	@ 428 "src/sys/cmsis_gcc.h" 1
  99 0046 BFF34F8F 		dsb 0xF
 100              	@ 0 "" 2
 101              		.thumb
 102              		.syntax unified
 103 004a 7047     		bx	lr
 104              	.L10:
 105              		.align	2
 106              	.L9:
 107 004c 00000000 		.word	RCC
 108              	.LBE17:
 109              	.LBE16:
 110              		.cfi_endproc
 111              	.LFE393:
 112              		.size	stop_PLL, .-stop_PLL
 113              		.align	1
 114              		.global	set_SYSCLK
 115              		.thumb
 116              		.thumb_func
 117              		.type	set_SYSCLK, %function
 118              	set_SYSCLK:
 119              	.LFB394:
  22:src/sys/clock.c ****   __DSB();
  23:src/sys/clock.c **** }  
  24:src/sys/clock.c **** 
  25:src/sys/clock.c **** void set_SYSCLK(SW SRC) {
 120              		.loc 1 25 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125              	.LVL6:
  26:src/sys/clock.c ****   RCC.CFGR = (RCC.CFGR & ~(0x3<<0)) | ((SRC & 0x3)<<0);
 126              		.loc 1 26 0
 127 0050 064B     		ldr	r3, .L14
 128 0052 9A68     		ldr	r2, [r3, #8]
 129 0054 22F00301 		bic	r1, r2, #3
 130 0058 00F00302 		and	r2, r0, #3
 131 005c 0A43     		orrs	r2, r2, r1
 132 005e 9A60     		str	r2, [r3, #8]
 133              	.L12:
  27:src/sys/clock.c ****   while (((RCC.CFGR>>2) & 3)!=SRC);
 134              		.loc 1 27 0 discriminator 1
 135 0060 9A68     		ldr	r2, [r3, #8]
 136 0062 C2F38102 		ubfx	r2, r2, #2, #2
 137 0066 8242     		cmp	r2, r0
 138 0068 FAD1     		bne	.L12
  28:src/sys/clock.c **** }
 139              		.loc 1 28 0
 140 006a 7047     		bx	lr
 141              	.L15:
 142              		.align	2
 143              	.L14:
 144 006c 00000000 		.word	RCC
 145              		.cfi_endproc
 146              	.LFE394:
 147              		.size	set_SYSCLK, .-set_SYSCLK
 148              		.align	1
 149              		.global	set_bus_clock_dividers_exp
 150              		.thumb
 151              		.thumb_func
 152              		.type	set_bus_clock_dividers_exp, %function
 153              	set_bus_clock_dividers_exp:
 154              	.LFB395:
  29:src/sys/clock.c **** 
  30:src/sys/clock.c **** void set_bus_clock_dividers_exp(uint32_t HPRE__exp,
  31:src/sys/clock.c **** 				  uint32_t PPRE1_exp,
  32:src/sys/clock.c **** 				  uint32_t PPRE2_exp) {
 155              		.loc 1 32 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              	.LVL7:
 160 0070 30B5     		push	{r4, r5, lr}
 161              		.cfi_def_cfa_offset 12
 162              		.cfi_offset 4, -12
 163              		.cfi_offset 5, -8
 164              		.cfi_offset 14, -4
  33:src/sys/clock.c ****   uint32_t HPRE =(HPRE__exp==0?0:(0x8|((HPRE__exp-1) & 0x7)));
 165              		.loc 1 33 0
 166 0072 20B1     		cbz	r0, .L17
 167              		.loc 1 33 0 is_stmt 0 discriminator 1
 168 0074 0138     		subs	r0, r0, #1
 169              	.LVL8:
 170 0076 00F00700 		and	r0, r0, #7
 171              	.LVL9:
 172 007a 40F00800 		orr	r0, r0, #8
 173              	.L17:
 174              	.LVL10:
  34:src/sys/clock.c ****   uint32_t PPRE1=(PPRE1_exp==0?0:(0x4|((PPRE1_exp-1) & 0x3)));
 175              		.loc 1 34 0 is_stmt 1 discriminator 4
 176 007e 21B1     		cbz	r1, .L18
 177              		.loc 1 34 0 is_stmt 0 discriminator 1
 178 0080 0139     		subs	r1, r1, #1
 179              	.LVL11:
 180 0082 01F00301 		and	r1, r1, #3
 181              	.LVL12:
 182 0086 41F00401 		orr	r1, r1, #4
 183              	.L18:
 184              	.LVL13:
  35:src/sys/clock.c ****   uint32_t PPRE2=(PPRE2_exp==0?0:(0x4|((PPRE2_exp-1) & 0x3)));
 185              		.loc 1 35 0 is_stmt 1 discriminator 4
 186 008a 22B1     		cbz	r2, .L19
 187              		.loc 1 35 0 is_stmt 0 discriminator 1
 188 008c 013A     		subs	r2, r2, #1
 189              	.LVL14:
 190 008e 02F00302 		and	r2, r2, #3
 191              	.LVL15:
 192 0092 42F00402 		orr	r2, r2, #4
 193              	.L19:
 194              	.LVL16:
  36:src/sys/clock.c ****   RCC.CFGR=
  37:src/sys/clock.c ****     (RCC.CFGR & ~0xfcf0) | 
 195              		.loc 1 37 0 is_stmt 1 discriminator 4
 196 0096 074D     		ldr	r5, .L23
 197 0098 AC68     		ldr	r4, [r5, #8]
 198 009a 24F47C43 		bic	r3, r4, #64512
 199 009e 23F0F003 		bic	r3, r3, #240
 200 00a2 43EA0013 		orr	r3, r3, r0, lsl #4
 201 00a6 43EA8121 		orr	r1, r3, r1, lsl #10
 202              	.LVL17:
 203 00aa 41EA4232 		orr	r2, r1, r2, lsl #13
 204              	.LVL18:
  36:src/sys/clock.c ****   RCC.CFGR=
 205              		.loc 1 36 0 discriminator 4
 206 00ae AA60     		str	r2, [r5, #8]
 207 00b0 30BD     		pop	{r4, r5, pc}
 208              	.L24:
 209 00b2 00BF     		.align	2
 210              	.L23:
 211 00b4 00000000 		.word	RCC
 212              		.cfi_endproc
 213              	.LFE395:
 214              		.size	set_bus_clock_dividers_exp, .-set_bus_clock_dividers_exp
 215              		.align	1
 216              		.global	set_MCO
 217              		.thumb
 218              		.thumb_func
 219              		.type	set_MCO, %function
 220              	set_MCO:
 221              	.LFB396:
  38:src/sys/clock.c ****     ((HPRE<<4) | (PPRE1<<10) | (PPRE2<<13));
  39:src/sys/clock.c **** }
  40:src/sys/clock.c **** 
  41:src/sys/clock.c **** void set_MCO(MCO1SRC SRC1,uint32_t DIV1,MCO2SRC SRC2,uint32_t DIV2) {
 222              		.loc 1 41 0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226              	.LVL19:
 227 00b8 F0B5     		push	{r4, r5, r6, r7, lr}
 228              		.cfi_def_cfa_offset 20
 229              		.cfi_offset 4, -20
 230              		.cfi_offset 5, -16
 231              		.cfi_offset 6, -12
 232              		.cfi_offset 7, -8
 233              		.cfi_offset 14, -4
  42:src/sys/clock.c ****   uint32_t MCO1=SRC1&0x3;
  43:src/sys/clock.c ****   uint32_t MCO2=SRC2&0x3;
  44:src/sys/clock.c ****   uint32_t MCO1PRE=((DIV1<=1)?0:((DIV1+2)&0x7));
  45:src/sys/clock.c ****   uint32_t MCO2PRE=((DIV2<=1)?0:((DIV2+2)&0x7));
  46:src/sys/clock.c ****   RCC.CFGR = (RCC.CFGR & ~0xff600000) |
 234              		.loc 1 46 0
 235 00ba 114F     		ldr	r7, .L30
 236 00bc BD68     		ldr	r5, [r7, #8]
  44:src/sys/clock.c ****   uint32_t MCO2PRE=((DIV2<=1)?0:((DIV2+2)&0x7));
 237              		.loc 1 44 0
 238 00be 0129     		cmp	r1, #1
 239              		.loc 1 46 0
 240 00c0 25F07F44 		bic	r4, r5, #-16777216
  44:src/sys/clock.c ****   uint32_t MCO2PRE=((DIV2<=1)?0:((DIV2+2)&0x7));
 241              		.loc 1 44 0
 242 00c4 88BF     		it	hi
 243 00c6 0231     		addhi	r1, r1, #2
 244              	.LVL20:
  43:src/sys/clock.c ****   uint32_t MCO1PRE=((DIV1<=1)?0:((DIV1+2)&0x7));
 245              		.loc 1 43 0
 246 00c8 02F00302 		and	r2, r2, #3
 247              	.LVL21:
 248              		.loc 1 46 0
 249 00cc 24F4C004 		bic	r4, r4, #6291456
  44:src/sys/clock.c ****   uint32_t MCO2PRE=((DIV2<=1)?0:((DIV2+2)&0x7));
 250              		.loc 1 44 0
 251 00d0 8CBF     		ite	hi
 252 00d2 01F00701 		andhi	r1, r1, #7
 253 00d6 0021     		movls	r1, #0
  42:src/sys/clock.c ****   uint32_t MCO1=SRC1&0x3;
 254              		.loc 1 42 0
 255 00d8 00F00300 		and	r0, r0, #3
 256              	.LVL22:
  45:src/sys/clock.c ****   RCC.CFGR = (RCC.CFGR & ~0xff600000) |
 257              		.loc 1 45 0
 258 00dc 012B     		cmp	r3, #1
 259              		.loc 1 46 0
 260 00de 44EA8274 		orr	r4, r4, r2, lsl #30
  45:src/sys/clock.c ****   RCC.CFGR = (RCC.CFGR & ~0xff600000) |
 261              		.loc 1 45 0
 262 00e2 88BF     		it	hi
 263 00e4 9E1C     		addhi	r6, r3, #2
 264              		.loc 1 46 0
 265 00e6 44EA4050 		orr	r0, r4, r0, lsl #21
 266              	.LVL23:
  45:src/sys/clock.c ****   RCC.CFGR = (RCC.CFGR & ~0xff600000) |
 267              		.loc 1 45 0
 268 00ea 8CBF     		ite	hi
 269 00ec 06F00706 		andhi	r6, r6, #7
 270 00f0 0026     		movls	r6, #0
 271              	.LVL24:
 272              		.loc 1 46 0
 273 00f2 40EA0160 		orr	r0, r0, r1, lsl #24
 274 00f6 40EAC663 		orr	r3, r0, r6, lsl #27
 275              	.LVL25:
 276 00fa BB60     		str	r3, [r7, #8]
 277 00fc F0BD     		pop	{r4, r5, r6, r7, pc}
 278              	.LVL26:
 279              	.L31:
 280 00fe 00BF     		.align	2
 281              	.L30:
 282 0100 00000000 		.word	RCC
 283              		.cfi_endproc
 284              	.LFE396:
 285              		.size	set_MCO, .-set_MCO
 286              		.align	1
 287              		.global	enable_MCO_GPIO
 288              		.thumb
 289              		.thumb_func
 290              		.type	enable_MCO_GPIO, %function
 291              	enable_MCO_GPIO:
 292              	.LFB397:
  47:src/sys/clock.c ****     ((MCO1<<21) | (MCO1PRE<<24) |
  48:src/sys/clock.c ****      (MCO2PRE<<27) | (MCO2<<30));
  49:src/sys/clock.c **** }
  50:src/sys/clock.c **** 
  51:src/sys/clock.c **** void enable_MCO_GPIO() {
 293              		.loc 1 51 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297              		@ link register save eliminated.
 298              	.LBB18:
 299              	.LBB19:
 300              		.file 3 "src/sys/devices.h"
   1:src/sys/devices.h **** #ifndef __IO_H
   2:src/sys/devices.h **** #define __IO_H
   3:src/sys/devices.h **** 
   4:src/sys/devices.h **** #include<stdint.h>
   5:src/sys/devices.h **** #include "cm4.h"
   6:src/sys/devices.h **** 
   7:src/sys/devices.h **** #define __reserved(offset) \
   8:src/sys/devices.h ****   uint32_t _reserved_ ## offset
   9:src/sys/devices.h **** 
  10:src/sys/devices.h **** #define __reserved_interval(offset1,offset2) \
  11:src/sys/devices.h ****   uint32_t _reserved_ ## offset1 ## _ ## offset2[((offset2)-(offset1))/4]
  12:src/sys/devices.h **** 
  13:src/sys/devices.h **** /* PM §4.2.10 */ 
  14:src/sys/devices.h **** struct MPU_registers {
  15:src/sys/devices.h ****   uint32_t TYPER;
  16:src/sys/devices.h ****   uint32_t CTRL;
  17:src/sys/devices.h ****   uint32_t RNR;
  18:src/sys/devices.h ****   uint32_t RBAR;
  19:src/sys/devices.h ****   uint32_t RASR;
  20:src/sys/devices.h ****   uint32_t RBAR_A1;
  21:src/sys/devices.h ****   uint32_t RASR_A1;
  22:src/sys/devices.h ****   uint32_t RBAR_A2;
  23:src/sys/devices.h ****   uint32_t RASR_A2;
  24:src/sys/devices.h ****   uint32_t RBAR_A3;
  25:src/sys/devices.h ****   uint32_t RASR_A3;
  26:src/sys/devices.h **** };
  27:src/sys/devices.h **** 
  28:src/sys/devices.h **** /* PM §4.3.11 */ 
  29:src/sys/devices.h **** struct NVIC_registers {
  30:src/sys/devices.h ****   uint32_t ISER[3];
  31:src/sys/devices.h ****   __reserved_interval(0x0c,0x80);
  32:src/sys/devices.h ****   uint32_t ICER[3];
  33:src/sys/devices.h ****   __reserved_interval(0x8c,0x100);
  34:src/sys/devices.h ****   uint32_t ISPR[3];
  35:src/sys/devices.h ****   __reserved_interval(0x10c,0x180);
  36:src/sys/devices.h ****   uint32_t ICPR[3];
  37:src/sys/devices.h ****   __reserved_interval(0x18c,0x200);
  38:src/sys/devices.h ****   uint32_t IABR[3];
  39:src/sys/devices.h ****   __reserved_interval(0x20c,0x300);
  40:src/sys/devices.h ****   uint8_t  IP[81];
  41:src/sys/devices.h ****   uint8_t _reserved_bytes[3];
  42:src/sys/devices.h **** };
  43:src/sys/devices.h **** 
  44:src/sys/devices.h **** /* PM §4.4.19 */ 
  45:src/sys/devices.h **** struct SCB_registers {
  46:src/sys/devices.h ****   uint32_t CPUID;
  47:src/sys/devices.h ****   uint32_t ICSR;
  48:src/sys/devices.h ****   uint32_t VTOR;
  49:src/sys/devices.h ****   uint32_t AIRCR;
  50:src/sys/devices.h ****   uint32_t SCR;
  51:src/sys/devices.h ****   uint32_t CCR;
  52:src/sys/devices.h ****   uint32_t SHPR1;
  53:src/sys/devices.h ****   uint32_t SHPR2;
  54:src/sys/devices.h ****   uint32_t SHPR3;
  55:src/sys/devices.h ****   uint32_t SHCRS;
  56:src/sys/devices.h ****   uint32_t CFSR;
  57:src/sys/devices.h ****   uint32_t HFSR;
  58:src/sys/devices.h ****   uint32_t MMAR;
  59:src/sys/devices.h ****   uint32_t BFAR;
  60:src/sys/devices.h ****   uint32_t AFSR;
  61:src/sys/devices.h **** };
  62:src/sys/devices.h **** 
  63:src/sys/devices.h **** /* PM §4.5.6 */ 
  64:src/sys/devices.h **** struct STK_registers {
  65:src/sys/devices.h ****   uint32_t CTRL;
  66:src/sys/devices.h ****   uint32_t LOAD;
  67:src/sys/devices.h ****   uint32_t VAL;
  68:src/sys/devices.h ****   uint32_t CALIB;
  69:src/sys/devices.h **** };
  70:src/sys/devices.h **** 
  71:src/sys/devices.h **** /* PM §4.6 */ 
  72:src/sys/devices.h **** struct FPU_registers {
  73:src/sys/devices.h ****   __reserved(0x0);
  74:src/sys/devices.h ****   uint32_t CCR;
  75:src/sys/devices.h ****   uint32_t CAR;
  76:src/sys/devices.h ****   uint32_t DSCR;
  77:src/sys/devices.h **** };
  78:src/sys/devices.h **** 
  79:src/sys/devices.h **** 
  80:src/sys/devices.h **** /* RM §3.6.7 */ 
  81:src/sys/devices.h **** struct FLASH_registers {
  82:src/sys/devices.h ****   uint32_t ACR;
  83:src/sys/devices.h ****   uint32_t KEYR;
  84:src/sys/devices.h ****   uint32_t OPTKEYR;
  85:src/sys/devices.h ****   uint32_t SR;
  86:src/sys/devices.h ****   uint32_t CR;
  87:src/sys/devices.h ****   uint32_t OPTCR;  
  88:src/sys/devices.h **** };
  89:src/sys/devices.h **** 
  90:src/sys/devices.h **** /* RM §4.4.4 */
  91:src/sys/devices.h **** struct CRC_registers {
  92:src/sys/devices.h ****   uint32_t DR;
  93:src/sys/devices.h ****   uint32_t ICR;
  94:src/sys/devices.h ****   uint32_t CR;
  95:src/sys/devices.h **** };
  96:src/sys/devices.h **** 
  97:src/sys/devices.h **** /* RM §5.5 */
  98:src/sys/devices.h **** struct PWR_registers {
  99:src/sys/devices.h ****   uint32_t CR;
 100:src/sys/devices.h ****   uint32_t CSR;
 101:src/sys/devices.h **** };
 102:src/sys/devices.h **** 
 103:src/sys/devices.h **** /* RM §6.3.28 */
 104:src/sys/devices.h **** struct RCC_registers {
 105:src/sys/devices.h ****   uint32_t CR;
 106:src/sys/devices.h ****   uint32_t PLLCFGR;
 107:src/sys/devices.h ****   uint32_t CFGR;
 108:src/sys/devices.h ****   uint32_t CIR;
 109:src/sys/devices.h ****   uint32_t AHB1RSTR;
 110:src/sys/devices.h ****   uint32_t AHB2RSTR;
 111:src/sys/devices.h ****   uint32_t AHB3RSTR;
 112:src/sys/devices.h ****   __reserved(0x1c);
 113:src/sys/devices.h ****   uint32_t APB1RSTR;
 114:src/sys/devices.h ****   uint32_t APB2RSTR;
 115:src/sys/devices.h ****   __reserved(0x28);
 116:src/sys/devices.h ****   __reserved(0x2c);
 117:src/sys/devices.h ****   uint32_t AHB1ENR;
 118:src/sys/devices.h ****   uint32_t AHB2ENR;
 119:src/sys/devices.h ****   uint32_t AHB3ENR;
 120:src/sys/devices.h ****   __reserved(0x3c);
 121:src/sys/devices.h ****   uint32_t APB1ENR;
 122:src/sys/devices.h ****   uint32_t APB2ENR;
 123:src/sys/devices.h ****   __reserved(0x48);
 124:src/sys/devices.h ****   __reserved(0x4c);
 125:src/sys/devices.h ****   uint32_t AHB1LPENR;
 126:src/sys/devices.h ****   uint32_t AHB2LPENR;
 127:src/sys/devices.h ****   uint32_t AHB3LPENR;
 128:src/sys/devices.h ****   __reserved(0x5c);
 129:src/sys/devices.h ****   uint32_t APB1LPENR;
 130:src/sys/devices.h ****   uint32_t APB2LPENR;
 131:src/sys/devices.h ****   __reserved(0x68);
 132:src/sys/devices.h ****   __reserved(0x6c);
 133:src/sys/devices.h ****   uint32_t BDCR;
 134:src/sys/devices.h ****   uint32_t CSR;
 135:src/sys/devices.h ****   __reserved(0x78);
 136:src/sys/devices.h ****   __reserved(0x7c);
 137:src/sys/devices.h ****   uint32_t SSCGR;
 138:src/sys/devices.h ****   uint32_t PLLI2SCFGR;
 139:src/sys/devices.h ****   uint32_t PLLSAICFGR;
 140:src/sys/devices.h ****   uint32_t DCKCFGR;
 141:src/sys/devices.h ****   uint32_t CKGATENR;
 142:src/sys/devices.h ****   uint32_t DCKCFGR2;
 143:src/sys/devices.h **** };
 144:src/sys/devices.h **** 
 145:src/sys/devices.h **** /* RM §7.4.11 */
 146:src/sys/devices.h **** struct GPIO_registers {
 147:src/sys/devices.h ****   uint32_t MODER;
 148:src/sys/devices.h ****   uint32_t OTYPER;
 149:src/sys/devices.h ****   uint32_t OSPEEDR;
 150:src/sys/devices.h ****   uint32_t PUPDR;
 151:src/sys/devices.h ****   uint32_t IDR;
 152:src/sys/devices.h ****   uint32_t ODR;
 153:src/sys/devices.h ****   uint32_t BSRR;
 154:src/sys/devices.h ****   uint32_t LCKR;
 155:src/sys/devices.h ****   uint32_t AFRL;
 156:src/sys/devices.h ****   uint32_t AFRH;
 157:src/sys/devices.h **** };
 158:src/sys/devices.h **** 
 159:src/sys/devices.h **** /* RM §8.2.9 */
 160:src/sys/devices.h **** struct SYSCFG_registers {
 161:src/sys/devices.h ****   uint32_t MEMRMP;
 162:src/sys/devices.h ****   uint32_t PMC;
 163:src/sys/devices.h ****   uint32_t EXTICR1;
 164:src/sys/devices.h ****   uint32_t EXTICR2;
 165:src/sys/devices.h ****   uint32_t EXTICR3;
 166:src/sys/devices.h ****   uint32_t EXTICR4;
 167:src/sys/devices.h ****   __reserved(0x18);
 168:src/sys/devices.h ****   __reserved(0x1c);
 169:src/sys/devices.h ****   uint32_t CMPCR;
 170:src/sys/devices.h ****   __reserved(0x24);
 171:src/sys/devices.h ****   __reserved(0x28);
 172:src/sys/devices.h ****   uint32_t CFGR;
 173:src/sys/devices.h **** };
 174:src/sys/devices.h **** 
 175:src/sys/devices.h **** /* RM §9.5.11 */
 176:src/sys/devices.h **** struct DMA_Sx_registers {
 177:src/sys/devices.h ****   uint32_t CR;
 178:src/sys/devices.h ****   uint32_t NDTR;
 179:src/sys/devices.h ****   void* PAR;
 180:src/sys/devices.h ****   void* M0AR;
 181:src/sys/devices.h ****   void* M1AR;
 182:src/sys/devices.h ****   uint32_t FCR;
 183:src/sys/devices.h **** };
 184:src/sys/devices.h **** struct DMA_registers {
 185:src/sys/devices.h ****   uint32_t LISR;
 186:src/sys/devices.h ****   uint32_t HISR;
 187:src/sys/devices.h ****   uint32_t LIFCR;
 188:src/sys/devices.h ****   uint32_t HIFCR;
 189:src/sys/devices.h ****   struct DMA_Sx_registers S[8];
 190:src/sys/devices.h **** };
 191:src/sys/devices.h **** 
 192:src/sys/devices.h **** /* RM §10.3.7 */
 193:src/sys/devices.h **** struct EXTI_registers {
 194:src/sys/devices.h ****   uint32_t IMR;
 195:src/sys/devices.h ****   uint32_t EMR;
 196:src/sys/devices.h ****   uint32_t RTSR;
 197:src/sys/devices.h ****   uint32_t FTSR;
 198:src/sys/devices.h ****   uint32_t SWIER;
 199:src/sys/devices.h ****   uint32_t PR;
 200:src/sys/devices.h **** };
 201:src/sys/devices.h **** 
 202:src/sys/devices.h **** /* RM §11.8 */
 203:src/sys/devices.h **** struct FMC_registers {
 204:src/sys/devices.h ****   uint32_t BCR1;
 205:src/sys/devices.h ****   uint32_t BCR2;
 206:src/sys/devices.h ****   uint32_t BCR3;
 207:src/sys/devices.h ****   uint32_t BCR4;
 208:src/sys/devices.h ****   uint32_t BTR1;
 209:src/sys/devices.h ****   uint32_t BTR2;
 210:src/sys/devices.h ****   uint32_t BTR3;
 211:src/sys/devices.h ****   uint32_t BTR4;
 212:src/sys/devices.h ****   uint32_t BWTR1;
 213:src/sys/devices.h ****   uint32_t BWTR2;
 214:src/sys/devices.h ****   uint32_t BWTR3;
 215:src/sys/devices.h ****   uint32_t BWTR4;
 216:src/sys/devices.h ****   uint32_t PCR;
 217:src/sys/devices.h ****   uint32_t SR;
 218:src/sys/devices.h ****   uint32_t PMEM;
 219:src/sys/devices.h ****   uint32_t PATT;
 220:src/sys/devices.h ****   uint32_t ECCR;
 221:src/sys/devices.h ****   uint32_t SDCR1;
 222:src/sys/devices.h ****   uint32_t SDCR2;
 223:src/sys/devices.h ****   uint32_t SDTR1;
 224:src/sys/devices.h ****   uint32_t SDTR2;
 225:src/sys/devices.h ****   uint32_t SDCMR;
 226:src/sys/devices.h ****   uint32_t SDRTR;
 227:src/sys/devices.h ****   uint32_t SDSR;
 228:src/sys/devices.h **** };
 229:src/sys/devices.h **** 
 230:src/sys/devices.h **** /* RM §12.5.14 */
 231:src/sys/devices.h **** struct QUADSPI_registers {
 232:src/sys/devices.h ****   uint32_t CR;
 233:src/sys/devices.h ****   uint32_t DCR;
 234:src/sys/devices.h ****   uint32_t SR;
 235:src/sys/devices.h ****   uint32_t FCR;
 236:src/sys/devices.h ****   uint32_t DLR;
 237:src/sys/devices.h ****   uint32_t CCR;
 238:src/sys/devices.h ****   uint32_t AR;
 239:src/sys/devices.h ****   uint32_t ABR;
 240:src/sys/devices.h ****   uint32_t DR;
 241:src/sys/devices.h ****   uint32_t PSMKR;
 242:src/sys/devices.h ****   uint32_t PSMAR;
 243:src/sys/devices.h ****   uint32_t PIR;
 244:src/sys/devices.h ****   uint32_t LPTR;
 245:src/sys/devices.h **** };
 246:src/sys/devices.h **** 
 247:src/sys/devices.h **** /* RM §13.13.18 */
 248:src/sys/devices.h **** struct ADCx_registers {
 249:src/sys/devices.h ****   uint32_t SR;
 250:src/sys/devices.h ****   uint32_t CR1;
 251:src/sys/devices.h ****   uint32_t CR2;
 252:src/sys/devices.h ****   uint32_t SMPR1;
 253:src/sys/devices.h ****   uint32_t SMPR2;
 254:src/sys/devices.h ****   uint32_t JOFR1;
 255:src/sys/devices.h ****   uint32_t JOFR2;
 256:src/sys/devices.h ****   uint32_t JOFR3;
 257:src/sys/devices.h ****   uint32_t JOFR4;
 258:src/sys/devices.h ****   uint32_t HTR;
 259:src/sys/devices.h ****   uint32_t LTR;
 260:src/sys/devices.h ****   uint32_t SQR1;
 261:src/sys/devices.h ****   uint32_t SQR2;
 262:src/sys/devices.h ****   uint32_t SQR3;
 263:src/sys/devices.h ****   uint32_t JSQR;
 264:src/sys/devices.h ****   uint32_t JDR1;
 265:src/sys/devices.h ****   uint32_t JDR2;
 266:src/sys/devices.h ****   uint32_t JDR3;
 267:src/sys/devices.h ****   uint32_t JDR4;
 268:src/sys/devices.h ****   uint32_t DR;
 269:src/sys/devices.h **** };
 270:src/sys/devices.h **** 
 271:src/sys/devices.h **** struct ADC_common_registers {
 272:src/sys/devices.h ****   uint32_t CSR;
 273:src/sys/devices.h ****   uint32_t CCR;
 274:src/sys/devices.h ****   uint32_t CDR;
 275:src/sys/devices.h **** };
 276:src/sys/devices.h **** 
 277:src/sys/devices.h **** 
 278:src/sys/devices.h **** /* RM §14.5.15 */
 279:src/sys/devices.h **** struct DAC_registers {
 280:src/sys/devices.h ****   uint32_t CR;
 281:src/sys/devices.h ****   uint32_t SWTRIGR;
 282:src/sys/devices.h ****   uint32_t DHR12R1;
 283:src/sys/devices.h ****   uint32_t DHR12L1;
 284:src/sys/devices.h ****   uint32_t DHR8R1;
 285:src/sys/devices.h ****   uint32_t DHR12R2;
 286:src/sys/devices.h ****   uint32_t DHR12L2;
 287:src/sys/devices.h ****   uint32_t DHR8R2;
 288:src/sys/devices.h ****   uint32_t DHR12RD;
 289:src/sys/devices.h ****   uint32_t DHR12LD;
 290:src/sys/devices.h ****   uint32_t DHR8RD;
 291:src/sys/devices.h ****   uint32_t DOR1;
 292:src/sys/devices.h ****   uint32_t DOR2;
 293:src/sys/devices.h ****   uint32_t SR;
 294:src/sys/devices.h **** };
 295:src/sys/devices.h **** 
 296:src/sys/devices.h **** /* RM §15.8.12 */
 297:src/sys/devices.h **** struct DCMI_registers {
 298:src/sys/devices.h ****   uint32_t CR;
 299:src/sys/devices.h ****   uint32_t SR;
 300:src/sys/devices.h ****   uint32_t RIS;
 301:src/sys/devices.h ****   uint32_t IER;
 302:src/sys/devices.h ****   uint32_t MIS;
 303:src/sys/devices.h ****   uint32_t ICR;
 304:src/sys/devices.h ****   uint32_t ESCR;
 305:src/sys/devices.h ****   uint32_t ESUR;
 306:src/sys/devices.h ****   uint32_t CWSTRT;
 307:src/sys/devices.h ****   uint32_t CWSIZE;
 308:src/sys/devices.h ****   uint32_t DR;
 309:src/sys/devices.h **** };
 310:src/sys/devices.h **** 
 311:src/sys/devices.h **** /* RM §16.4.21 TIM1,8 */
 312:src/sys/devices.h **** /* RM §17.4.21 TIM2,3,4,5 */
 313:src/sys/devices.h **** /* RM §18.4.13 TIM9,12 */
 314:src/sys/devices.h **** /* RM §18.5.1  TIM10,11,13,14 */
 315:src/sys/devices.h **** /* RM §19.4.9  TIM6,7 */
 316:src/sys/devices.h **** struct TIMx_registers {
 317:src/sys/devices.h ****   uint32_t CR1;
 318:src/sys/devices.h ****   uint32_t CR2;
 319:src/sys/devices.h ****   uint32_t SMCR;
 320:src/sys/devices.h ****   uint32_t DIER;
 321:src/sys/devices.h ****   uint32_t SR;
 322:src/sys/devices.h ****   uint32_t EGR;
 323:src/sys/devices.h ****   uint32_t CCMR1;
 324:src/sys/devices.h ****   uint32_t CCMR2;
 325:src/sys/devices.h ****   uint32_t CCER;
 326:src/sys/devices.h ****   uint32_t CNT;
 327:src/sys/devices.h ****   uint32_t PSC;
 328:src/sys/devices.h ****   uint32_t ARR;
 329:src/sys/devices.h ****   uint32_t RCR;
 330:src/sys/devices.h ****   uint32_t CCR1;
 331:src/sys/devices.h ****   uint32_t CCR2;
 332:src/sys/devices.h ****   uint32_t CCR3;
 333:src/sys/devices.h ****   uint32_t CCR4;
 334:src/sys/devices.h ****   uint32_t BDTR;
 335:src/sys/devices.h ****   uint32_t DCR;
 336:src/sys/devices.h ****   uint32_t DMAR;
 337:src/sys/devices.h ****   uint32_t OR;
 338:src/sys/devices.h **** };
 339:src/sys/devices.h **** 
 340:src/sys/devices.h **** /* RM §20.4.5 */
 341:src/sys/devices.h **** struct IWDG_registers {
 342:src/sys/devices.h ****   uint32_t KR;
 343:src/sys/devices.h ****   uint32_t PR;
 344:src/sys/devices.h ****   uint32_t RLR;
 345:src/sys/devices.h ****   uint32_t SR;
 346:src/sys/devices.h **** };
 347:src/sys/devices.h **** 
 348:src/sys/devices.h **** /* RM §21.6.4 */
 349:src/sys/devices.h **** struct WWDG_registers {
 350:src/sys/devices.h ****   uint32_t CR;
 351:src/sys/devices.h ****   uint32_t CFR;
 352:src/sys/devices.h ****   uint32_t SR;
 353:src/sys/devices.h **** };
 354:src/sys/devices.h **** 
 355:src/sys/devices.h **** /* RM §22.6.21 */
 356:src/sys/devices.h **** struct RTC_registers {
 357:src/sys/devices.h ****   uint32_t TR;
 358:src/sys/devices.h ****   uint32_t DR;
 359:src/sys/devices.h ****   uint32_t CR;
 360:src/sys/devices.h ****   uint32_t ISR;
 361:src/sys/devices.h ****   uint32_t PRER;
 362:src/sys/devices.h ****   uint32_t WUTR;
 363:src/sys/devices.h ****   uint32_t CALIBR;
 364:src/sys/devices.h ****   uint32_t ALRMAR;
 365:src/sys/devices.h ****   uint32_t ALRMBR;
 366:src/sys/devices.h ****   uint32_t WPR;
 367:src/sys/devices.h ****   uint32_t SSR;
 368:src/sys/devices.h ****   uint32_t SHIFTR;
 369:src/sys/devices.h ****   uint32_t TSTR;
 370:src/sys/devices.h ****   uint32_t TSSSR;
 371:src/sys/devices.h ****   uint32_t CALR;
 372:src/sys/devices.h ****   uint32_t TAFCR;
 373:src/sys/devices.h ****   uint32_t ALRMASSR;
 374:src/sys/devices.h ****   uint32_t ALRMBSSR;
 375:src/sys/devices.h ****   uint32_t BKPR[20];
 376:src/sys/devices.h **** };
 377:src/sys/devices.h **** 
 378:src/sys/devices.h **** /* RM §23.7.12 */
 379:src/sys/devices.h **** struct FMPI2C_registers {
 380:src/sys/devices.h ****   uint32_t CR1;
 381:src/sys/devices.h ****   uint32_t CR2;
 382:src/sys/devices.h ****   uint32_t OAR1;
 383:src/sys/devices.h ****   uint32_t OAR2;
 384:src/sys/devices.h ****   uint32_t TIMINGR;
 385:src/sys/devices.h ****   uint32_t TIMEOUTR;
 386:src/sys/devices.h ****   uint32_t ISR;
 387:src/sys/devices.h ****   uint32_t ICR;
 388:src/sys/devices.h ****   uint32_t PECR;
 389:src/sys/devices.h ****   uint32_t RXDR;
 390:src/sys/devices.h ****   uint32_t TXDR;
 391:src/sys/devices.h **** };
 392:src/sys/devices.h **** 
 393:src/sys/devices.h **** /* RM §24.6.14 */
 394:src/sys/devices.h **** struct I2C_registers {
 395:src/sys/devices.h ****   uint32_t CR1;
 396:src/sys/devices.h ****   uint32_t CR2;
 397:src/sys/devices.h ****   uint32_t OAR1;
 398:src/sys/devices.h ****   uint32_t OAR2;
 399:src/sys/devices.h ****   uint32_t DR;
 400:src/sys/devices.h ****   uint32_t SR1;
 401:src/sys/devices.h ****   uint32_t SR2;
 402:src/sys/devices.h ****   uint32_t CCR;
 403:src/sys/devices.h ****   uint32_t TRISE;
 404:src/sys/devices.h ****   uint32_t FLTR;
 405:src/sys/devices.h **** };
 406:src/sys/devices.h **** 
 407:src/sys/devices.h **** /* RM §25.6.8 */
 408:src/sys/devices.h **** struct USART_registers {
 409:src/sys/devices.h ****   uint32_t SR;
 410:src/sys/devices.h ****   uint32_t DR;
 411:src/sys/devices.h ****   uint32_t BRR;
 412:src/sys/devices.h ****   uint32_t CR1;
 413:src/sys/devices.h ****   uint32_t CR2;
 414:src/sys/devices.h ****   uint32_t CR3;
 415:src/sys/devices.h ****   uint32_t GTPR;
 416:src/sys/devices.h **** };
 417:src/sys/devices.h **** 
 418:src/sys/devices.h **** /* RM §26.7.10 */
 419:src/sys/devices.h **** struct SPI_I2S_registers {
 420:src/sys/devices.h ****   uint32_t CR1;
 421:src/sys/devices.h ****   uint32_t CR2;
 422:src/sys/devices.h ****   uint32_t SR;
 423:src/sys/devices.h ****   uint32_t DR;
 424:src/sys/devices.h ****   uint32_t CRCPR;
 425:src/sys/devices.h ****   uint32_t RXCRCR;
 426:src/sys/devices.h ****   uint32_t TXCRCR;
 427:src/sys/devices.h ****   uint32_t I2SCFGR;
 428:src/sys/devices.h ****   uint32_t I2SPR;
 429:src/sys/devices.h **** };
 430:src/sys/devices.h **** 
 431:src/sys/devices.h **** /* RM §27.5.10 */
 432:src/sys/devices.h **** struct SPDIFRX_registers {
 433:src/sys/devices.h ****   uint32_t CR;
 434:src/sys/devices.h ****   uint32_t IMR;
 435:src/sys/devices.h ****   uint32_t SR;
 436:src/sys/devices.h ****   uint32_t IFCR;
 437:src/sys/devices.h ****   uint32_t DR;
 438:src/sys/devices.h ****   uint32_t CSR;
 439:src/sys/devices.h ****   uint32_t DIR;
 440:src/sys/devices.h **** };
 441:src/sys/devices.h **** 
 442:src/sys/devices.h **** /* RM §28.5.10 */
 443:src/sys/devices.h **** struct SAI_x_registers {
 444:src/sys/devices.h ****   uint32_t CR1;
 445:src/sys/devices.h ****   uint32_t CR2;
 446:src/sys/devices.h ****   uint32_t FRCR;
 447:src/sys/devices.h ****   uint32_t SLOTR;
 448:src/sys/devices.h ****   uint32_t IM;
 449:src/sys/devices.h ****   uint32_t SR;
 450:src/sys/devices.h ****   uint32_t CLRFR;
 451:src/sys/devices.h ****   uint32_t DR;
 452:src/sys/devices.h **** };
 453:src/sys/devices.h **** 
 454:src/sys/devices.h **** struct SAI_registers {
 455:src/sys/devices.h ****   uint32_t GCR;
 456:src/sys/devices.h ****   struct SAI_x_registers A;
 457:src/sys/devices.h ****   struct SAI_x_registers B;
 458:src/sys/devices.h **** };
 459:src/sys/devices.h **** 
 460:src/sys/devices.h **** /* RM §29.8.16 */
 461:src/sys/devices.h **** struct SDIO_registers {
 462:src/sys/devices.h ****   uint32_t POWER;
 463:src/sys/devices.h ****   uint32_t CLKCR;
 464:src/sys/devices.h ****   uint32_t CMD;
 465:src/sys/devices.h ****   uint32_t RESPCMD;
 466:src/sys/devices.h ****   uint32_t RESP1;
 467:src/sys/devices.h ****   uint32_t RESP2;
 468:src/sys/devices.h ****   uint32_t RESP3;
 469:src/sys/devices.h ****   uint32_t RESP4;
 470:src/sys/devices.h ****   uint32_t DTIMER;
 471:src/sys/devices.h ****   uint32_t DLEN;
 472:src/sys/devices.h ****   uint32_t DCTRL;
 473:src/sys/devices.h ****   uint32_t DCOUNT;
 474:src/sys/devices.h ****   uint32_t STA;
 475:src/sys/devices.h ****   uint32_t ICR;
 476:src/sys/devices.h ****   uint32_t MASK;
 477:src/sys/devices.h ****   __reserved(0x40);
 478:src/sys/devices.h ****   __reserved(0x44);
 479:src/sys/devices.h ****   uint32_t FIFOCNT;
 480:src/sys/devices.h ****   __reserved_interval(0x4c,0x80);
 481:src/sys/devices.h ****   uint32_t FIFO[32];
 482:src/sys/devices.h **** };
 483:src/sys/devices.h ****   
 484:src/sys/devices.h **** /* RM §30.9.5 */
 485:src/sys/devices.h **** struct bxCAN_TxRx_registers {
 486:src/sys/devices.h ****   uint32_t IR;
 487:src/sys/devices.h ****   uint32_t DTR;
 488:src/sys/devices.h ****   uint32_t DLR;
 489:src/sys/devices.h ****   uint32_t DHR;
 490:src/sys/devices.h **** };
 491:src/sys/devices.h **** 
 492:src/sys/devices.h **** struct bxCAN_registers {
 493:src/sys/devices.h ****   uint32_t MCR;
 494:src/sys/devices.h ****   uint32_t MSR;
 495:src/sys/devices.h ****   uint32_t TSR;
 496:src/sys/devices.h ****   uint32_t RF0R;
 497:src/sys/devices.h ****   uint32_t RF1R;
 498:src/sys/devices.h ****   uint32_t IER;
 499:src/sys/devices.h ****   uint32_t ESR;
 500:src/sys/devices.h ****   uint32_t BTR;
 501:src/sys/devices.h ****   __reserved_interval(0x20,0x180);
 502:src/sys/devices.h ****   struct bxCAN_TxRx_registers Tx[3];
 503:src/sys/devices.h ****   struct bxCAN_TxRx_registers Rx[2];
 504:src/sys/devices.h ****   __reserved_interval(0x1d0,0x200);
 505:src/sys/devices.h ****   uint32_t FMR;
 506:src/sys/devices.h ****   uint32_t FM1R;
 507:src/sys/devices.h ****   __reserved(0x208);
 508:src/sys/devices.h ****   uint32_t FS1R;
 509:src/sys/devices.h ****   __reserved(0x210);
 510:src/sys/devices.h ****   uint32_t FFA1R;
 511:src/sys/devices.h ****   __reserved(0x218);
 512:src/sys/devices.h ****   uint32_t FA1R;
 513:src/sys/devices.h ****   __reserved_interval(0x220,0x240);
 514:src/sys/devices.h ****   struct {uint32_t R1; uint32_t R2;} F[28];
 515:src/sys/devices.h **** };
 516:src/sys/devices.h **** 
 517:src/sys/devices.h **** /* RM §32.7.7 */
 518:src/sys/devices.h **** struct OTG_registers {
 519:src/sys/devices.h ****    /* TODO */
 520:src/sys/devices.h **** };
 521:src/sys/devices.h **** 
 522:src/sys/devices.h **** /* RM §32.7.7 */
 523:src/sys/devices.h **** struct HDMI_CEC_registers {
 524:src/sys/devices.h ****   uint32_t CR;
 525:src/sys/devices.h ****   uint32_t CFGR;
 526:src/sys/devices.h ****   uint32_t TXDR;
 527:src/sys/devices.h ****   uint32_t RXDR;
 528:src/sys/devices.h ****   uint32_t ISR;
 529:src/sys/devices.h ****   uint32_t IER;
 530:src/sys/devices.h **** };
 531:src/sys/devices.h **** 
 532:src/sys/devices.h **** /* RM §33.18 */
 533:src/sys/devices.h **** struct DBGMCU_registers {
 534:src/sys/devices.h ****   uint32_t IDCODE;
 535:src/sys/devices.h ****   uint32_t CR;
 536:src/sys/devices.h ****   uint32_t APB1FZ;
 537:src/sys/devices.h ****   uint32_t APB2FZ;
 538:src/sys/devices.h **** };
 539:src/sys/devices.h **** 
 540:src/sys/devices.h **** /* Constant values */
 541:src/sys/devices.h **** 
 542:src/sys/devices.h **** extern const uint16_t Package_data;
 543:src/sys/devices.h **** extern const uint16_t TS_CAL2;
 544:src/sys/devices.h **** extern const uint16_t TS_CAL1;
 545:src/sys/devices.h **** extern const uint16_t VREFIN_CAL;
 546:src/sys/devices.h **** extern const uint16_t Flash_size;
 547:src/sys/devices.h **** extern const uint32_t U_ID[3];
 548:src/sys/devices.h **** 
 549:src/sys/devices.h **** /* Core Devices base addresses */
 550:src/sys/devices.h **** 
 551:src/sys/devices.h **** extern volatile struct DBGMCU_registers DBG;
 552:src/sys/devices.h **** 
 553:src/sys/devices.h **** extern volatile struct FPU_registers FPU;
 554:src/sys/devices.h **** extern volatile uint32_t NVIC_STIR;
 555:src/sys/devices.h **** extern volatile struct MPU_registers MPU;
 556:src/sys/devices.h **** extern volatile uint32_t FPU_CPACR;
 557:src/sys/devices.h **** extern volatile struct SCB_registers SCB;
 558:src/sys/devices.h **** extern volatile struct NVIC_registers NVIC;
 559:src/sys/devices.h **** extern volatile struct STK_registers SysTick;
 560:src/sys/devices.h **** 
 561:src/sys/devices.h **** /* Devices base addresses */
 562:src/sys/devices.h **** 
 563:src/sys/devices.h **** extern volatile struct QUADSPI_registers QUADSPI;
 564:src/sys/devices.h **** 
 565:src/sys/devices.h **** extern volatile struct DCMI_registers DCMI;
 566:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_FS;
 567:src/sys/devices.h **** 
 568:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_HS;
 569:src/sys/devices.h **** extern volatile struct DMA_registers DMA2;
 570:src/sys/devices.h **** extern volatile struct DMA_registers DMA1;
 571:src/sys/devices.h **** extern uint32_t BKPSRAM[1024];
 572:src/sys/devices.h **** extern volatile struct FLASH_registers FLASH;
 573:src/sys/devices.h **** extern volatile struct RCC_registers RCC;
 574:src/sys/devices.h **** extern volatile struct CRC_registers CRC;
 575:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOH;
 576:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOG;
 577:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOF;
 578:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOE;
 579:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOD;
 580:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOC;
 581:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOB;
 582:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOA;
 583:src/sys/devices.h **** 
 584:src/sys/devices.h **** extern volatile struct SAI_registers SAI2;
 585:src/sys/devices.h **** extern volatile struct SAI_registers SAI1;
 586:src/sys/devices.h **** 
 587:src/sys/devices.h **** extern volatile struct TIMx_registers TIM11;
 588:src/sys/devices.h **** extern volatile struct TIMx_registers TIM10;
 589:src/sys/devices.h **** extern volatile struct TIMx_registers TIM9;
 590:src/sys/devices.h **** extern volatile struct EXTI_registers EXTI;
 591:src/sys/devices.h **** extern volatile struct SYSCFG_registers SYSCFG;
 592:src/sys/devices.h **** extern volatile struct SPI_registers SPI4;
 593:src/sys/devices.h **** extern volatile struct SPI_registers SPI1;
 594:src/sys/devices.h **** extern volatile struct SDIO_registers SDMMC;
 595:src/sys/devices.h **** extern volatile struct ADCx_registers ADC1;
 596:src/sys/devices.h **** extern volatile struct ADCx_registers ADC2;
 597:src/sys/devices.h **** extern volatile struct ADCx_registers ADC3;
 598:src/sys/devices.h **** extern volatile struct ADC_common_registers ADC_common;
 599:src/sys/devices.h **** extern volatile struct USART_registers USART6;
 600:src/sys/devices.h **** extern volatile struct USART_registers USART1;
 601:src/sys/devices.h **** extern volatile struct TIMx_registers TIM8;
 602:src/sys/devices.h **** extern volatile struct TIMx_registers TIM1;
 603:src/sys/devices.h **** 
 604:src/sys/devices.h **** extern volatile struct DAC_registers DAC;
 605:src/sys/devices.h **** extern volatile struct PWR_registers PWR;
 606:src/sys/devices.h **** extern volatile struct HDMI_CEC_registers HDMI_CEC;
 607:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN2;
 608:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN1;
 609:src/sys/devices.h **** extern volatile struct FMPI2C_registers FMPI2C1;
 610:src/sys/devices.h **** extern volatile struct I2C_registers I2C3;
 611:src/sys/devices.h **** extern volatile struct I2C_registers I2C2;
 612:src/sys/devices.h **** extern volatile struct I2C_registers I2C1;
 613:src/sys/devices.h **** extern volatile struct USART_registers UART5;
 614:src/sys/devices.h **** extern volatile struct USART_registers UART4;
 615:src/sys/devices.h **** extern volatile struct USART_registers USART3;
 616:src/sys/devices.h **** extern volatile struct USART_registers USART2;
 617:src/sys/devices.h **** extern volatile struct SPDIF_RX_registers SPDIF_RX;
 618:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI3_I2S3;
 619:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI2_I2S2;
 620:src/sys/devices.h **** extern volatile struct IWDG_registers IWDG;
 621:src/sys/devices.h **** extern volatile struct WWDG_registers WWDG;
 622:src/sys/devices.h **** extern volatile struct RTC_registers RTC_BKP;
 623:src/sys/devices.h **** extern volatile struct TIMx_registers TIM14;
 624:src/sys/devices.h **** extern volatile struct TIMx_registers TIM13;
 625:src/sys/devices.h **** extern volatile struct TIMx_registers TIM12;
 626:src/sys/devices.h **** extern volatile struct TIMx_registers TIM7;
 627:src/sys/devices.h **** extern volatile struct TIMx_registers TIM6;
 628:src/sys/devices.h **** extern volatile struct TIMx_registers TIM5;
 629:src/sys/devices.h **** extern volatile struct TIMx_registers TIM4;
 630:src/sys/devices.h **** extern volatile struct TIMx_registers TIM3;
 631:src/sys/devices.h **** extern volatile struct TIMx_registers TIM2;
 632:src/sys/devices.h **** 
 633:src/sys/devices.h **** #define __set_bit(_w,_i) ((_w)|=(1<<(_i)))
 634:src/sys/devices.h **** #define __clr_bit(_w,_i) ((_w) &= ~(1<<(_i)))
 635:src/sys/devices.h **** #define __really_inline__ static inline __attribute__((always_inline)) 
 636:src/sys/devices.h **** #define __sync __DSB
 637:src/sys/devices.h **** 
 638:src/sys/devices.h **** #define __declare_device_control(name,bus,bus_bit) \
 639:src/sys/devices.h ****   void __really_inline__ enable_##name() { \
 640:src/sys/devices.h ****     __set_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 641:src/sys/devices.h ****   void __really_inline__ low_power_enable_##name() { \
 642:src/sys/devices.h ****     __set_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 643:src/sys/devices.h ****   void __really_inline__ disable_##name() { \
 644:src/sys/devices.h ****     __clr_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 645:src/sys/devices.h ****   void __really_inline__ low_power_disable_## name() { \
 646:src/sys/devices.h ****     __clr_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 647:src/sys/devices.h ****   void __really_inline__ reset_##name() { \
 648:src/sys/devices.h ****     __set_bit(RCC.bus##RSTR,bus_bit); __sync(); } \
 649:src/sys/devices.h **** \
 650:src/sys/devices.h **** 
 651:src/sys/devices.h **** /* __declare_device_control(FMC,AHB3,0) FMC not available in LQFP64 package */
 652:src/sys/devices.h **** __declare_device_control(QUADSPI,AHB3,1)
 653:src/sys/devices.h **** 
 654:src/sys/devices.h **** __declare_device_control(DCMI,AHB2,0)
 655:src/sys/devices.h **** __declare_device_control(USB_OTG_FS,AHB2,7)
 656:src/sys/devices.h **** 
 657:src/sys/devices.h **** __declare_device_control(USB_OTG_HS,AHB1,29)
 658:src/sys/devices.h **** __declare_device_control(DMA2,AHB1,22)
 659:src/sys/devices.h **** __declare_device_control(DMA1,AHB1,21)
 660:src/sys/devices.h **** __declare_device_control(CRC,AHB1,12)
 661:src/sys/devices.h **** __declare_device_control(GPIOH,AHB1,7)
 662:src/sys/devices.h **** __declare_device_control(GPIOG,AHB1,6)
 663:src/sys/devices.h **** __declare_device_control(GPIOF,AHB1,5)
 664:src/sys/devices.h **** __declare_device_control(GPIOE,AHB1,4)
 665:src/sys/devices.h **** __declare_device_control(GPIOD,AHB1,3)
 666:src/sys/devices.h **** __declare_device_control(GPIOC,AHB1,2)
 667:src/sys/devices.h **** __declare_device_control(GPIOB,AHB1,1)
 668:src/sys/devices.h **** __declare_device_control(GPIOA,AHB1,0)
 301              		.loc 3 668 0
 302 0104 114B     		ldr	r3, .L33
 303 0106 1A6B     		ldr	r2, [r3, #48]
 304 0108 42F00102 		orr	r2, r2, #1
 305 010c 1A63     		str	r2, [r3, #48]
 306              	.LBB20:
 307              	.LBB21:
 308              		.loc 2 428 0
 309              		.syntax unified
 310              	@ 428 "src/sys/cmsis_gcc.h" 1
 311 010e BFF34F8F 		dsb 0xF
 312              	@ 0 "" 2
 313              		.thumb
 314              		.syntax unified
 315              	.LBE21:
 316              	.LBE20:
 317              	.LBE19:
 318              	.LBE18:
 319              	.LBB22:
 320              	.LBB23:
 666:src/sys/devices.h **** __declare_device_control(GPIOB,AHB1,1)
 321              		.loc 3 666 0
 322 0112 1A6B     		ldr	r2, [r3, #48]
 323 0114 42F00402 		orr	r2, r2, #4
 324 0118 1A63     		str	r2, [r3, #48]
 325              	.LBB24:
 326              	.LBB25:
 327              		.loc 2 428 0
 328              		.syntax unified
 329              	@ 428 "src/sys/cmsis_gcc.h" 1
 330 011a BFF34F8F 		dsb 0xF
 331              	@ 0 "" 2
 332              		.thumb
 333              		.syntax unified
 334              	.LBE25:
 335              	.LBE24:
 336              	.LBE23:
 337              	.LBE22:
  52:src/sys/clock.c **** 
  53:src/sys/clock.c ****   enable_GPIOA();
  54:src/sys/clock.c ****   enable_GPIOC();
  55:src/sys/clock.c **** 
  56:src/sys/clock.c ****   /* setup PA8,PC9 alternate function : MCO1 */
  57:src/sys/clock.c ****   /* AFRH8=0; */
  58:src/sys/clock.c ****   GPIOA.AFRH &= ~0x0000000f;
 338              		.loc 1 58 0
 339 011e 0C49     		ldr	r1, .L33+4
  59:src/sys/clock.c ****   GPIOC.AFRH &= ~0x000000f0;
 340              		.loc 1 59 0
 341 0120 0C4A     		ldr	r2, .L33+8
  58:src/sys/clock.c ****   GPIOC.AFRH &= ~0x000000f0;
 342              		.loc 1 58 0
 343 0122 4B6A     		ldr	r3, [r1, #36]
 344 0124 23F00F03 		bic	r3, r3, #15
 345 0128 4B62     		str	r3, [r1, #36]
 346              		.loc 1 59 0
 347 012a 536A     		ldr	r3, [r2, #36]
 348 012c 23F0F003 		bic	r3, r3, #240
 349 0130 5362     		str	r3, [r2, #36]
  60:src/sys/clock.c **** 
  61:src/sys/clock.c ****   /* switch PA8,PC9 to alternate function mode */
  62:src/sys/clock.c ****   /* MODERx=2; */
  63:src/sys/clock.c ****   GPIOA.MODER = 
  64:src/sys/clock.c ****     (GPIOA.MODER & ~(3<<16)) | (2<<16);
 350              		.loc 1 64 0
 351 0132 0B68     		ldr	r3, [r1]
 352 0134 23F44033 		bic	r3, r3, #196608
 353 0138 43F40033 		orr	r3, r3, #131072
  63:src/sys/clock.c ****     (GPIOA.MODER & ~(3<<16)) | (2<<16);
 354              		.loc 1 63 0
 355 013c 0B60     		str	r3, [r1]
  65:src/sys/clock.c ****   GPIOC.MODER = 
  66:src/sys/clock.c ****     (GPIOC.MODER & ~(3<<18)) | (2<<18);
 356              		.loc 1 66 0
 357 013e 1368     		ldr	r3, [r2]
 358 0140 23F44023 		bic	r3, r3, #786432
 359 0144 43F40023 		orr	r3, r3, #524288
  65:src/sys/clock.c ****   GPIOC.MODER = 
 360              		.loc 1 65 0
 361 0148 1360     		str	r3, [r2]
 362 014a 7047     		bx	lr
 363              	.L34:
 364              		.align	2
 365              	.L33:
 366 014c 00000000 		.word	RCC
 367 0150 00000000 		.word	GPIOA
 368 0154 00000000 		.word	GPIOC
 369              		.cfi_endproc
 370              	.LFE397:
 371              		.size	enable_MCO_GPIO, .-enable_MCO_GPIO
 372              		.align	1
 373              		.global	get_PLL_PCLK
 374              		.thumb
 375              		.thumb_func
 376              		.type	get_PLL_PCLK, %function
 377              	get_PLL_PCLK:
 378              	.LFB398:
  67:src/sys/clock.c **** }
  68:src/sys/clock.c **** 
  69:src/sys/clock.c **** uint32_t get_PLL_PCLK() {
 379              		.loc 1 69 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383              		@ link register save eliminated.
  70:src/sys/clock.c ****   uint32_t pllcfgr=RCC.PLLCFGR;
 384              		.loc 1 70 0
 385 0158 0A4B     		ldr	r3, .L38
 386 015a 5B68     		ldr	r3, [r3, #4]
 387              	.LVL27:
  71:src/sys/clock.c ****   uint32_t 
  72:src/sys/clock.c ****     M=(pllcfgr>>0)&0x3f,
  73:src/sys/clock.c ****     N=(pllcfgr>>6)&0x1ff,
  74:src/sys/clock.c ****     P=((pllcfgr>>16)&0x3)*2+2;
  75:src/sys/clock.c ****   PLLSRC SRC=(pllcfgr>>22)&0x1;
  76:src/sys/clock.c ****   if (SRC==PLLSRC_HSI) {
 388              		.loc 1 76 0
 389 015c 5A02     		lsls	r2, r3, #9
 390 015e 0ED4     		bmi	.L37
  77:src/sys/clock.c ****     return (HSI_FREQ*MHz/M*N/P);
 391              		.loc 1 77 0
 392 0160 C3F38811 		ubfx	r1, r3, #6, #9
 393 0164 03F03F00 		and	r0, r3, #63
 394              	.LVL28:
 395 0168 C3F30143 		ubfx	r3, r3, #16, #2
 396              	.LVL29:
 397 016c 0133     		adds	r3, r3, #1
 398 016e 064A     		ldr	r2, .L38+4
 399 0170 B2FBF0F0 		udiv	r0, r2, r0
 400              	.LVL30:
 401 0174 5B00     		lsls	r3, r3, #1
 402 0176 4843     		muls	r0, r1, r0
 403 0178 B0FBF3F0 		udiv	r0, r0, r3
 404 017c 7047     		bx	lr
 405              	.LVL31:
 406              	.L37:
  78:src/sys/clock.c ****   } else {
  79:src/sys/clock.c ****     return (HSE_FREQ*MHz/M*N/P);
 407              		.loc 1 79 0
 408 017e 0020     		movs	r0, #0
  80:src/sys/clock.c ****   }
  81:src/sys/clock.c **** }
 409              		.loc 1 81 0
 410 0180 7047     		bx	lr
 411              	.L39:
 412 0182 00BF     		.align	2
 413              	.L38:
 414 0184 00000000 		.word	RCC
 415 0188 0024F400 		.word	16000000
 416              		.cfi_endproc
 417              	.LFE398:
 418              		.size	get_PLL_PCLK, .-get_PLL_PCLK
 419              		.align	1
 420              		.global	get_PLL_RCLK
 421              		.thumb
 422              		.thumb_func
 423              		.type	get_PLL_RCLK, %function
 424              	get_PLL_RCLK:
 425              	.LFB399:
  82:src/sys/clock.c **** 
  83:src/sys/clock.c **** uint32_t get_PLL_RCLK() {
 426              		.loc 1 83 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 0
 429              		@ frame_needed = 0, uses_anonymous_args = 0
 430              		@ link register save eliminated.
  84:src/sys/clock.c ****   uint32_t pllcfgr=RCC.PLLCFGR;
 431              		.loc 1 84 0
 432 018c 094B     		ldr	r3, .L43
 433 018e 5968     		ldr	r1, [r3, #4]
 434              	.LVL32:
  85:src/sys/clock.c ****   uint32_t 
  86:src/sys/clock.c ****     M=(pllcfgr>>0)&0x3f,
  87:src/sys/clock.c ****     N=(pllcfgr>>6)&0x1ff,
  88:src/sys/clock.c ****     R=(pllcfgr>>28)&0x7;
  89:src/sys/clock.c ****   PLLSRC SRC=(pllcfgr>>22)&0x1;
  90:src/sys/clock.c ****   if (SRC==PLLSRC_HSI) {
 435              		.loc 1 90 0
 436 0190 4B02     		lsls	r3, r1, #9
  91:src/sys/clock.c ****     return (HSI_FREQ*MHz/M*N/R);
 437              		.loc 1 91 0
 438 0192 5FBF     		itttt	pl
 439 0194 C1F38810 		ubfxpl	r0, r1, #6, #9
 440 0198 01F03F03 		andpl	r3, r1, #63
 441 019c 064A     		ldrpl	r2, .L43+4
 442 019e B2FBF3F3 		udivpl	r3, r2, r3
 443 01a2 5DBF     		ittte	pl
 444 01a4 4343     		mulpl	r3, r3, r0
 445 01a6 C1F30270 		ubfxpl	r0, r1, #28, #3
 446 01aa B3FBF0F0 		udivpl	r0, r3, r0
  92:src/sys/clock.c ****   } else {
  93:src/sys/clock.c ****     return (HSE_FREQ*MHz/M*N/R);
 447              		.loc 1 93 0
 448 01ae 0020     		movmi	r0, #0
  94:src/sys/clock.c ****   }
  95:src/sys/clock.c **** }
 449              		.loc 1 95 0
 450 01b0 7047     		bx	lr
 451              	.L44:
 452 01b2 00BF     		.align	2
 453              	.L43:
 454 01b4 00000000 		.word	RCC
 455 01b8 0024F400 		.word	16000000
 456              		.cfi_endproc
 457              	.LFE399:
 458              		.size	get_PLL_RCLK, .-get_PLL_RCLK
 459              		.align	1
 460              		.global	get_SYSCLK
 461              		.thumb
 462              		.thumb_func
 463              		.type	get_SYSCLK, %function
 464              	get_SYSCLK:
 465              	.LFB400:
  96:src/sys/clock.c **** 
  97:src/sys/clock.c **** uint32_t get_SYSCLK() {
 466              		.loc 1 97 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470              		@ link register save eliminated.
  98:src/sys/clock.c ****   SW SWS=(RCC.CFGR>>2)&0x3;
 471              		.loc 1 98 0
 472 01bc 084B     		ldr	r3, .L54
 473 01be 9B68     		ldr	r3, [r3, #8]
 474              	.LVL33:
  99:src/sys/clock.c ****   switch (SWS) {
 475              		.loc 1 99 0
 476 01c0 C3F38103 		ubfx	r3, r3, #2, #2
 477              	.LVL34:
 478 01c4 022B     		cmp	r3, #2
 479 01c6 03D0     		beq	.L47
 480 01c8 032B     		cmp	r3, #3
 481 01ca 03D1     		bne	.L53
 100:src/sys/clock.c ****   case SW_HSI:
 101:src/sys/clock.c ****     return (HSI_FREQ*MHz);
 102:src/sys/clock.c ****   case SW_HSE:
 103:src/sys/clock.c ****     return (HSE_FREQ*MHz);
 104:src/sys/clock.c ****   case SW_PLL_P:
 105:src/sys/clock.c ****     return get_PLL_PCLK();
 106:src/sys/clock.c ****   case SW_PLL_R:
 107:src/sys/clock.c ****     return get_PLL_RCLK();
 482              		.loc 1 107 0
 483 01cc FFF7FEBF 		b	get_PLL_RCLK
 484              	.LVL35:
 485              	.L47:
 105:src/sys/clock.c ****   case SW_PLL_R:
 486              		.loc 1 105 0
 487 01d0 FFF7FEBF 		b	get_PLL_PCLK
 488              	.LVL36:
 489              	.L53:
  99:src/sys/clock.c ****   switch (SWS) {
 490              		.loc 1 99 0
 491 01d4 012B     		cmp	r3, #1
 101:src/sys/clock.c ****   case SW_HSE:
 492              		.loc 1 101 0
 493 01d6 0348     		ldr	r0, .L54+4
 494 01d8 08BF     		it	eq
 495 01da 0020     		moveq	r0, #0
 108:src/sys/clock.c ****   }
 109:src/sys/clock.c ****   return 0;
 110:src/sys/clock.c **** }
 496              		.loc 1 110 0
 497 01dc 7047     		bx	lr
 498              	.L55:
 499 01de 00BF     		.align	2
 500              	.L54:
 501 01e0 00000000 		.word	RCC
 502 01e4 0024F400 		.word	16000000
 503              		.cfi_endproc
 504              	.LFE400:
 505              		.size	get_SYSCLK, .-get_SYSCLK
 506              		.align	1
 507              		.global	get_AHBCLK
 508              		.thumb
 509              		.thumb_func
 510              		.type	get_AHBCLK, %function
 511              	get_AHBCLK:
 512              	.LFB401:
 111:src/sys/clock.c **** 
 112:src/sys/clock.c **** uint32_t get_AHBCLK() {
 513              		.loc 1 112 0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 0
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 113:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 517              		.loc 1 113 0
 518 01e8 074B     		ldr	r3, .L58
 112:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 519              		.loc 1 112 0
 520 01ea 10B5     		push	{r4, lr}
 521              		.cfi_def_cfa_offset 8
 522              		.cfi_offset 4, -8
 523              		.cfi_offset 14, -4
 524              		.loc 1 113 0
 525 01ec 9C68     		ldr	r4, [r3, #8]
 526              	.LVL37:
 114:src/sys/clock.c ****   if ((cfgr&(1<<7))==0) {
 527              		.loc 1 114 0
 528 01ee 2306     		lsls	r3, r4, #24
 529 01f0 03D4     		bmi	.L57
 115:src/sys/clock.c ****     return (get_SYSCLK());
 116:src/sys/clock.c ****   } else {
 117:src/sys/clock.c ****     return(get_SYSCLK() >> (((cfgr>>4)&0x7)+1));
 118:src/sys/clock.c ****   } 
 119:src/sys/clock.c **** }
 530              		.loc 1 119 0
 531 01f2 BDE81040 		pop	{r4, lr}
 532              		.cfi_remember_state
 533              		.cfi_restore 14
 534              		.cfi_restore 4
 535              		.cfi_def_cfa_offset 0
 536              	.LVL38:
 115:src/sys/clock.c ****     return (get_SYSCLK());
 537              		.loc 1 115 0
 538 01f6 FFF7FEBF 		b	get_SYSCLK
 539              	.LVL39:
 540              	.L57:
 541              		.cfi_restore_state
 117:src/sys/clock.c ****   } 
 542              		.loc 1 117 0
 543 01fa FFF7FEFF 		bl	get_SYSCLK
 544              	.LVL40:
 545 01fe C4F30214 		ubfx	r4, r4, #4, #3
 546              	.LVL41:
 547 0202 0134     		adds	r4, r4, #1
 548              		.loc 1 119 0
 549 0204 E040     		lsrs	r0, r0, r4
 550 0206 10BD     		pop	{r4, pc}
 551              	.L59:
 552              		.align	2
 553              	.L58:
 554 0208 00000000 		.word	RCC
 555              		.cfi_endproc
 556              	.LFE401:
 557              		.size	get_AHBCLK, .-get_AHBCLK
 558              		.align	1
 559              		.global	get_APB1CLK
 560              		.thumb
 561              		.thumb_func
 562              		.type	get_APB1CLK, %function
 563              	get_APB1CLK:
 564              	.LFB402:
 120:src/sys/clock.c **** 
 121:src/sys/clock.c **** uint32_t get_APB1CLK() {
 565              		.loc 1 121 0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 0
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 122:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 569              		.loc 1 122 0
 570 020c 074B     		ldr	r3, .L62
 121:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 571              		.loc 1 121 0
 572 020e 10B5     		push	{r4, lr}
 573              		.cfi_def_cfa_offset 8
 574              		.cfi_offset 4, -8
 575              		.cfi_offset 14, -4
 576              		.loc 1 122 0
 577 0210 9C68     		ldr	r4, [r3, #8]
 578              	.LVL42:
 123:src/sys/clock.c ****   if ((cfgr&(1<<12))==0) {
 579              		.loc 1 123 0
 580 0212 E304     		lsls	r3, r4, #19
 581 0214 03D4     		bmi	.L61
 124:src/sys/clock.c ****     return (get_AHBCLK());
 125:src/sys/clock.c ****   } else {
 126:src/sys/clock.c ****     return(get_AHBCLK() >> (((cfgr>>10)&0x3)+1));
 127:src/sys/clock.c ****   } 
 128:src/sys/clock.c **** }
 582              		.loc 1 128 0
 583 0216 BDE81040 		pop	{r4, lr}
 584              		.cfi_remember_state
 585              		.cfi_restore 14
 586              		.cfi_restore 4
 587              		.cfi_def_cfa_offset 0
 588              	.LVL43:
 124:src/sys/clock.c ****     return (get_AHBCLK());
 589              		.loc 1 124 0
 590 021a FFF7FEBF 		b	get_AHBCLK
 591              	.LVL44:
 592              	.L61:
 593              		.cfi_restore_state
 126:src/sys/clock.c ****   } 
 594              		.loc 1 126 0
 595 021e FFF7FEFF 		bl	get_AHBCLK
 596              	.LVL45:
 597 0222 C4F38124 		ubfx	r4, r4, #10, #2
 598              	.LVL46:
 599 0226 0134     		adds	r4, r4, #1
 600              		.loc 1 128 0
 601 0228 E040     		lsrs	r0, r0, r4
 602 022a 10BD     		pop	{r4, pc}
 603              	.L63:
 604              		.align	2
 605              	.L62:
 606 022c 00000000 		.word	RCC
 607              		.cfi_endproc
 608              	.LFE402:
 609              		.size	get_APB1CLK, .-get_APB1CLK
 610              		.align	1
 611              		.global	get_APB2CLK
 612              		.thumb
 613              		.thumb_func
 614              		.type	get_APB2CLK, %function
 615              	get_APB2CLK:
 616              	.LFB403:
 129:src/sys/clock.c **** 
 130:src/sys/clock.c **** uint32_t get_APB2CLK() {
 617              		.loc 1 130 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 131:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 621              		.loc 1 131 0
 622 0230 074B     		ldr	r3, .L66
 130:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 623              		.loc 1 130 0
 624 0232 10B5     		push	{r4, lr}
 625              		.cfi_def_cfa_offset 8
 626              		.cfi_offset 4, -8
 627              		.cfi_offset 14, -4
 628              		.loc 1 131 0
 629 0234 9C68     		ldr	r4, [r3, #8]
 630              	.LVL47:
 132:src/sys/clock.c ****   if ((cfgr&(1<<15))==0) {
 631              		.loc 1 132 0
 632 0236 2304     		lsls	r3, r4, #16
 633 0238 03D4     		bmi	.L65
 133:src/sys/clock.c ****     return (get_AHBCLK());
 134:src/sys/clock.c ****   } else {
 135:src/sys/clock.c ****     return(get_AHBCLK() >> (((cfgr>>13)&0x3)+1));
 136:src/sys/clock.c ****   } 
 137:src/sys/clock.c **** }
 634              		.loc 1 137 0
 635 023a BDE81040 		pop	{r4, lr}
 636              		.cfi_remember_state
 637              		.cfi_restore 14
 638              		.cfi_restore 4
 639              		.cfi_def_cfa_offset 0
 640              	.LVL48:
 133:src/sys/clock.c ****     return (get_AHBCLK());
 641              		.loc 1 133 0
 642 023e FFF7FEBF 		b	get_AHBCLK
 643              	.LVL49:
 644              	.L65:
 645              		.cfi_restore_state
 135:src/sys/clock.c ****   } 
 646              		.loc 1 135 0
 647 0242 FFF7FEFF 		bl	get_AHBCLK
 648              	.LVL50:
 649 0246 C4F34134 		ubfx	r4, r4, #13, #2
 650              	.LVL51:
 651 024a 0134     		adds	r4, r4, #1
 652              		.loc 1 137 0
 653 024c E040     		lsrs	r0, r0, r4
 654 024e 10BD     		pop	{r4, pc}
 655              	.L67:
 656              		.align	2
 657              	.L66:
 658 0250 00000000 		.word	RCC
 659              		.cfi_endproc
 660              	.LFE403:
 661              		.size	get_APB2CLK, .-get_APB2CLK
 662              		.align	1
 663              		.global	get_APB1TIMCLK
 664              		.thumb
 665              		.thumb_func
 666              		.type	get_APB1TIMCLK, %function
 667              	get_APB1TIMCLK:
 668              	.LFB404:
 138:src/sys/clock.c **** 
 139:src/sys/clock.c **** uint32_t get_APB1TIMCLK() {
 669              		.loc 1 139 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673 0254 08B5     		push	{r3, lr}
 674              		.cfi_def_cfa_offset 8
 675              		.cfi_offset 3, -8
 676              		.cfi_offset 14, -4
 140:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 677              		.loc 1 140 0
 678 0256 064B     		ldr	r3, .L70
 679 0258 9B68     		ldr	r3, [r3, #8]
 680              	.LVL52:
 141:src/sys/clock.c ****   if ((cfgr&(1<<12))==0) {
 681              		.loc 1 141 0
 682 025a DB04     		lsls	r3, r3, #19
 683              	.LVL53:
 684 025c 03D4     		bmi	.L69
 142:src/sys/clock.c ****     return (get_APB1CLK());
 143:src/sys/clock.c ****   } else {
 144:src/sys/clock.c ****     return (get_APB1CLK()*2);
 145:src/sys/clock.c ****   } 
 146:src/sys/clock.c **** }
 685              		.loc 1 146 0
 686 025e BDE80840 		pop	{r3, lr}
 687              		.cfi_remember_state
 688              		.cfi_restore 14
 689              		.cfi_restore 3
 690              		.cfi_def_cfa_offset 0
 142:src/sys/clock.c ****     return (get_APB1CLK());
 691              		.loc 1 142 0
 692 0262 FFF7FEBF 		b	get_APB1CLK
 693              	.LVL54:
 694              	.L69:
 695              		.cfi_restore_state
 144:src/sys/clock.c ****   } 
 696              		.loc 1 144 0
 697 0266 FFF7FEFF 		bl	get_APB1CLK
 698              	.LVL55:
 699              		.loc 1 146 0
 700 026a 4000     		lsls	r0, r0, #1
 701 026c 08BD     		pop	{r3, pc}
 702              	.L71:
 703 026e 00BF     		.align	2
 704              	.L70:
 705 0270 00000000 		.word	RCC
 706              		.cfi_endproc
 707              	.LFE404:
 708              		.size	get_APB1TIMCLK, .-get_APB1TIMCLK
 709              		.align	1
 710              		.global	get_APB2TIMCLK
 711              		.thumb
 712              		.thumb_func
 713              		.type	get_APB2TIMCLK, %function
 714              	get_APB2TIMCLK:
 715              	.LFB405:
 147:src/sys/clock.c **** 
 148:src/sys/clock.c **** uint32_t get_APB2TIMCLK() {
 716              		.loc 1 148 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 0, uses_anonymous_args = 0
 720 0274 08B5     		push	{r3, lr}
 721              		.cfi_def_cfa_offset 8
 722              		.cfi_offset 3, -8
 723              		.cfi_offset 14, -4
 149:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 724              		.loc 1 149 0
 725 0276 064B     		ldr	r3, .L74
 726 0278 9B68     		ldr	r3, [r3, #8]
 727              	.LVL56:
 150:src/sys/clock.c ****   if ((cfgr&(1<<15))==0) {
 728              		.loc 1 150 0
 729 027a 1B04     		lsls	r3, r3, #16
 730              	.LVL57:
 731 027c 03D4     		bmi	.L73
 151:src/sys/clock.c ****     return (get_APB2CLK());
 152:src/sys/clock.c ****   } else {
 153:src/sys/clock.c ****     return (get_APB2CLK()*2);
 154:src/sys/clock.c ****   } 
 155:src/sys/clock.c **** }
 732              		.loc 1 155 0
 733 027e BDE80840 		pop	{r3, lr}
 734              		.cfi_remember_state
 735              		.cfi_restore 14
 736              		.cfi_restore 3
 737              		.cfi_def_cfa_offset 0
 151:src/sys/clock.c ****     return (get_APB2CLK());
 738              		.loc 1 151 0
 739 0282 FFF7FEBF 		b	get_APB2CLK
 740              	.LVL58:
 741              	.L73:
 742              		.cfi_restore_state
 153:src/sys/clock.c ****   } 
 743              		.loc 1 153 0
 744 0286 FFF7FEFF 		bl	get_APB2CLK
 745              	.LVL59:
 746              		.loc 1 155 0
 747 028a 4000     		lsls	r0, r0, #1
 748 028c 08BD     		pop	{r3, pc}
 749              	.L75:
 750 028e 00BF     		.align	2
 751              	.L74:
 752 0290 00000000 		.word	RCC
 753              		.cfi_endproc
 754              	.LFE405:
 755              		.size	get_APB2TIMCLK, .-get_APB2TIMCLK
 756              	.Letext0:
 757              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 758              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 759              		.file 6 "src/sys/clock.h"
 760              		.section	.debug_info,"",%progbits
 761              	.Ldebug_info0:
 762 0000 1F080000 		.4byte	0x81f
 763 0004 0400     		.2byte	0x4
 764 0006 00000000 		.4byte	.Ldebug_abbrev0
 765 000a 04       		.byte	0x4
 766 000b 01       		.uleb128 0x1
 767 000c 05020000 		.4byte	.LASF110
 768 0010 0C       		.byte	0xc
 769 0011 80000000 		.4byte	.LASF111
 770 0015 98000000 		.4byte	.LASF112
 771 0019 00000000 		.4byte	.Ltext0
 772 001d 94020000 		.4byte	.Letext0-.Ltext0
 773 0021 00000000 		.4byte	.Ldebug_line0
 774 0025 02       		.uleb128 0x2
 775 0026 01       		.byte	0x1
 776 0027 06       		.byte	0x6
 777 0028 91040000 		.4byte	.LASF0
 778 002c 02       		.uleb128 0x2
 779 002d 01       		.byte	0x1
 780 002e 08       		.byte	0x8
 781 002f 49040000 		.4byte	.LASF1
 782 0033 02       		.uleb128 0x2
 783 0034 02       		.byte	0x2
 784 0035 05       		.byte	0x5
 785 0036 82030000 		.4byte	.LASF2
 786 003a 02       		.uleb128 0x2
 787 003b 02       		.byte	0x2
 788 003c 07       		.byte	0x7
 789 003d AC040000 		.4byte	.LASF3
 790 0041 03       		.uleb128 0x3
 791 0042 76000000 		.4byte	.LASF5
 792 0046 04       		.byte	0x4
 793 0047 3F       		.byte	0x3f
 794 0048 4C000000 		.4byte	0x4c
 795 004c 02       		.uleb128 0x2
 796 004d 04       		.byte	0x4
 797 004e 05       		.byte	0x5
 798 004f A2030000 		.4byte	.LASF4
 799 0053 03       		.uleb128 0x3
 800 0054 64040000 		.4byte	.LASF6
 801 0058 04       		.byte	0x4
 802 0059 41       		.byte	0x41
 803 005a 5E000000 		.4byte	0x5e
 804 005e 02       		.uleb128 0x2
 805 005f 04       		.byte	0x4
 806 0060 07       		.byte	0x7
 807 0061 12040000 		.4byte	.LASF7
 808 0065 02       		.uleb128 0x2
 809 0066 08       		.byte	0x8
 810 0067 05       		.byte	0x5
 811 0068 BA020000 		.4byte	.LASF8
 812 006c 02       		.uleb128 0x2
 813 006d 08       		.byte	0x8
 814 006e 07       		.byte	0x7
 815 006f 23010000 		.4byte	.LASF9
 816 0073 04       		.uleb128 0x4
 817 0074 04       		.byte	0x4
 818 0075 05       		.byte	0x5
 819 0076 696E7400 		.ascii	"int\000"
 820 007a 02       		.uleb128 0x2
 821 007b 04       		.byte	0x4
 822 007c 07       		.byte	0x7
 823 007d 5B000000 		.4byte	.LASF10
 824 0081 03       		.uleb128 0x3
 825 0082 36040000 		.4byte	.LASF11
 826 0086 05       		.byte	0x5
 827 0087 2C       		.byte	0x2c
 828 0088 41000000 		.4byte	0x41
 829 008c 03       		.uleb128 0x3
 830 008d E8000000 		.4byte	.LASF12
 831 0091 05       		.byte	0x5
 832 0092 30       		.byte	0x30
 833 0093 53000000 		.4byte	0x53
 834 0097 05       		.uleb128 0x5
 835 0098 01       		.byte	0x1
 836 0099 2C000000 		.4byte	0x2c
 837 009d 06       		.byte	0x6
 838 009e 07       		.byte	0x7
 839 009f B0000000 		.4byte	0xb0
 840 00a3 06       		.uleb128 0x6
 841 00a4 C6000000 		.4byte	.LASF13
 842 00a8 00       		.byte	0
 843 00a9 06       		.uleb128 0x6
 844 00aa BB000000 		.4byte	.LASF14
 845 00ae 01       		.byte	0x1
 846 00af 00       		.byte	0
 847 00b0 03       		.uleb128 0x3
 848 00b1 7B030000 		.4byte	.LASF15
 849 00b5 06       		.byte	0x6
 850 00b6 07       		.byte	0x7
 851 00b7 97000000 		.4byte	0x97
 852 00bb 05       		.uleb128 0x5
 853 00bc 01       		.byte	0x1
 854 00bd 2C000000 		.4byte	0x2c
 855 00c1 06       		.byte	0x6
 856 00c2 08       		.byte	0x8
 857 00c3 E0000000 		.4byte	0xe0
 858 00c7 06       		.uleb128 0x6
 859 00c8 75010000 		.4byte	.LASF16
 860 00cc 00       		.byte	0
 861 00cd 06       		.uleb128 0x6
 862 00ce 64010000 		.4byte	.LASF17
 863 00d2 01       		.byte	0x1
 864 00d3 06       		.uleb128 0x6
 865 00d4 20000000 		.4byte	.LASF18
 866 00d8 02       		.byte	0x2
 867 00d9 06       		.uleb128 0x6
 868 00da 29000000 		.4byte	.LASF19
 869 00de 03       		.byte	0x3
 870 00df 00       		.byte	0
 871 00e0 07       		.uleb128 0x7
 872 00e1 535700   		.ascii	"SW\000"
 873 00e4 06       		.byte	0x6
 874 00e5 08       		.byte	0x8
 875 00e6 BB000000 		.4byte	0xbb
 876 00ea 05       		.uleb128 0x5
 877 00eb 01       		.byte	0x1
 878 00ec 2C000000 		.4byte	0x2c
 879 00f0 06       		.byte	0x6
 880 00f1 09       		.byte	0x9
 881 00f2 0F010000 		.4byte	0x10f
 882 00f6 06       		.uleb128 0x6
 883 00f7 D1020000 		.4byte	.LASF20
 884 00fb 00       		.byte	0
 885 00fc 06       		.uleb128 0x6
 886 00fd 68000000 		.4byte	.LASF21
 887 0101 01       		.byte	0x1
 888 0102 06       		.uleb128 0x6
 889 0103 C8020000 		.4byte	.LASF22
 890 0107 02       		.byte	0x2
 891 0108 06       		.uleb128 0x6
 892 0109 0C010000 		.4byte	.LASF23
 893 010d 03       		.byte	0x3
 894 010e 00       		.byte	0
 895 010f 03       		.uleb128 0x3
 896 0110 53000000 		.4byte	.LASF24
 897 0114 06       		.byte	0x6
 898 0115 09       		.byte	0x9
 899 0116 EA000000 		.4byte	0xea
 900 011a 05       		.uleb128 0x5
 901 011b 01       		.byte	0x1
 902 011c 2C000000 		.4byte	0x2c
 903 0120 06       		.byte	0x6
 904 0121 0A       		.byte	0xa
 905 0122 3F010000 		.4byte	0x13f
 906 0126 06       		.uleb128 0x6
 907 0127 BF040000 		.4byte	.LASF25
 908 012b 00       		.byte	0
 909 012c 06       		.uleb128 0x6
 910 012d D9010000 		.4byte	.LASF26
 911 0131 01       		.byte	0x1
 912 0132 06       		.uleb128 0x6
 913 0133 D1000000 		.4byte	.LASF27
 914 0137 02       		.byte	0x2
 915 0138 06       		.uleb128 0x6
 916 0139 6F040000 		.4byte	.LASF28
 917 013d 03       		.byte	0x3
 918 013e 00       		.byte	0
 919 013f 03       		.uleb128 0x3
 920 0140 73030000 		.4byte	.LASF29
 921 0144 06       		.byte	0x6
 922 0145 0A       		.byte	0xa
 923 0146 1A010000 		.4byte	0x11a
 924 014a 02       		.uleb128 0x2
 925 014b 04       		.byte	0x4
 926 014c 07       		.byte	0x7
 927 014d 09040000 		.4byte	.LASF30
 928 0151 08       		.uleb128 0x8
 929 0152 DA000000 		.4byte	.LASF66
 930 0156 98       		.byte	0x98
 931 0157 03       		.byte	0x3
 932 0158 68       		.byte	0x68
 933 0159 25030000 		.4byte	0x325
 934 015d 09       		.uleb128 0x9
 935 015e 435200   		.ascii	"CR\000"
 936 0161 03       		.byte	0x3
 937 0162 69       		.byte	0x69
 938 0163 8C000000 		.4byte	0x8c
 939 0167 00       		.byte	0
 940 0168 0A       		.uleb128 0xa
 941 0169 EC030000 		.4byte	.LASF31
 942 016d 03       		.byte	0x3
 943 016e 6A       		.byte	0x6a
 944 016f 8C000000 		.4byte	0x8c
 945 0173 04       		.byte	0x4
 946 0174 0A       		.uleb128 0xa
 947 0175 D0030000 		.4byte	.LASF32
 948 0179 03       		.byte	0x3
 949 017a 6B       		.byte	0x6b
 950 017b 8C000000 		.4byte	0x8c
 951 017f 08       		.byte	0x8
 952 0180 09       		.uleb128 0x9
 953 0181 43495200 		.ascii	"CIR\000"
 954 0185 03       		.byte	0x3
 955 0186 6C       		.byte	0x6c
 956 0187 8C000000 		.4byte	0x8c
 957 018b 0C       		.byte	0xc
 958 018c 0A       		.uleb128 0xa
 959 018d F5040000 		.4byte	.LASF33
 960 0191 03       		.byte	0x3
 961 0192 6D       		.byte	0x6d
 962 0193 8C000000 		.4byte	0x8c
 963 0197 10       		.byte	0x10
 964 0198 0A       		.uleb128 0xa
 965 0199 5B030000 		.4byte	.LASF34
 966 019d 03       		.byte	0x3
 967 019e 6E       		.byte	0x6e
 968 019f 8C000000 		.4byte	0x8c
 969 01a3 14       		.byte	0x14
 970 01a4 0A       		.uleb128 0xa
 971 01a5 4F010000 		.4byte	.LASF35
 972 01a9 03       		.byte	0x3
 973 01aa 6F       		.byte	0x6f
 974 01ab 8C000000 		.4byte	0x8c
 975 01af 18       		.byte	0x18
 976 01b0 0A       		.uleb128 0xa
 977 01b1 93010000 		.4byte	.LASF36
 978 01b5 03       		.byte	0x3
 979 01b6 70       		.byte	0x70
 980 01b7 8C000000 		.4byte	0x8c
 981 01bb 1C       		.byte	0x1c
 982 01bc 0A       		.uleb128 0xa
 983 01bd 4A000000 		.4byte	.LASF37
 984 01c1 03       		.byte	0x3
 985 01c2 71       		.byte	0x71
 986 01c3 8C000000 		.4byte	0x8c
 987 01c7 20       		.byte	0x20
 988 01c8 0A       		.uleb128 0xa
 989 01c9 41000000 		.4byte	.LASF38
 990 01cd 03       		.byte	0x3
 991 01ce 72       		.byte	0x72
 992 01cf 8C000000 		.4byte	0x8c
 993 01d3 24       		.byte	0x24
 994 01d4 0A       		.uleb128 0xa
 995 01d5 AA010000 		.4byte	.LASF39
 996 01d9 03       		.byte	0x3
 997 01da 73       		.byte	0x73
 998 01db 8C000000 		.4byte	0x8c
 999 01df 28       		.byte	0x28
 1000 01e0 0A       		.uleb128 0xa
 1001 01e1 EC010000 		.4byte	.LASF40
 1002 01e5 03       		.byte	0x3
 1003 01e6 74       		.byte	0x74
 1004 01e7 8C000000 		.4byte	0x8c
 1005 01eb 2C       		.byte	0x2c
 1006 01ec 0A       		.uleb128 0xa
 1007 01ed 15010000 		.4byte	.LASF41
 1008 01f1 03       		.byte	0x3
 1009 01f2 75       		.byte	0x75
 1010 01f3 8C000000 		.4byte	0x8c
 1011 01f7 30       		.byte	0x30
 1012 01f8 0A       		.uleb128 0xa
 1013 01f9 2E040000 		.4byte	.LASF42
 1014 01fd 03       		.byte	0x3
 1015 01fe 76       		.byte	0x76
 1016 01ff 8C000000 		.4byte	0x8c
 1017 0203 34       		.byte	0x34
 1018 0204 0A       		.uleb128 0xa
 1019 0205 A2010000 		.4byte	.LASF43
 1020 0209 03       		.byte	0x3
 1021 020a 77       		.byte	0x77
 1022 020b 8C000000 		.4byte	0x8c
 1023 020f 38       		.byte	0x38
 1024 0210 0A       		.uleb128 0xa
 1025 0211 AB020000 		.4byte	.LASF44
 1026 0215 03       		.byte	0x3
 1027 0216 78       		.byte	0x78
 1028 0217 8C000000 		.4byte	0x8c
 1029 021b 3C       		.byte	0x3c
 1030 021c 0A       		.uleb128 0xa
 1031 021d 18000000 		.4byte	.LASF45
 1032 0221 03       		.byte	0x3
 1033 0222 79       		.byte	0x79
 1034 0223 8C000000 		.4byte	0x8c
 1035 0227 40       		.byte	0x40
 1036 0228 0A       		.uleb128 0xa
 1037 0229 29030000 		.4byte	.LASF46
 1038 022d 03       		.byte	0x3
 1039 022e 7A       		.byte	0x7a
 1040 022f 8C000000 		.4byte	0x8c
 1041 0233 44       		.byte	0x44
 1042 0234 0A       		.uleb128 0xa
 1043 0235 EF020000 		.4byte	.LASF47
 1044 0239 03       		.byte	0x3
 1045 023a 7B       		.byte	0x7b
 1046 023b 8C000000 		.4byte	0x8c
 1047 023f 48       		.byte	0x48
 1048 0240 0A       		.uleb128 0xa
 1049 0241 0E030000 		.4byte	.LASF48
 1050 0245 03       		.byte	0x3
 1051 0246 7C       		.byte	0x7c
 1052 0247 8C000000 		.4byte	0x8c
 1053 024b 4C       		.byte	0x4c
 1054 024c 0A       		.uleb128 0xa
 1055 024d 3A030000 		.4byte	.LASF49
 1056 0251 03       		.byte	0x3
 1057 0252 7D       		.byte	0x7d
 1058 0253 8C000000 		.4byte	0x8c
 1059 0257 50       		.byte	0x50
 1060 0258 0A       		.uleb128 0xa
 1061 0259 E1040000 		.4byte	.LASF50
 1062 025d 03       		.byte	0x3
 1063 025e 7E       		.byte	0x7e
 1064 025f 8C000000 		.4byte	0x8c
 1065 0263 54       		.byte	0x54
 1066 0264 0A       		.uleb128 0xa
 1067 0265 FF030000 		.4byte	.LASF51
 1068 0269 03       		.byte	0x3
 1069 026a 7F       		.byte	0x7f
 1070 026b 8C000000 		.4byte	0x8c
 1071 026f 58       		.byte	0x58
 1072 0270 0A       		.uleb128 0xa
 1073 0271 4C030000 		.4byte	.LASF52
 1074 0275 03       		.byte	0x3
 1075 0276 80       		.byte	0x80
 1076 0277 8C000000 		.4byte	0x8c
 1077 027b 5C       		.byte	0x5c
 1078 027c 0A       		.uleb128 0xa
 1079 027d E5020000 		.4byte	.LASF53
 1080 0281 03       		.byte	0x3
 1081 0282 81       		.byte	0x81
 1082 0283 8C000000 		.4byte	0x8c
 1083 0287 60       		.byte	0x60
 1084 0288 0A       		.uleb128 0xa
 1085 0289 37000000 		.4byte	.LASF54
 1086 028d 03       		.byte	0x3
 1087 028e 82       		.byte	0x82
 1088 028f 8C000000 		.4byte	0x8c
 1089 0293 64       		.byte	0x64
 1090 0294 0A       		.uleb128 0xa
 1091 0295 64030000 		.4byte	.LASF55
 1092 0299 03       		.byte	0x3
 1093 029a 83       		.byte	0x83
 1094 029b 8C000000 		.4byte	0x8c
 1095 029f 68       		.byte	0x68
 1096 02a0 0A       		.uleb128 0xa
 1097 02a1 AB030000 		.4byte	.LASF56
 1098 02a5 03       		.byte	0x3
 1099 02a6 84       		.byte	0x84
 1100 02a7 8C000000 		.4byte	0x8c
 1101 02ab 6C       		.byte	0x6c
 1102 02ac 0A       		.uleb128 0xa
 1103 02ad 71000000 		.4byte	.LASF57
 1104 02b1 03       		.byte	0x3
 1105 02b2 85       		.byte	0x85
 1106 02b3 8C000000 		.4byte	0x8c
 1107 02b7 70       		.byte	0x70
 1108 02b8 09       		.uleb128 0x9
 1109 02b9 43535200 		.ascii	"CSR\000"
 1110 02bd 03       		.byte	0x3
 1111 02be 86       		.byte	0x86
 1112 02bf 8C000000 		.4byte	0x8c
 1113 02c3 74       		.byte	0x74
 1114 02c4 0A       		.uleb128 0xa
 1115 02c5 BA030000 		.4byte	.LASF58
 1116 02c9 03       		.byte	0x3
 1117 02ca 87       		.byte	0x87
 1118 02cb 8C000000 		.4byte	0x8c
 1119 02cf 78       		.byte	0x78
 1120 02d0 0A       		.uleb128 0xa
 1121 02d1 D5030000 		.4byte	.LASF59
 1122 02d5 03       		.byte	0x3
 1123 02d6 88       		.byte	0x88
 1124 02d7 8C000000 		.4byte	0x8c
 1125 02db 7C       		.byte	0x7c
 1126 02dc 0A       		.uleb128 0xa
 1127 02dd 1D010000 		.4byte	.LASF60
 1128 02e1 03       		.byte	0x3
 1129 02e2 89       		.byte	0x89
 1130 02e3 8C000000 		.4byte	0x8c
 1131 02e7 80       		.byte	0x80
 1132 02e8 0A       		.uleb128 0xa
 1133 02e9 3E040000 		.4byte	.LASF61
 1134 02ed 03       		.byte	0x3
 1135 02ee 8A       		.byte	0x8a
 1136 02ef 8C000000 		.4byte	0x8c
 1137 02f3 84       		.byte	0x84
 1138 02f4 0A       		.uleb128 0xa
 1139 02f5 00000000 		.4byte	.LASF62
 1140 02f9 03       		.byte	0x3
 1141 02fa 8B       		.byte	0x8b
 1142 02fb 8C000000 		.4byte	0x8c
 1143 02ff 88       		.byte	0x88
 1144 0300 0A       		.uleb128 0xa
 1145 0301 10000000 		.4byte	.LASF63
 1146 0305 03       		.byte	0x3
 1147 0306 8C       		.byte	0x8c
 1148 0307 8C000000 		.4byte	0x8c
 1149 030b 8C       		.byte	0x8c
 1150 030c 0A       		.uleb128 0xa
 1151 030d 03050000 		.4byte	.LASF64
 1152 0311 03       		.byte	0x3
 1153 0312 8D       		.byte	0x8d
 1154 0313 8C000000 		.4byte	0x8c
 1155 0317 90       		.byte	0x90
 1156 0318 0A       		.uleb128 0xa
 1157 0319 31030000 		.4byte	.LASF65
 1158 031d 03       		.byte	0x3
 1159 031e 8E       		.byte	0x8e
 1160 031f 8C000000 		.4byte	0x8c
 1161 0323 94       		.byte	0x94
 1162 0324 00       		.byte	0
 1163 0325 08       		.uleb128 0x8
 1164 0326 C8040000 		.4byte	.LASF67
 1165 032a 28       		.byte	0x28
 1166 032b 03       		.byte	0x3
 1167 032c 92       		.byte	0x92
 1168 032d AA030000 		.4byte	0x3aa
 1169 0331 0A       		.uleb128 0xa
 1170 0332 3A010000 		.4byte	.LASF68
 1171 0336 03       		.byte	0x3
 1172 0337 93       		.byte	0x93
 1173 0338 8C000000 		.4byte	0x8c
 1174 033c 00       		.byte	0
 1175 033d 0A       		.uleb128 0xa
 1176 033e C9030000 		.4byte	.LASF69
 1177 0342 03       		.byte	0x3
 1178 0343 94       		.byte	0x94
 1179 0344 8C000000 		.4byte	0x8c
 1180 0348 04       		.byte	0x4
 1181 0349 0A       		.uleb128 0xa
 1182 034a 44030000 		.4byte	.LASF70
 1183 034e 03       		.byte	0x3
 1184 034f 95       		.byte	0x95
 1185 0350 8C000000 		.4byte	0x8c
 1186 0354 08       		.byte	0x8
 1187 0355 0A       		.uleb128 0xa
 1188 0356 C6010000 		.4byte	.LASF71
 1189 035a 03       		.byte	0x3
 1190 035b 96       		.byte	0x96
 1191 035c 8C000000 		.4byte	0x8c
 1192 0360 0C       		.byte	0xc
 1193 0361 09       		.uleb128 0x9
 1194 0362 49445200 		.ascii	"IDR\000"
 1195 0366 03       		.byte	0x3
 1196 0367 97       		.byte	0x97
 1197 0368 8C000000 		.4byte	0x8c
 1198 036c 10       		.byte	0x10
 1199 036d 09       		.uleb128 0x9
 1200 036e 4F445200 		.ascii	"ODR\000"
 1201 0372 03       		.byte	0x3
 1202 0373 98       		.byte	0x98
 1203 0374 8C000000 		.4byte	0x8c
 1204 0378 14       		.byte	0x14
 1205 0379 0A       		.uleb128 0xa
 1206 037a 32000000 		.4byte	.LASF72
 1207 037e 03       		.byte	0x3
 1208 037f 99       		.byte	0x99
 1209 0380 8C000000 		.4byte	0x8c
 1210 0384 18       		.byte	0x18
 1211 0385 0A       		.uleb128 0xa
 1212 0386 FE040000 		.4byte	.LASF73
 1213 038a 03       		.byte	0x3
 1214 038b 9A       		.byte	0x9a
 1215 038c 8C000000 		.4byte	0x8c
 1216 0390 1C       		.byte	0x1c
 1217 0391 0A       		.uleb128 0xa
 1218 0392 4A010000 		.4byte	.LASF74
 1219 0396 03       		.byte	0x3
 1220 0397 9B       		.byte	0x9b
 1221 0398 8C000000 		.4byte	0x8c
 1222 039c 20       		.byte	0x20
 1223 039d 0A       		.uleb128 0xa
 1224 039e 40010000 		.4byte	.LASF75
 1225 03a2 03       		.byte	0x3
 1226 03a3 9C       		.byte	0x9c
 1227 03a4 8C000000 		.4byte	0x8c
 1228 03a8 24       		.byte	0x24
 1229 03a9 00       		.byte	0
 1230 03aa 0B       		.uleb128 0xb
 1231 03ab B5000000 		.4byte	.LASF113
 1232 03af 02       		.byte	0x2
 1233 03b0 AA01     		.2byte	0x1aa
 1234 03b2 03       		.byte	0x3
 1235 03b3 0C       		.uleb128 0xc
 1236 03b4 CC010000 		.4byte	.LASF76
 1237 03b8 03       		.byte	0x3
 1238 03b9 9A02     		.2byte	0x29a
 1239 03bb 03       		.byte	0x3
 1240 03bc 0C       		.uleb128 0xc
 1241 03bd B9010000 		.4byte	.LASF77
 1242 03c1 03       		.byte	0x3
 1243 03c2 9C02     		.2byte	0x29c
 1244 03c4 03       		.byte	0x3
 1245 03c5 0D       		.uleb128 0xd
 1246 03c6 FB010000 		.4byte	.LASF78
 1247 03ca 01       		.byte	0x1
 1248 03cb 05       		.byte	0x5
 1249 03cc 00000000 		.4byte	.LFB392
 1250 03d0 3C000000 		.4byte	.LFE392-.LFB392
 1251 03d4 01       		.uleb128 0x1
 1252 03d5 9C       		.byte	0x9c
 1253 03d6 2B040000 		.4byte	0x42b
 1254 03da 0E       		.uleb128 0xe
 1255 03db 53524300 		.ascii	"SRC\000"
 1256 03df 01       		.byte	0x1
 1257 03e0 05       		.byte	0x5
 1258 03e1 B0000000 		.4byte	0xb0
 1259 03e5 00000000 		.4byte	.LLST0
 1260 03e9 0E       		.uleb128 0xe
 1261 03ea 4D00     		.ascii	"M\000"
 1262 03ec 01       		.byte	0x1
 1263 03ed 06       		.byte	0x6
 1264 03ee 81000000 		.4byte	0x81
 1265 03f2 21000000 		.4byte	.LLST1
 1266 03f6 0E       		.uleb128 0xe
 1267 03f7 4E00     		.ascii	"N\000"
 1268 03f9 01       		.byte	0x1
 1269 03fa 06       		.byte	0x6
 1270 03fb 81000000 		.4byte	0x81
 1271 03ff 42000000 		.4byte	.LLST2
 1272 0403 0E       		.uleb128 0xe
 1273 0404 5000     		.ascii	"P\000"
 1274 0406 01       		.byte	0x1
 1275 0407 06       		.byte	0x6
 1276 0408 81000000 		.4byte	0x81
 1277 040c 63000000 		.4byte	.LLST3
 1278 0410 0E       		.uleb128 0xe
 1279 0411 5100     		.ascii	"Q\000"
 1280 0413 01       		.byte	0x1
 1281 0414 06       		.byte	0x6
 1282 0415 81000000 		.4byte	0x81
 1283 0419 84000000 		.4byte	.LLST4
 1284 041d 0E       		.uleb128 0xe
 1285 041e 5200     		.ascii	"R\000"
 1286 0420 01       		.byte	0x1
 1287 0421 06       		.byte	0x6
 1288 0422 81000000 		.4byte	0x81
 1289 0426 A4000000 		.4byte	.LLST5
 1290 042a 00       		.byte	0
 1291 042b 0F       		.uleb128 0xf
 1292 042c 99030000 		.4byte	.LASF96
 1293 0430 01       		.byte	0x1
 1294 0431 13       		.byte	0x13
 1295 0432 3C000000 		.4byte	.LFB393
 1296 0436 14000000 		.4byte	.LFE393-.LFB393
 1297 043a 01       		.uleb128 0x1
 1298 043b 9C       		.byte	0x9c
 1299 043c 50040000 		.4byte	0x450
 1300 0440 10       		.uleb128 0x10
 1301 0441 AA030000 		.4byte	0x3aa
 1302 0445 46000000 		.4byte	.LBB16
 1303 0449 0A000000 		.4byte	.LBE16-.LBB16
 1304 044d 01       		.byte	0x1
 1305 044e 16       		.byte	0x16
 1306 044f 00       		.byte	0
 1307 0450 0D       		.uleb128 0xd
 1308 0451 88010000 		.4byte	.LASF79
 1309 0455 01       		.byte	0x1
 1310 0456 19       		.byte	0x19
 1311 0457 50000000 		.4byte	.LFB394
 1312 045b 20000000 		.4byte	.LFE394-.LFB394
 1313 045f 01       		.uleb128 0x1
 1314 0460 9C       		.byte	0x9c
 1315 0461 73040000 		.4byte	0x473
 1316 0465 11       		.uleb128 0x11
 1317 0466 53524300 		.ascii	"SRC\000"
 1318 046a 01       		.byte	0x1
 1319 046b 19       		.byte	0x19
 1320 046c E0000000 		.4byte	0xe0
 1321 0470 01       		.uleb128 0x1
 1322 0471 50       		.byte	0x50
 1323 0472 00       		.byte	0
 1324 0473 0D       		.uleb128 0xd
 1325 0474 F1000000 		.4byte	.LASF80
 1326 0478 01       		.byte	0x1
 1327 0479 1E       		.byte	0x1e
 1328 047a 70000000 		.4byte	.LFB395
 1329 047e 48000000 		.4byte	.LFE395-.LFB395
 1330 0482 01       		.uleb128 0x1
 1331 0483 9C       		.byte	0x9c
 1332 0484 E1040000 		.4byte	0x4e1
 1333 0488 12       		.uleb128 0x12
 1334 0489 EB040000 		.4byte	.LASF81
 1335 048d 01       		.byte	0x1
 1336 048e 1E       		.byte	0x1e
 1337 048f 8C000000 		.4byte	0x8c
 1338 0493 C4000000 		.4byte	.LLST6
 1339 0497 12       		.uleb128 0x12
 1340 0498 6B010000 		.4byte	.LASF82
 1341 049c 01       		.byte	0x1
 1342 049d 1F       		.byte	0x1f
 1343 049e 8C000000 		.4byte	0x8c
 1344 04a2 F2000000 		.4byte	.LLST7
 1345 04a6 12       		.uleb128 0x12
 1346 04a7 D7040000 		.4byte	.LASF83
 1347 04ab 01       		.byte	0x1
 1348 04ac 20       		.byte	0x20
 1349 04ad 8C000000 		.4byte	0x8c
 1350 04b1 20010000 		.4byte	.LLST8
 1351 04b5 13       		.uleb128 0x13
 1352 04b6 45010000 		.4byte	.LASF84
 1353 04ba 01       		.byte	0x1
 1354 04bb 21       		.byte	0x21
 1355 04bc 8C000000 		.4byte	0x8c
 1356 04c0 01       		.uleb128 0x1
 1357 04c1 50       		.byte	0x50
 1358 04c2 14       		.uleb128 0x14
 1359 04c3 7C010000 		.4byte	.LASF85
 1360 04c7 01       		.byte	0x1
 1361 04c8 22       		.byte	0x22
 1362 04c9 8C000000 		.4byte	0x8c
 1363 04cd 4E010000 		.4byte	.LLST9
 1364 04d1 14       		.uleb128 0x14
 1365 04d2 82010000 		.4byte	.LASF86
 1366 04d6 01       		.byte	0x1
 1367 04d7 23       		.byte	0x23
 1368 04d8 8C000000 		.4byte	0x8c
 1369 04dc 61010000 		.4byte	.LLST10
 1370 04e0 00       		.byte	0
 1371 04e1 0D       		.uleb128 0xd
 1372 04e2 E4030000 		.4byte	.LASF87
 1373 04e6 01       		.byte	0x1
 1374 04e7 29       		.byte	0x29
 1375 04e8 B8000000 		.4byte	.LFB396
 1376 04ec 4C000000 		.4byte	.LFE396-.LFB396
 1377 04f0 01       		.uleb128 0x1
 1378 04f1 9C       		.byte	0x9c
 1379 04f2 6B050000 		.4byte	0x56b
 1380 04f6 12       		.uleb128 0x12
 1381 04f7 E2010000 		.4byte	.LASF88
 1382 04fb 01       		.byte	0x1
 1383 04fc 29       		.byte	0x29
 1384 04fd 0F010000 		.4byte	0x10f
 1385 0501 74010000 		.4byte	.LLST11
 1386 0505 12       		.uleb128 0x12
 1387 0506 8C040000 		.4byte	.LASF89
 1388 050a 01       		.byte	0x1
 1389 050b 29       		.byte	0x29
 1390 050c 8C000000 		.4byte	0x8c
 1391 0510 95010000 		.4byte	.LLST12
 1392 0514 12       		.uleb128 0x12
 1393 0515 E7010000 		.4byte	.LASF90
 1394 0519 01       		.byte	0x1
 1395 051a 29       		.byte	0x29
 1396 051b 3F010000 		.4byte	0x13f
 1397 051f B6010000 		.4byte	.LLST13
 1398 0523 12       		.uleb128 0x12
 1399 0524 8F020000 		.4byte	.LASF91
 1400 0528 01       		.byte	0x1
 1401 0529 29       		.byte	0x29
 1402 052a 8C000000 		.4byte	0x8c
 1403 052e D7010000 		.4byte	.LLST14
 1404 0532 14       		.uleb128 0x14
 1405 0533 24040000 		.4byte	.LASF92
 1406 0537 01       		.byte	0x1
 1407 0538 2A       		.byte	0x2a
 1408 0539 8C000000 		.4byte	0x8c
 1409 053d F8010000 		.4byte	.LLST15
 1410 0541 13       		.uleb128 0x13
 1411 0542 29040000 		.4byte	.LASF93
 1412 0546 01       		.byte	0x1
 1413 0547 2B       		.byte	0x2b
 1414 0548 8C000000 		.4byte	0x8c
 1415 054c 01       		.uleb128 0x1
 1416 054d 52       		.byte	0x52
 1417 054e 13       		.uleb128 0x13
 1418 054f 84040000 		.4byte	.LASF94
 1419 0553 01       		.byte	0x1
 1420 0554 2C       		.byte	0x2c
 1421 0555 8C000000 		.4byte	0x8c
 1422 0559 01       		.uleb128 0x1
 1423 055a 51       		.byte	0x51
 1424 055b 14       		.uleb128 0x14
 1425 055c 94020000 		.4byte	.LASF95
 1426 0560 01       		.byte	0x1
 1427 0561 2D       		.byte	0x2d
 1428 0562 8C000000 		.4byte	0x8c
 1429 0566 0B020000 		.4byte	.LLST16
 1430 056a 00       		.byte	0
 1431 056b 0F       		.uleb128 0xf
 1432 056c FE020000 		.4byte	.LASF97
 1433 0570 01       		.byte	0x1
 1434 0571 33       		.byte	0x33
 1435 0572 04010000 		.4byte	.LFB397
 1436 0576 54000000 		.4byte	.LFE397-.LFB397
 1437 057a 01       		.uleb128 0x1
 1438 057b 9C       		.byte	0x9c
 1439 057c C5050000 		.4byte	0x5c5
 1440 0580 15       		.uleb128 0x15
 1441 0581 BC030000 		.4byte	0x3bc
 1442 0585 04010000 		.4byte	.LBB18
 1443 0589 0E000000 		.4byte	.LBE18-.LBB18
 1444 058d 01       		.byte	0x1
 1445 058e 35       		.byte	0x35
 1446 058f A4050000 		.4byte	0x5a4
 1447 0593 16       		.uleb128 0x16
 1448 0594 AA030000 		.4byte	0x3aa
 1449 0598 0E010000 		.4byte	.LBB20
 1450 059c 04000000 		.4byte	.LBE20-.LBB20
 1451 05a0 03       		.byte	0x3
 1452 05a1 9C02     		.2byte	0x29c
 1453 05a3 00       		.byte	0
 1454 05a4 17       		.uleb128 0x17
 1455 05a5 B3030000 		.4byte	0x3b3
 1456 05a9 12010000 		.4byte	.LBB22
 1457 05ad 0C000000 		.4byte	.LBE22-.LBB22
 1458 05b1 01       		.byte	0x1
 1459 05b2 36       		.byte	0x36
 1460 05b3 16       		.uleb128 0x16
 1461 05b4 AA030000 		.4byte	0x3aa
 1462 05b8 1A010000 		.4byte	.LBB24
 1463 05bc 04000000 		.4byte	.LBE24-.LBB24
 1464 05c0 03       		.byte	0x3
 1465 05c1 9A02     		.2byte	0x29a
 1466 05c3 00       		.byte	0
 1467 05c4 00       		.byte	0
 1468 05c5 18       		.uleb128 0x18
 1469 05c6 8C030000 		.4byte	.LASF98
 1470 05ca 01       		.byte	0x1
 1471 05cb 45       		.byte	0x45
 1472 05cc 8C000000 		.4byte	0x8c
 1473 05d0 58010000 		.4byte	.LFB398
 1474 05d4 34000000 		.4byte	.LFE398-.LFB398
 1475 05d8 01       		.uleb128 0x1
 1476 05d9 9C       		.byte	0x9c
 1477 05da 24060000 		.4byte	0x624
 1478 05de 14       		.uleb128 0x14
 1479 05df 90000000 		.4byte	.LASF99
 1480 05e3 01       		.byte	0x1
 1481 05e4 46       		.byte	0x46
 1482 05e5 8C000000 		.4byte	0x8c
 1483 05e9 1E020000 		.4byte	.LLST17
 1484 05ed 19       		.uleb128 0x19
 1485 05ee 4D00     		.ascii	"M\000"
 1486 05f0 01       		.byte	0x1
 1487 05f1 48       		.byte	0x48
 1488 05f2 8C000000 		.4byte	0x8c
 1489 05f6 3C020000 		.4byte	.LLST18
 1490 05fa 19       		.uleb128 0x19
 1491 05fb 4E00     		.ascii	"N\000"
 1492 05fd 01       		.byte	0x1
 1493 05fe 49       		.byte	0x49
 1494 05ff 8C000000 		.4byte	0x8c
 1495 0603 6F020000 		.4byte	.LLST19
 1496 0607 19       		.uleb128 0x19
 1497 0608 5000     		.ascii	"P\000"
 1498 060a 01       		.byte	0x1
 1499 060b 4A       		.byte	0x4a
 1500 060c 8C000000 		.4byte	0x8c
 1501 0610 9D020000 		.4byte	.LLST20
 1502 0614 19       		.uleb128 0x19
 1503 0615 53524300 		.ascii	"SRC\000"
 1504 0619 01       		.byte	0x1
 1505 061a 4B       		.byte	0x4b
 1506 061b B0000000 		.4byte	0xb0
 1507 061f CF020000 		.4byte	.LLST21
 1508 0623 00       		.byte	0
 1509 0624 18       		.uleb128 0x18
 1510 0625 57040000 		.4byte	.LASF100
 1511 0629 01       		.byte	0x1
 1512 062a 53       		.byte	0x53
 1513 062b 8C000000 		.4byte	0x8c
 1514 062f 8C010000 		.4byte	.LFB399
 1515 0633 30000000 		.4byte	.LFE399-.LFB399
 1516 0637 01       		.uleb128 0x1
 1517 0638 9C       		.byte	0x9c
 1518 0639 92060000 		.4byte	0x692
 1519 063d 13       		.uleb128 0x13
 1520 063e 90000000 		.4byte	.LASF99
 1521 0642 01       		.byte	0x1
 1522 0643 54       		.byte	0x54
 1523 0644 8C000000 		.4byte	0x8c
 1524 0648 01       		.uleb128 0x1
 1525 0649 51       		.byte	0x51
 1526 064a 1A       		.uleb128 0x1a
 1527 064b 4D00     		.ascii	"M\000"
 1528 064d 01       		.byte	0x1
 1529 064e 56       		.byte	0x56
 1530 064f 8C000000 		.4byte	0x8c
 1531 0653 06       		.uleb128 0x6
 1532 0654 71       		.byte	0x71
 1533 0655 00       		.sleb128 0
 1534 0656 08       		.byte	0x8
 1535 0657 3F       		.byte	0x3f
 1536 0658 1A       		.byte	0x1a
 1537 0659 9F       		.byte	0x9f
 1538 065a 1A       		.uleb128 0x1a
 1539 065b 4E00     		.ascii	"N\000"
 1540 065d 01       		.byte	0x1
 1541 065e 57       		.byte	0x57
 1542 065f 8C000000 		.4byte	0x8c
 1543 0663 09       		.uleb128 0x9
 1544 0664 71       		.byte	0x71
 1545 0665 00       		.sleb128 0
 1546 0666 36       		.byte	0x36
 1547 0667 25       		.byte	0x25
 1548 0668 0A       		.byte	0xa
 1549 0669 FF01     		.2byte	0x1ff
 1550 066b 1A       		.byte	0x1a
 1551 066c 9F       		.byte	0x9f
 1552 066d 1A       		.uleb128 0x1a
 1553 066e 5200     		.ascii	"R\000"
 1554 0670 01       		.byte	0x1
 1555 0671 58       		.byte	0x58
 1556 0672 8C000000 		.4byte	0x8c
 1557 0676 07       		.uleb128 0x7
 1558 0677 71       		.byte	0x71
 1559 0678 00       		.sleb128 0
 1560 0679 4C       		.byte	0x4c
 1561 067a 25       		.byte	0x25
 1562 067b 37       		.byte	0x37
 1563 067c 1A       		.byte	0x1a
 1564 067d 9F       		.byte	0x9f
 1565 067e 1A       		.uleb128 0x1a
 1566 067f 53524300 		.ascii	"SRC\000"
 1567 0683 01       		.byte	0x1
 1568 0684 59       		.byte	0x59
 1569 0685 B0000000 		.4byte	0xb0
 1570 0689 07       		.uleb128 0x7
 1571 068a 71       		.byte	0x71
 1572 068b 00       		.sleb128 0
 1573 068c 46       		.byte	0x46
 1574 068d 25       		.byte	0x25
 1575 068e 31       		.byte	0x31
 1576 068f 1A       		.byte	0x1a
 1577 0690 9F       		.byte	0x9f
 1578 0691 00       		.byte	0
 1579 0692 18       		.uleb128 0x18
 1580 0693 DA020000 		.4byte	.LASF101
 1581 0697 01       		.byte	0x1
 1582 0698 61       		.byte	0x61
 1583 0699 8C000000 		.4byte	0x8c
 1584 069d BC010000 		.4byte	.LFB400
 1585 06a1 2C000000 		.4byte	.LFE400-.LFB400
 1586 06a5 01       		.uleb128 0x1
 1587 06a6 9C       		.byte	0x9c
 1588 06a7 CD060000 		.4byte	0x6cd
 1589 06ab 19       		.uleb128 0x19
 1590 06ac 53575300 		.ascii	"SWS\000"
 1591 06b0 01       		.byte	0x1
 1592 06b1 62       		.byte	0x62
 1593 06b2 E0000000 		.4byte	0xe0
 1594 06b6 F9020000 		.4byte	.LLST22
 1595 06ba 1B       		.uleb128 0x1b
 1596 06bb D0010000 		.4byte	.LVL35
 1597 06bf 24060000 		.4byte	0x624
 1598 06c3 1B       		.uleb128 0x1b
 1599 06c4 D4010000 		.4byte	.LVL36
 1600 06c8 C5050000 		.4byte	0x5c5
 1601 06cc 00       		.byte	0
 1602 06cd 18       		.uleb128 0x18
 1603 06ce F4030000 		.4byte	.LASF102
 1604 06d2 01       		.byte	0x1
 1605 06d3 70       		.byte	0x70
 1606 06d4 8C000000 		.4byte	0x8c
 1607 06d8 E8010000 		.4byte	.LFB401
 1608 06dc 24000000 		.4byte	.LFE401-.LFB401
 1609 06e0 01       		.uleb128 0x1
 1610 06e1 9C       		.byte	0x9c
 1611 06e2 08070000 		.4byte	0x708
 1612 06e6 14       		.uleb128 0x14
 1613 06e7 0B000000 		.4byte	.LASF103
 1614 06eb 01       		.byte	0x1
 1615 06ec 71       		.byte	0x71
 1616 06ed 8C000000 		.4byte	0x8c
 1617 06f1 12030000 		.4byte	.LLST23
 1618 06f5 1B       		.uleb128 0x1b
 1619 06f6 FA010000 		.4byte	.LVL39
 1620 06fa 92060000 		.4byte	0x692
 1621 06fe 1C       		.uleb128 0x1c
 1622 06ff FE010000 		.4byte	.LVL40
 1623 0703 92060000 		.4byte	0x692
 1624 0707 00       		.byte	0
 1625 0708 18       		.uleb128 0x18
 1626 0709 58010000 		.4byte	.LASF104
 1627 070d 01       		.byte	0x1
 1628 070e 79       		.byte	0x79
 1629 070f 8C000000 		.4byte	0x8c
 1630 0713 0C020000 		.4byte	.LFB402
 1631 0717 24000000 		.4byte	.LFE402-.LFB402
 1632 071b 01       		.uleb128 0x1
 1633 071c 9C       		.byte	0x9c
 1634 071d 43070000 		.4byte	0x743
 1635 0721 14       		.uleb128 0x14
 1636 0722 0B000000 		.4byte	.LASF103
 1637 0726 01       		.byte	0x1
 1638 0727 7A       		.byte	0x7a
 1639 0728 8C000000 		.4byte	0x8c
 1640 072c 30030000 		.4byte	.LLST24
 1641 0730 1B       		.uleb128 0x1b
 1642 0731 1E020000 		.4byte	.LVL44
 1643 0735 CD060000 		.4byte	0x6cd
 1644 0739 1C       		.uleb128 0x1c
 1645 073a 22020000 		.4byte	.LVL45
 1646 073e CD060000 		.4byte	0x6cd
 1647 0742 00       		.byte	0
 1648 0743 18       		.uleb128 0x18
 1649 0744 78040000 		.4byte	.LASF105
 1650 0748 01       		.byte	0x1
 1651 0749 82       		.byte	0x82
 1652 074a 8C000000 		.4byte	0x8c
 1653 074e 30020000 		.4byte	.LFB403
 1654 0752 24000000 		.4byte	.LFE403-.LFB403
 1655 0756 01       		.uleb128 0x1
 1656 0757 9C       		.byte	0x9c
 1657 0758 7E070000 		.4byte	0x77e
 1658 075c 14       		.uleb128 0x14
 1659 075d 0B000000 		.4byte	.LASF103
 1660 0761 01       		.byte	0x1
 1661 0762 83       		.byte	0x83
 1662 0763 8C000000 		.4byte	0x8c
 1663 0767 4E030000 		.4byte	.LLST25
 1664 076b 1B       		.uleb128 0x1b
 1665 076c 42020000 		.4byte	.LVL49
 1666 0770 CD060000 		.4byte	0x6cd
 1667 0774 1C       		.uleb128 0x1c
 1668 0775 46020000 		.4byte	.LVL50
 1669 0779 CD060000 		.4byte	0x6cd
 1670 077d 00       		.byte	0
 1671 077e 18       		.uleb128 0x18
 1672 077f 9D040000 		.4byte	.LASF106
 1673 0783 01       		.byte	0x1
 1674 0784 8B       		.byte	0x8b
 1675 0785 8C000000 		.4byte	0x8c
 1676 0789 54020000 		.4byte	.LFB404
 1677 078d 20000000 		.4byte	.LFE404-.LFB404
 1678 0791 01       		.uleb128 0x1
 1679 0792 9C       		.byte	0x9c
 1680 0793 B9070000 		.4byte	0x7b9
 1681 0797 14       		.uleb128 0x14
 1682 0798 0B000000 		.4byte	.LASF103
 1683 079c 01       		.byte	0x1
 1684 079d 8C       		.byte	0x8c
 1685 079e 8C000000 		.4byte	0x8c
 1686 07a2 6C030000 		.4byte	.LLST26
 1687 07a6 1B       		.uleb128 0x1b
 1688 07a7 66020000 		.4byte	.LVL54
 1689 07ab 08070000 		.4byte	0x708
 1690 07af 1C       		.uleb128 0x1c
 1691 07b0 6A020000 		.4byte	.LVL55
 1692 07b4 08070000 		.4byte	0x708
 1693 07b8 00       		.byte	0
 1694 07b9 18       		.uleb128 0x18
 1695 07ba 9C020000 		.4byte	.LASF107
 1696 07be 01       		.byte	0x1
 1697 07bf 94       		.byte	0x94
 1698 07c0 8C000000 		.4byte	0x8c
 1699 07c4 74020000 		.4byte	.LFB405
 1700 07c8 20000000 		.4byte	.LFE405-.LFB405
 1701 07cc 01       		.uleb128 0x1
 1702 07cd 9C       		.byte	0x9c
 1703 07ce F4070000 		.4byte	0x7f4
 1704 07d2 14       		.uleb128 0x14
 1705 07d3 0B000000 		.4byte	.LASF103
 1706 07d7 01       		.byte	0x1
 1707 07d8 95       		.byte	0x95
 1708 07d9 8C000000 		.4byte	0x8c
 1709 07dd 7F030000 		.4byte	.LLST27
 1710 07e1 1B       		.uleb128 0x1b
 1711 07e2 86020000 		.4byte	.LVL58
 1712 07e6 43070000 		.4byte	0x743
 1713 07ea 1C       		.uleb128 0x1c
 1714 07eb 8A020000 		.4byte	.LVL59
 1715 07ef 43070000 		.4byte	0x743
 1716 07f3 00       		.byte	0
 1717 07f4 1D       		.uleb128 0x1d
 1718 07f5 52434300 		.ascii	"RCC\000"
 1719 07f9 03       		.byte	0x3
 1720 07fa 3D02     		.2byte	0x23d
 1721 07fc 00080000 		.4byte	0x800
 1722 0800 1E       		.uleb128 0x1e
 1723 0801 51010000 		.4byte	0x151
 1724 0805 1F       		.uleb128 0x1f
 1725 0806 23030000 		.4byte	.LASF108
 1726 080a 03       		.byte	0x3
 1727 080b 4402     		.2byte	0x244
 1728 080d 11080000 		.4byte	0x811
 1729 0811 1E       		.uleb128 0x1e
 1730 0812 25030000 		.4byte	0x325
 1731 0816 1F       		.uleb128 0x1f
 1732 0817 1D030000 		.4byte	.LASF109
 1733 081b 03       		.byte	0x3
 1734 081c 4602     		.2byte	0x246
 1735 081e 11080000 		.4byte	0x811
 1736 0822 00       		.byte	0
 1737              		.section	.debug_abbrev,"",%progbits
 1738              	.Ldebug_abbrev0:
 1739 0000 01       		.uleb128 0x1
 1740 0001 11       		.uleb128 0x11
 1741 0002 01       		.byte	0x1
 1742 0003 25       		.uleb128 0x25
 1743 0004 0E       		.uleb128 0xe
 1744 0005 13       		.uleb128 0x13
 1745 0006 0B       		.uleb128 0xb
 1746 0007 03       		.uleb128 0x3
 1747 0008 0E       		.uleb128 0xe
 1748 0009 1B       		.uleb128 0x1b
 1749 000a 0E       		.uleb128 0xe
 1750 000b 11       		.uleb128 0x11
 1751 000c 01       		.uleb128 0x1
 1752 000d 12       		.uleb128 0x12
 1753 000e 06       		.uleb128 0x6
 1754 000f 10       		.uleb128 0x10
 1755 0010 17       		.uleb128 0x17
 1756 0011 00       		.byte	0
 1757 0012 00       		.byte	0
 1758 0013 02       		.uleb128 0x2
 1759 0014 24       		.uleb128 0x24
 1760 0015 00       		.byte	0
 1761 0016 0B       		.uleb128 0xb
 1762 0017 0B       		.uleb128 0xb
 1763 0018 3E       		.uleb128 0x3e
 1764 0019 0B       		.uleb128 0xb
 1765 001a 03       		.uleb128 0x3
 1766 001b 0E       		.uleb128 0xe
 1767 001c 00       		.byte	0
 1768 001d 00       		.byte	0
 1769 001e 03       		.uleb128 0x3
 1770 001f 16       		.uleb128 0x16
 1771 0020 00       		.byte	0
 1772 0021 03       		.uleb128 0x3
 1773 0022 0E       		.uleb128 0xe
 1774 0023 3A       		.uleb128 0x3a
 1775 0024 0B       		.uleb128 0xb
 1776 0025 3B       		.uleb128 0x3b
 1777 0026 0B       		.uleb128 0xb
 1778 0027 49       		.uleb128 0x49
 1779 0028 13       		.uleb128 0x13
 1780 0029 00       		.byte	0
 1781 002a 00       		.byte	0
 1782 002b 04       		.uleb128 0x4
 1783 002c 24       		.uleb128 0x24
 1784 002d 00       		.byte	0
 1785 002e 0B       		.uleb128 0xb
 1786 002f 0B       		.uleb128 0xb
 1787 0030 3E       		.uleb128 0x3e
 1788 0031 0B       		.uleb128 0xb
 1789 0032 03       		.uleb128 0x3
 1790 0033 08       		.uleb128 0x8
 1791 0034 00       		.byte	0
 1792 0035 00       		.byte	0
 1793 0036 05       		.uleb128 0x5
 1794 0037 04       		.uleb128 0x4
 1795 0038 01       		.byte	0x1
 1796 0039 0B       		.uleb128 0xb
 1797 003a 0B       		.uleb128 0xb
 1798 003b 49       		.uleb128 0x49
 1799 003c 13       		.uleb128 0x13
 1800 003d 3A       		.uleb128 0x3a
 1801 003e 0B       		.uleb128 0xb
 1802 003f 3B       		.uleb128 0x3b
 1803 0040 0B       		.uleb128 0xb
 1804 0041 01       		.uleb128 0x1
 1805 0042 13       		.uleb128 0x13
 1806 0043 00       		.byte	0
 1807 0044 00       		.byte	0
 1808 0045 06       		.uleb128 0x6
 1809 0046 28       		.uleb128 0x28
 1810 0047 00       		.byte	0
 1811 0048 03       		.uleb128 0x3
 1812 0049 0E       		.uleb128 0xe
 1813 004a 1C       		.uleb128 0x1c
 1814 004b 0B       		.uleb128 0xb
 1815 004c 00       		.byte	0
 1816 004d 00       		.byte	0
 1817 004e 07       		.uleb128 0x7
 1818 004f 16       		.uleb128 0x16
 1819 0050 00       		.byte	0
 1820 0051 03       		.uleb128 0x3
 1821 0052 08       		.uleb128 0x8
 1822 0053 3A       		.uleb128 0x3a
 1823 0054 0B       		.uleb128 0xb
 1824 0055 3B       		.uleb128 0x3b
 1825 0056 0B       		.uleb128 0xb
 1826 0057 49       		.uleb128 0x49
 1827 0058 13       		.uleb128 0x13
 1828 0059 00       		.byte	0
 1829 005a 00       		.byte	0
 1830 005b 08       		.uleb128 0x8
 1831 005c 13       		.uleb128 0x13
 1832 005d 01       		.byte	0x1
 1833 005e 03       		.uleb128 0x3
 1834 005f 0E       		.uleb128 0xe
 1835 0060 0B       		.uleb128 0xb
 1836 0061 0B       		.uleb128 0xb
 1837 0062 3A       		.uleb128 0x3a
 1838 0063 0B       		.uleb128 0xb
 1839 0064 3B       		.uleb128 0x3b
 1840 0065 0B       		.uleb128 0xb
 1841 0066 01       		.uleb128 0x1
 1842 0067 13       		.uleb128 0x13
 1843 0068 00       		.byte	0
 1844 0069 00       		.byte	0
 1845 006a 09       		.uleb128 0x9
 1846 006b 0D       		.uleb128 0xd
 1847 006c 00       		.byte	0
 1848 006d 03       		.uleb128 0x3
 1849 006e 08       		.uleb128 0x8
 1850 006f 3A       		.uleb128 0x3a
 1851 0070 0B       		.uleb128 0xb
 1852 0071 3B       		.uleb128 0x3b
 1853 0072 0B       		.uleb128 0xb
 1854 0073 49       		.uleb128 0x49
 1855 0074 13       		.uleb128 0x13
 1856 0075 38       		.uleb128 0x38
 1857 0076 0B       		.uleb128 0xb
 1858 0077 00       		.byte	0
 1859 0078 00       		.byte	0
 1860 0079 0A       		.uleb128 0xa
 1861 007a 0D       		.uleb128 0xd
 1862 007b 00       		.byte	0
 1863 007c 03       		.uleb128 0x3
 1864 007d 0E       		.uleb128 0xe
 1865 007e 3A       		.uleb128 0x3a
 1866 007f 0B       		.uleb128 0xb
 1867 0080 3B       		.uleb128 0x3b
 1868 0081 0B       		.uleb128 0xb
 1869 0082 49       		.uleb128 0x49
 1870 0083 13       		.uleb128 0x13
 1871 0084 38       		.uleb128 0x38
 1872 0085 0B       		.uleb128 0xb
 1873 0086 00       		.byte	0
 1874 0087 00       		.byte	0
 1875 0088 0B       		.uleb128 0xb
 1876 0089 2E       		.uleb128 0x2e
 1877 008a 00       		.byte	0
 1878 008b 03       		.uleb128 0x3
 1879 008c 0E       		.uleb128 0xe
 1880 008d 3A       		.uleb128 0x3a
 1881 008e 0B       		.uleb128 0xb
 1882 008f 3B       		.uleb128 0x3b
 1883 0090 05       		.uleb128 0x5
 1884 0091 27       		.uleb128 0x27
 1885 0092 19       		.uleb128 0x19
 1886 0093 20       		.uleb128 0x20
 1887 0094 0B       		.uleb128 0xb
 1888 0095 00       		.byte	0
 1889 0096 00       		.byte	0
 1890 0097 0C       		.uleb128 0xc
 1891 0098 2E       		.uleb128 0x2e
 1892 0099 00       		.byte	0
 1893 009a 03       		.uleb128 0x3
 1894 009b 0E       		.uleb128 0xe
 1895 009c 3A       		.uleb128 0x3a
 1896 009d 0B       		.uleb128 0xb
 1897 009e 3B       		.uleb128 0x3b
 1898 009f 05       		.uleb128 0x5
 1899 00a0 20       		.uleb128 0x20
 1900 00a1 0B       		.uleb128 0xb
 1901 00a2 00       		.byte	0
 1902 00a3 00       		.byte	0
 1903 00a4 0D       		.uleb128 0xd
 1904 00a5 2E       		.uleb128 0x2e
 1905 00a6 01       		.byte	0x1
 1906 00a7 3F       		.uleb128 0x3f
 1907 00a8 19       		.uleb128 0x19
 1908 00a9 03       		.uleb128 0x3
 1909 00aa 0E       		.uleb128 0xe
 1910 00ab 3A       		.uleb128 0x3a
 1911 00ac 0B       		.uleb128 0xb
 1912 00ad 3B       		.uleb128 0x3b
 1913 00ae 0B       		.uleb128 0xb
 1914 00af 27       		.uleb128 0x27
 1915 00b0 19       		.uleb128 0x19
 1916 00b1 11       		.uleb128 0x11
 1917 00b2 01       		.uleb128 0x1
 1918 00b3 12       		.uleb128 0x12
 1919 00b4 06       		.uleb128 0x6
 1920 00b5 40       		.uleb128 0x40
 1921 00b6 18       		.uleb128 0x18
 1922 00b7 9742     		.uleb128 0x2117
 1923 00b9 19       		.uleb128 0x19
 1924 00ba 01       		.uleb128 0x1
 1925 00bb 13       		.uleb128 0x13
 1926 00bc 00       		.byte	0
 1927 00bd 00       		.byte	0
 1928 00be 0E       		.uleb128 0xe
 1929 00bf 05       		.uleb128 0x5
 1930 00c0 00       		.byte	0
 1931 00c1 03       		.uleb128 0x3
 1932 00c2 08       		.uleb128 0x8
 1933 00c3 3A       		.uleb128 0x3a
 1934 00c4 0B       		.uleb128 0xb
 1935 00c5 3B       		.uleb128 0x3b
 1936 00c6 0B       		.uleb128 0xb
 1937 00c7 49       		.uleb128 0x49
 1938 00c8 13       		.uleb128 0x13
 1939 00c9 02       		.uleb128 0x2
 1940 00ca 17       		.uleb128 0x17
 1941 00cb 00       		.byte	0
 1942 00cc 00       		.byte	0
 1943 00cd 0F       		.uleb128 0xf
 1944 00ce 2E       		.uleb128 0x2e
 1945 00cf 01       		.byte	0x1
 1946 00d0 3F       		.uleb128 0x3f
 1947 00d1 19       		.uleb128 0x19
 1948 00d2 03       		.uleb128 0x3
 1949 00d3 0E       		.uleb128 0xe
 1950 00d4 3A       		.uleb128 0x3a
 1951 00d5 0B       		.uleb128 0xb
 1952 00d6 3B       		.uleb128 0x3b
 1953 00d7 0B       		.uleb128 0xb
 1954 00d8 11       		.uleb128 0x11
 1955 00d9 01       		.uleb128 0x1
 1956 00da 12       		.uleb128 0x12
 1957 00db 06       		.uleb128 0x6
 1958 00dc 40       		.uleb128 0x40
 1959 00dd 18       		.uleb128 0x18
 1960 00de 9742     		.uleb128 0x2117
 1961 00e0 19       		.uleb128 0x19
 1962 00e1 01       		.uleb128 0x1
 1963 00e2 13       		.uleb128 0x13
 1964 00e3 00       		.byte	0
 1965 00e4 00       		.byte	0
 1966 00e5 10       		.uleb128 0x10
 1967 00e6 1D       		.uleb128 0x1d
 1968 00e7 00       		.byte	0
 1969 00e8 31       		.uleb128 0x31
 1970 00e9 13       		.uleb128 0x13
 1971 00ea 11       		.uleb128 0x11
 1972 00eb 01       		.uleb128 0x1
 1973 00ec 12       		.uleb128 0x12
 1974 00ed 06       		.uleb128 0x6
 1975 00ee 58       		.uleb128 0x58
 1976 00ef 0B       		.uleb128 0xb
 1977 00f0 59       		.uleb128 0x59
 1978 00f1 0B       		.uleb128 0xb
 1979 00f2 00       		.byte	0
 1980 00f3 00       		.byte	0
 1981 00f4 11       		.uleb128 0x11
 1982 00f5 05       		.uleb128 0x5
 1983 00f6 00       		.byte	0
 1984 00f7 03       		.uleb128 0x3
 1985 00f8 08       		.uleb128 0x8
 1986 00f9 3A       		.uleb128 0x3a
 1987 00fa 0B       		.uleb128 0xb
 1988 00fb 3B       		.uleb128 0x3b
 1989 00fc 0B       		.uleb128 0xb
 1990 00fd 49       		.uleb128 0x49
 1991 00fe 13       		.uleb128 0x13
 1992 00ff 02       		.uleb128 0x2
 1993 0100 18       		.uleb128 0x18
 1994 0101 00       		.byte	0
 1995 0102 00       		.byte	0
 1996 0103 12       		.uleb128 0x12
 1997 0104 05       		.uleb128 0x5
 1998 0105 00       		.byte	0
 1999 0106 03       		.uleb128 0x3
 2000 0107 0E       		.uleb128 0xe
 2001 0108 3A       		.uleb128 0x3a
 2002 0109 0B       		.uleb128 0xb
 2003 010a 3B       		.uleb128 0x3b
 2004 010b 0B       		.uleb128 0xb
 2005 010c 49       		.uleb128 0x49
 2006 010d 13       		.uleb128 0x13
 2007 010e 02       		.uleb128 0x2
 2008 010f 17       		.uleb128 0x17
 2009 0110 00       		.byte	0
 2010 0111 00       		.byte	0
 2011 0112 13       		.uleb128 0x13
 2012 0113 34       		.uleb128 0x34
 2013 0114 00       		.byte	0
 2014 0115 03       		.uleb128 0x3
 2015 0116 0E       		.uleb128 0xe
 2016 0117 3A       		.uleb128 0x3a
 2017 0118 0B       		.uleb128 0xb
 2018 0119 3B       		.uleb128 0x3b
 2019 011a 0B       		.uleb128 0xb
 2020 011b 49       		.uleb128 0x49
 2021 011c 13       		.uleb128 0x13
 2022 011d 02       		.uleb128 0x2
 2023 011e 18       		.uleb128 0x18
 2024 011f 00       		.byte	0
 2025 0120 00       		.byte	0
 2026 0121 14       		.uleb128 0x14
 2027 0122 34       		.uleb128 0x34
 2028 0123 00       		.byte	0
 2029 0124 03       		.uleb128 0x3
 2030 0125 0E       		.uleb128 0xe
 2031 0126 3A       		.uleb128 0x3a
 2032 0127 0B       		.uleb128 0xb
 2033 0128 3B       		.uleb128 0x3b
 2034 0129 0B       		.uleb128 0xb
 2035 012a 49       		.uleb128 0x49
 2036 012b 13       		.uleb128 0x13
 2037 012c 02       		.uleb128 0x2
 2038 012d 17       		.uleb128 0x17
 2039 012e 00       		.byte	0
 2040 012f 00       		.byte	0
 2041 0130 15       		.uleb128 0x15
 2042 0131 1D       		.uleb128 0x1d
 2043 0132 01       		.byte	0x1
 2044 0133 31       		.uleb128 0x31
 2045 0134 13       		.uleb128 0x13
 2046 0135 11       		.uleb128 0x11
 2047 0136 01       		.uleb128 0x1
 2048 0137 12       		.uleb128 0x12
 2049 0138 06       		.uleb128 0x6
 2050 0139 58       		.uleb128 0x58
 2051 013a 0B       		.uleb128 0xb
 2052 013b 59       		.uleb128 0x59
 2053 013c 0B       		.uleb128 0xb
 2054 013d 01       		.uleb128 0x1
 2055 013e 13       		.uleb128 0x13
 2056 013f 00       		.byte	0
 2057 0140 00       		.byte	0
 2058 0141 16       		.uleb128 0x16
 2059 0142 1D       		.uleb128 0x1d
 2060 0143 00       		.byte	0
 2061 0144 31       		.uleb128 0x31
 2062 0145 13       		.uleb128 0x13
 2063 0146 11       		.uleb128 0x11
 2064 0147 01       		.uleb128 0x1
 2065 0148 12       		.uleb128 0x12
 2066 0149 06       		.uleb128 0x6
 2067 014a 58       		.uleb128 0x58
 2068 014b 0B       		.uleb128 0xb
 2069 014c 59       		.uleb128 0x59
 2070 014d 05       		.uleb128 0x5
 2071 014e 00       		.byte	0
 2072 014f 00       		.byte	0
 2073 0150 17       		.uleb128 0x17
 2074 0151 1D       		.uleb128 0x1d
 2075 0152 01       		.byte	0x1
 2076 0153 31       		.uleb128 0x31
 2077 0154 13       		.uleb128 0x13
 2078 0155 11       		.uleb128 0x11
 2079 0156 01       		.uleb128 0x1
 2080 0157 12       		.uleb128 0x12
 2081 0158 06       		.uleb128 0x6
 2082 0159 58       		.uleb128 0x58
 2083 015a 0B       		.uleb128 0xb
 2084 015b 59       		.uleb128 0x59
 2085 015c 0B       		.uleb128 0xb
 2086 015d 00       		.byte	0
 2087 015e 00       		.byte	0
 2088 015f 18       		.uleb128 0x18
 2089 0160 2E       		.uleb128 0x2e
 2090 0161 01       		.byte	0x1
 2091 0162 3F       		.uleb128 0x3f
 2092 0163 19       		.uleb128 0x19
 2093 0164 03       		.uleb128 0x3
 2094 0165 0E       		.uleb128 0xe
 2095 0166 3A       		.uleb128 0x3a
 2096 0167 0B       		.uleb128 0xb
 2097 0168 3B       		.uleb128 0x3b
 2098 0169 0B       		.uleb128 0xb
 2099 016a 49       		.uleb128 0x49
 2100 016b 13       		.uleb128 0x13
 2101 016c 11       		.uleb128 0x11
 2102 016d 01       		.uleb128 0x1
 2103 016e 12       		.uleb128 0x12
 2104 016f 06       		.uleb128 0x6
 2105 0170 40       		.uleb128 0x40
 2106 0171 18       		.uleb128 0x18
 2107 0172 9742     		.uleb128 0x2117
 2108 0174 19       		.uleb128 0x19
 2109 0175 01       		.uleb128 0x1
 2110 0176 13       		.uleb128 0x13
 2111 0177 00       		.byte	0
 2112 0178 00       		.byte	0
 2113 0179 19       		.uleb128 0x19
 2114 017a 34       		.uleb128 0x34
 2115 017b 00       		.byte	0
 2116 017c 03       		.uleb128 0x3
 2117 017d 08       		.uleb128 0x8
 2118 017e 3A       		.uleb128 0x3a
 2119 017f 0B       		.uleb128 0xb
 2120 0180 3B       		.uleb128 0x3b
 2121 0181 0B       		.uleb128 0xb
 2122 0182 49       		.uleb128 0x49
 2123 0183 13       		.uleb128 0x13
 2124 0184 02       		.uleb128 0x2
 2125 0185 17       		.uleb128 0x17
 2126 0186 00       		.byte	0
 2127 0187 00       		.byte	0
 2128 0188 1A       		.uleb128 0x1a
 2129 0189 34       		.uleb128 0x34
 2130 018a 00       		.byte	0
 2131 018b 03       		.uleb128 0x3
 2132 018c 08       		.uleb128 0x8
 2133 018d 3A       		.uleb128 0x3a
 2134 018e 0B       		.uleb128 0xb
 2135 018f 3B       		.uleb128 0x3b
 2136 0190 0B       		.uleb128 0xb
 2137 0191 49       		.uleb128 0x49
 2138 0192 13       		.uleb128 0x13
 2139 0193 02       		.uleb128 0x2
 2140 0194 18       		.uleb128 0x18
 2141 0195 00       		.byte	0
 2142 0196 00       		.byte	0
 2143 0197 1B       		.uleb128 0x1b
 2144 0198 898201   		.uleb128 0x4109
 2145 019b 00       		.byte	0
 2146 019c 11       		.uleb128 0x11
 2147 019d 01       		.uleb128 0x1
 2148 019e 9542     		.uleb128 0x2115
 2149 01a0 19       		.uleb128 0x19
 2150 01a1 31       		.uleb128 0x31
 2151 01a2 13       		.uleb128 0x13
 2152 01a3 00       		.byte	0
 2153 01a4 00       		.byte	0
 2154 01a5 1C       		.uleb128 0x1c
 2155 01a6 898201   		.uleb128 0x4109
 2156 01a9 00       		.byte	0
 2157 01aa 11       		.uleb128 0x11
 2158 01ab 01       		.uleb128 0x1
 2159 01ac 31       		.uleb128 0x31
 2160 01ad 13       		.uleb128 0x13
 2161 01ae 00       		.byte	0
 2162 01af 00       		.byte	0
 2163 01b0 1D       		.uleb128 0x1d
 2164 01b1 34       		.uleb128 0x34
 2165 01b2 00       		.byte	0
 2166 01b3 03       		.uleb128 0x3
 2167 01b4 08       		.uleb128 0x8
 2168 01b5 3A       		.uleb128 0x3a
 2169 01b6 0B       		.uleb128 0xb
 2170 01b7 3B       		.uleb128 0x3b
 2171 01b8 05       		.uleb128 0x5
 2172 01b9 49       		.uleb128 0x49
 2173 01ba 13       		.uleb128 0x13
 2174 01bb 3F       		.uleb128 0x3f
 2175 01bc 19       		.uleb128 0x19
 2176 01bd 3C       		.uleb128 0x3c
 2177 01be 19       		.uleb128 0x19
 2178 01bf 00       		.byte	0
 2179 01c0 00       		.byte	0
 2180 01c1 1E       		.uleb128 0x1e
 2181 01c2 35       		.uleb128 0x35
 2182 01c3 00       		.byte	0
 2183 01c4 49       		.uleb128 0x49
 2184 01c5 13       		.uleb128 0x13
 2185 01c6 00       		.byte	0
 2186 01c7 00       		.byte	0
 2187 01c8 1F       		.uleb128 0x1f
 2188 01c9 34       		.uleb128 0x34
 2189 01ca 00       		.byte	0
 2190 01cb 03       		.uleb128 0x3
 2191 01cc 0E       		.uleb128 0xe
 2192 01cd 3A       		.uleb128 0x3a
 2193 01ce 0B       		.uleb128 0xb
 2194 01cf 3B       		.uleb128 0x3b
 2195 01d0 05       		.uleb128 0x5
 2196 01d1 49       		.uleb128 0x49
 2197 01d2 13       		.uleb128 0x13
 2198 01d3 3F       		.uleb128 0x3f
 2199 01d4 19       		.uleb128 0x19
 2200 01d5 3C       		.uleb128 0x3c
 2201 01d6 19       		.uleb128 0x19
 2202 01d7 00       		.byte	0
 2203 01d8 00       		.byte	0
 2204 01d9 00       		.byte	0
 2205              		.section	.debug_loc,"",%progbits
 2206              	.Ldebug_loc0:
 2207              	.LLST0:
 2208 0000 00000000 		.4byte	.LVL0-.Ltext0
 2209 0004 12000000 		.4byte	.LVL2-.Ltext0
 2210 0008 0100     		.2byte	0x1
 2211 000a 50       		.byte	0x50
 2212 000b 12000000 		.4byte	.LVL2-.Ltext0
 2213 000f 3C000000 		.4byte	.LFE392-.Ltext0
 2214 0013 0400     		.2byte	0x4
 2215 0015 F3       		.byte	0xf3
 2216 0016 01       		.uleb128 0x1
 2217 0017 50       		.byte	0x50
 2218 0018 9F       		.byte	0x9f
 2219 0019 00000000 		.4byte	0
 2220 001d 00000000 		.4byte	0
 2221              	.LLST1:
 2222 0021 00000000 		.4byte	.LVL0-.Ltext0
 2223 0025 0E000000 		.4byte	.LVL1-.Ltext0
 2224 0029 0100     		.2byte	0x1
 2225 002b 51       		.byte	0x51
 2226 002c 0E000000 		.4byte	.LVL1-.Ltext0
 2227 0030 3C000000 		.4byte	.LFE392-.Ltext0
 2228 0034 0400     		.2byte	0x4
 2229 0036 F3       		.byte	0xf3
 2230 0037 01       		.uleb128 0x1
 2231 0038 51       		.byte	0x51
 2232 0039 9F       		.byte	0x9f
 2233 003a 00000000 		.4byte	0
 2234 003e 00000000 		.4byte	0
 2235              	.LLST2:
 2236 0042 00000000 		.4byte	.LVL0-.Ltext0
 2237 0046 18000000 		.4byte	.LVL3-.Ltext0
 2238 004a 0100     		.2byte	0x1
 2239 004c 52       		.byte	0x52
 2240 004d 18000000 		.4byte	.LVL3-.Ltext0
 2241 0051 3C000000 		.4byte	.LFE392-.Ltext0
 2242 0055 0400     		.2byte	0x4
 2243 0057 F3       		.byte	0xf3
 2244 0058 01       		.uleb128 0x1
 2245 0059 52       		.byte	0x52
 2246 005a 9F       		.byte	0x9f
 2247 005b 00000000 		.4byte	0
 2248 005f 00000000 		.4byte	0
 2249              	.LLST3:
 2250 0063 00000000 		.4byte	.LVL0-.Ltext0
 2251 0067 1C000000 		.4byte	.LVL4-.Ltext0
 2252 006b 0100     		.2byte	0x1
 2253 006d 53       		.byte	0x53
 2254 006e 1C000000 		.4byte	.LVL4-.Ltext0
 2255 0072 3C000000 		.4byte	.LFE392-.Ltext0
 2256 0076 0400     		.2byte	0x4
 2257 0078 F3       		.byte	0xf3
 2258 0079 01       		.uleb128 0x1
 2259 007a 53       		.byte	0x53
 2260 007b 9F       		.byte	0x9f
 2261 007c 00000000 		.4byte	0
 2262 0080 00000000 		.4byte	0
 2263              	.LLST4:
 2264 0084 00000000 		.4byte	.LVL0-.Ltext0
 2265 0088 36000000 		.4byte	.LVL5-.Ltext0
 2266 008c 0200     		.2byte	0x2
 2267 008e 91       		.byte	0x91
 2268 008f 00       		.sleb128 0
 2269 0090 36000000 		.4byte	.LVL5-.Ltext0
 2270 0094 3C000000 		.4byte	.LFE392-.Ltext0
 2271 0098 0200     		.2byte	0x2
 2272 009a 7D       		.byte	0x7d
 2273 009b 00       		.sleb128 0
 2274 009c 00000000 		.4byte	0
 2275 00a0 00000000 		.4byte	0
 2276              	.LLST5:
 2277 00a4 00000000 		.4byte	.LVL0-.Ltext0
 2278 00a8 36000000 		.4byte	.LVL5-.Ltext0
 2279 00ac 0200     		.2byte	0x2
 2280 00ae 91       		.byte	0x91
 2281 00af 04       		.sleb128 4
 2282 00b0 36000000 		.4byte	.LVL5-.Ltext0
 2283 00b4 3C000000 		.4byte	.LFE392-.Ltext0
 2284 00b8 0200     		.2byte	0x2
 2285 00ba 7D       		.byte	0x7d
 2286 00bb 04       		.sleb128 4
 2287 00bc 00000000 		.4byte	0
 2288 00c0 00000000 		.4byte	0
 2289              	.LLST6:
 2290 00c4 70000000 		.4byte	.LVL7-.Ltext0
 2291 00c8 76000000 		.4byte	.LVL8-.Ltext0
 2292 00cc 0100     		.2byte	0x1
 2293 00ce 50       		.byte	0x50
 2294 00cf 76000000 		.4byte	.LVL8-.Ltext0
 2295 00d3 7A000000 		.4byte	.LVL9-.Ltext0
 2296 00d7 0300     		.2byte	0x3
 2297 00d9 70       		.byte	0x70
 2298 00da 01       		.sleb128 1
 2299 00db 9F       		.byte	0x9f
 2300 00dc 7A000000 		.4byte	.LVL9-.Ltext0
 2301 00e0 B8000000 		.4byte	.LFE395-.Ltext0
 2302 00e4 0400     		.2byte	0x4
 2303 00e6 F3       		.byte	0xf3
 2304 00e7 01       		.uleb128 0x1
 2305 00e8 50       		.byte	0x50
 2306 00e9 9F       		.byte	0x9f
 2307 00ea 00000000 		.4byte	0
 2308 00ee 00000000 		.4byte	0
 2309              	.LLST7:
 2310 00f2 70000000 		.4byte	.LVL7-.Ltext0
 2311 00f6 82000000 		.4byte	.LVL11-.Ltext0
 2312 00fa 0100     		.2byte	0x1
 2313 00fc 51       		.byte	0x51
 2314 00fd 82000000 		.4byte	.LVL11-.Ltext0
 2315 0101 86000000 		.4byte	.LVL12-.Ltext0
 2316 0105 0300     		.2byte	0x3
 2317 0107 71       		.byte	0x71
 2318 0108 01       		.sleb128 1
 2319 0109 9F       		.byte	0x9f
 2320 010a 86000000 		.4byte	.LVL12-.Ltext0
 2321 010e B8000000 		.4byte	.LFE395-.Ltext0
 2322 0112 0400     		.2byte	0x4
 2323 0114 F3       		.byte	0xf3
 2324 0115 01       		.uleb128 0x1
 2325 0116 51       		.byte	0x51
 2326 0117 9F       		.byte	0x9f
 2327 0118 00000000 		.4byte	0
 2328 011c 00000000 		.4byte	0
 2329              	.LLST8:
 2330 0120 70000000 		.4byte	.LVL7-.Ltext0
 2331 0124 8E000000 		.4byte	.LVL14-.Ltext0
 2332 0128 0100     		.2byte	0x1
 2333 012a 52       		.byte	0x52
 2334 012b 8E000000 		.4byte	.LVL14-.Ltext0
 2335 012f 92000000 		.4byte	.LVL15-.Ltext0
 2336 0133 0300     		.2byte	0x3
 2337 0135 72       		.byte	0x72
 2338 0136 01       		.sleb128 1
 2339 0137 9F       		.byte	0x9f
 2340 0138 92000000 		.4byte	.LVL15-.Ltext0
 2341 013c B8000000 		.4byte	.LFE395-.Ltext0
 2342 0140 0400     		.2byte	0x4
 2343 0142 F3       		.byte	0xf3
 2344 0143 01       		.uleb128 0x1
 2345 0144 52       		.byte	0x52
 2346 0145 9F       		.byte	0x9f
 2347 0146 00000000 		.4byte	0
 2348 014a 00000000 		.4byte	0
 2349              	.LLST9:
 2350 014e 8A000000 		.4byte	.LVL13-.Ltext0
 2351 0152 AA000000 		.4byte	.LVL17-.Ltext0
 2352 0156 0100     		.2byte	0x1
 2353 0158 51       		.byte	0x51
 2354 0159 00000000 		.4byte	0
 2355 015d 00000000 		.4byte	0
 2356              	.LLST10:
 2357 0161 96000000 		.4byte	.LVL16-.Ltext0
 2358 0165 AE000000 		.4byte	.LVL18-.Ltext0
 2359 0169 0100     		.2byte	0x1
 2360 016b 52       		.byte	0x52
 2361 016c 00000000 		.4byte	0
 2362 0170 00000000 		.4byte	0
 2363              	.LLST11:
 2364 0174 B8000000 		.4byte	.LVL19-.Ltext0
 2365 0178 DC000000 		.4byte	.LVL22-.Ltext0
 2366 017c 0100     		.2byte	0x1
 2367 017e 50       		.byte	0x50
 2368 017f DC000000 		.4byte	.LVL22-.Ltext0
 2369 0183 04010000 		.4byte	.LFE396-.Ltext0
 2370 0187 0400     		.2byte	0x4
 2371 0189 F3       		.byte	0xf3
 2372 018a 01       		.uleb128 0x1
 2373 018b 50       		.byte	0x50
 2374 018c 9F       		.byte	0x9f
 2375 018d 00000000 		.4byte	0
 2376 0191 00000000 		.4byte	0
 2377              	.LLST12:
 2378 0195 B8000000 		.4byte	.LVL19-.Ltext0
 2379 0199 C8000000 		.4byte	.LVL20-.Ltext0
 2380 019d 0100     		.2byte	0x1
 2381 019f 51       		.byte	0x51
 2382 01a0 C8000000 		.4byte	.LVL20-.Ltext0
 2383 01a4 04010000 		.4byte	.LFE396-.Ltext0
 2384 01a8 0400     		.2byte	0x4
 2385 01aa F3       		.byte	0xf3
 2386 01ab 01       		.uleb128 0x1
 2387 01ac 51       		.byte	0x51
 2388 01ad 9F       		.byte	0x9f
 2389 01ae 00000000 		.4byte	0
 2390 01b2 00000000 		.4byte	0
 2391              	.LLST13:
 2392 01b6 B8000000 		.4byte	.LVL19-.Ltext0
 2393 01ba CC000000 		.4byte	.LVL21-.Ltext0
 2394 01be 0100     		.2byte	0x1
 2395 01c0 52       		.byte	0x52
 2396 01c1 CC000000 		.4byte	.LVL21-.Ltext0
 2397 01c5 04010000 		.4byte	.LFE396-.Ltext0
 2398 01c9 0400     		.2byte	0x4
 2399 01cb F3       		.byte	0xf3
 2400 01cc 01       		.uleb128 0x1
 2401 01cd 52       		.byte	0x52
 2402 01ce 9F       		.byte	0x9f
 2403 01cf 00000000 		.4byte	0
 2404 01d3 00000000 		.4byte	0
 2405              	.LLST14:
 2406 01d7 B8000000 		.4byte	.LVL19-.Ltext0
 2407 01db FA000000 		.4byte	.LVL25-.Ltext0
 2408 01df 0100     		.2byte	0x1
 2409 01e1 53       		.byte	0x53
 2410 01e2 FA000000 		.4byte	.LVL25-.Ltext0
 2411 01e6 04010000 		.4byte	.LFE396-.Ltext0
 2412 01ea 0400     		.2byte	0x4
 2413 01ec F3       		.byte	0xf3
 2414 01ed 01       		.uleb128 0x1
 2415 01ee 53       		.byte	0x53
 2416 01ef 9F       		.byte	0x9f
 2417 01f0 00000000 		.4byte	0
 2418 01f4 00000000 		.4byte	0
 2419              	.LLST15:
 2420 01f8 DC000000 		.4byte	.LVL22-.Ltext0
 2421 01fc EA000000 		.4byte	.LVL23-.Ltext0
 2422 0200 0100     		.2byte	0x1
 2423 0202 50       		.byte	0x50
 2424 0203 00000000 		.4byte	0
 2425 0207 00000000 		.4byte	0
 2426              	.LLST16:
 2427 020b F2000000 		.4byte	.LVL24-.Ltext0
 2428 020f FE000000 		.4byte	.LVL26-.Ltext0
 2429 0213 0100     		.2byte	0x1
 2430 0215 56       		.byte	0x56
 2431 0216 00000000 		.4byte	0
 2432 021a 00000000 		.4byte	0
 2433              	.LLST17:
 2434 021e 5C010000 		.4byte	.LVL27-.Ltext0
 2435 0222 6C010000 		.4byte	.LVL29-.Ltext0
 2436 0226 0100     		.2byte	0x1
 2437 0228 53       		.byte	0x53
 2438 0229 7E010000 		.4byte	.LVL31-.Ltext0
 2439 022d 8C010000 		.4byte	.LFE398-.Ltext0
 2440 0231 0100     		.2byte	0x1
 2441 0233 53       		.byte	0x53
 2442 0234 00000000 		.4byte	0
 2443 0238 00000000 		.4byte	0
 2444              	.LLST18:
 2445 023c 5C010000 		.4byte	.LVL27-.Ltext0
 2446 0240 68010000 		.4byte	.LVL28-.Ltext0
 2447 0244 0600     		.2byte	0x6
 2448 0246 73       		.byte	0x73
 2449 0247 00       		.sleb128 0
 2450 0248 08       		.byte	0x8
 2451 0249 3F       		.byte	0x3f
 2452 024a 1A       		.byte	0x1a
 2453 024b 9F       		.byte	0x9f
 2454 024c 68010000 		.4byte	.LVL28-.Ltext0
 2455 0250 74010000 		.4byte	.LVL30-.Ltext0
 2456 0254 0100     		.2byte	0x1
 2457 0256 50       		.byte	0x50
 2458 0257 7E010000 		.4byte	.LVL31-.Ltext0
 2459 025b 8C010000 		.4byte	.LFE398-.Ltext0
 2460 025f 0600     		.2byte	0x6
 2461 0261 73       		.byte	0x73
 2462 0262 00       		.sleb128 0
 2463 0263 08       		.byte	0x8
 2464 0264 3F       		.byte	0x3f
 2465 0265 1A       		.byte	0x1a
 2466 0266 9F       		.byte	0x9f
 2467 0267 00000000 		.4byte	0
 2468 026b 00000000 		.4byte	0
 2469              	.LLST19:
 2470 026f 5C010000 		.4byte	.LVL27-.Ltext0
 2471 0273 6C010000 		.4byte	.LVL29-.Ltext0
 2472 0277 0900     		.2byte	0x9
 2473 0279 73       		.byte	0x73
 2474 027a 00       		.sleb128 0
 2475 027b 36       		.byte	0x36
 2476 027c 25       		.byte	0x25
 2477 027d 0A       		.byte	0xa
 2478 027e FF01     		.2byte	0x1ff
 2479 0280 1A       		.byte	0x1a
 2480 0281 9F       		.byte	0x9f
 2481 0282 7E010000 		.4byte	.LVL31-.Ltext0
 2482 0286 8C010000 		.4byte	.LFE398-.Ltext0
 2483 028a 0900     		.2byte	0x9
 2484 028c 73       		.byte	0x73
 2485 028d 00       		.sleb128 0
 2486 028e 36       		.byte	0x36
 2487 028f 25       		.byte	0x25
 2488 0290 0A       		.byte	0xa
 2489 0291 FF01     		.2byte	0x1ff
 2490 0293 1A       		.byte	0x1a
 2491 0294 9F       		.byte	0x9f
 2492 0295 00000000 		.4byte	0
 2493 0299 00000000 		.4byte	0
 2494              	.LLST20:
 2495 029d 5C010000 		.4byte	.LVL27-.Ltext0
 2496 02a1 6C010000 		.4byte	.LVL29-.Ltext0
 2497 02a5 0B00     		.2byte	0xb
 2498 02a7 73       		.byte	0x73
 2499 02a8 00       		.sleb128 0
 2500 02a9 40       		.byte	0x40
 2501 02aa 25       		.byte	0x25
 2502 02ab 33       		.byte	0x33
 2503 02ac 1A       		.byte	0x1a
 2504 02ad 23       		.byte	0x23
 2505 02ae 01       		.uleb128 0x1
 2506 02af 31       		.byte	0x31
 2507 02b0 24       		.byte	0x24
 2508 02b1 9F       		.byte	0x9f
 2509 02b2 7E010000 		.4byte	.LVL31-.Ltext0
 2510 02b6 8C010000 		.4byte	.LFE398-.Ltext0
 2511 02ba 0B00     		.2byte	0xb
 2512 02bc 73       		.byte	0x73
 2513 02bd 00       		.sleb128 0
 2514 02be 40       		.byte	0x40
 2515 02bf 25       		.byte	0x25
 2516 02c0 33       		.byte	0x33
 2517 02c1 1A       		.byte	0x1a
 2518 02c2 23       		.byte	0x23
 2519 02c3 01       		.uleb128 0x1
 2520 02c4 31       		.byte	0x31
 2521 02c5 24       		.byte	0x24
 2522 02c6 9F       		.byte	0x9f
 2523 02c7 00000000 		.4byte	0
 2524 02cb 00000000 		.4byte	0
 2525              	.LLST21:
 2526 02cf 5C010000 		.4byte	.LVL27-.Ltext0
 2527 02d3 6C010000 		.4byte	.LVL29-.Ltext0
 2528 02d7 0700     		.2byte	0x7
 2529 02d9 73       		.byte	0x73
 2530 02da 00       		.sleb128 0
 2531 02db 46       		.byte	0x46
 2532 02dc 25       		.byte	0x25
 2533 02dd 31       		.byte	0x31
 2534 02de 1A       		.byte	0x1a
 2535 02df 9F       		.byte	0x9f
 2536 02e0 7E010000 		.4byte	.LVL31-.Ltext0
 2537 02e4 8C010000 		.4byte	.LFE398-.Ltext0
 2538 02e8 0700     		.2byte	0x7
 2539 02ea 73       		.byte	0x73
 2540 02eb 00       		.sleb128 0
 2541 02ec 46       		.byte	0x46
 2542 02ed 25       		.byte	0x25
 2543 02ee 31       		.byte	0x31
 2544 02ef 1A       		.byte	0x1a
 2545 02f0 9F       		.byte	0x9f
 2546 02f1 00000000 		.4byte	0
 2547 02f5 00000000 		.4byte	0
 2548              	.LLST22:
 2549 02f9 C0010000 		.4byte	.LVL33-.Ltext0
 2550 02fd C4010000 		.4byte	.LVL34-.Ltext0
 2551 0301 0700     		.2byte	0x7
 2552 0303 73       		.byte	0x73
 2553 0304 00       		.sleb128 0
 2554 0305 32       		.byte	0x32
 2555 0306 25       		.byte	0x25
 2556 0307 33       		.byte	0x33
 2557 0308 1A       		.byte	0x1a
 2558 0309 9F       		.byte	0x9f
 2559 030a 00000000 		.4byte	0
 2560 030e 00000000 		.4byte	0
 2561              	.LLST23:
 2562 0312 EE010000 		.4byte	.LVL37-.Ltext0
 2563 0316 F6010000 		.4byte	.LVL38-.Ltext0
 2564 031a 0100     		.2byte	0x1
 2565 031c 54       		.byte	0x54
 2566 031d FA010000 		.4byte	.LVL39-.Ltext0
 2567 0321 02020000 		.4byte	.LVL41-.Ltext0
 2568 0325 0100     		.2byte	0x1
 2569 0327 54       		.byte	0x54
 2570 0328 00000000 		.4byte	0
 2571 032c 00000000 		.4byte	0
 2572              	.LLST24:
 2573 0330 12020000 		.4byte	.LVL42-.Ltext0
 2574 0334 1A020000 		.4byte	.LVL43-.Ltext0
 2575 0338 0100     		.2byte	0x1
 2576 033a 54       		.byte	0x54
 2577 033b 1E020000 		.4byte	.LVL44-.Ltext0
 2578 033f 26020000 		.4byte	.LVL46-.Ltext0
 2579 0343 0100     		.2byte	0x1
 2580 0345 54       		.byte	0x54
 2581 0346 00000000 		.4byte	0
 2582 034a 00000000 		.4byte	0
 2583              	.LLST25:
 2584 034e 36020000 		.4byte	.LVL47-.Ltext0
 2585 0352 3E020000 		.4byte	.LVL48-.Ltext0
 2586 0356 0100     		.2byte	0x1
 2587 0358 54       		.byte	0x54
 2588 0359 42020000 		.4byte	.LVL49-.Ltext0
 2589 035d 4A020000 		.4byte	.LVL51-.Ltext0
 2590 0361 0100     		.2byte	0x1
 2591 0363 54       		.byte	0x54
 2592 0364 00000000 		.4byte	0
 2593 0368 00000000 		.4byte	0
 2594              	.LLST26:
 2595 036c 5A020000 		.4byte	.LVL52-.Ltext0
 2596 0370 5C020000 		.4byte	.LVL53-.Ltext0
 2597 0374 0100     		.2byte	0x1
 2598 0376 53       		.byte	0x53
 2599 0377 00000000 		.4byte	0
 2600 037b 00000000 		.4byte	0
 2601              	.LLST27:
 2602 037f 7A020000 		.4byte	.LVL56-.Ltext0
 2603 0383 7C020000 		.4byte	.LVL57-.Ltext0
 2604 0387 0100     		.2byte	0x1
 2605 0389 53       		.byte	0x53
 2606 038a 00000000 		.4byte	0
 2607 038e 00000000 		.4byte	0
 2608              		.section	.debug_aranges,"",%progbits
 2609 0000 1C000000 		.4byte	0x1c
 2610 0004 0200     		.2byte	0x2
 2611 0006 00000000 		.4byte	.Ldebug_info0
 2612 000a 04       		.byte	0x4
 2613 000b 00       		.byte	0
 2614 000c 0000     		.2byte	0
 2615 000e 0000     		.2byte	0
 2616 0010 00000000 		.4byte	.Ltext0
 2617 0014 94020000 		.4byte	.Letext0-.Ltext0
 2618 0018 00000000 		.4byte	0
 2619 001c 00000000 		.4byte	0
 2620              		.section	.debug_line,"",%progbits
 2621              	.Ldebug_line0:
 2622 0000 74010000 		.section	.debug_str,"MS",%progbits,1
 2622      0200A200 
 2622      00000201 
 2622      FB0E0D00 
 2622      01010101 
 2623              	.LASF62:
 2624 0000 504C4C53 		.ascii	"PLLSAICFGR\000"
 2624      41494346 
 2624      475200
 2625              	.LASF103:
 2626 000b 63666772 		.ascii	"cfgr\000"
 2626      00
 2627              	.LASF63:
 2628 0010 44434B43 		.ascii	"DCKCFGR\000"
 2628      46475200 
 2629              	.LASF45:
 2630 0018 41504231 		.ascii	"APB1ENR\000"
 2630      454E5200 
 2631              	.LASF18:
 2632 0020 53575F50 		.ascii	"SW_PLL_P\000"
 2632      4C4C5F50 
 2632      00
 2633              	.LASF19:
 2634 0029 53575F50 		.ascii	"SW_PLL_R\000"
 2634      4C4C5F52 
 2634      00
 2635              	.LASF72:
 2636 0032 42535252 		.ascii	"BSRR\000"
 2636      00
 2637              	.LASF54:
 2638 0037 41504232 		.ascii	"APB2LPENR\000"
 2638      4C50454E 
 2638      5200
 2639              	.LASF38:
 2640 0041 41504232 		.ascii	"APB2RSTR\000"
 2640      52535452 
 2640      00
 2641              	.LASF37:
 2642 004a 41504231 		.ascii	"APB1RSTR\000"
 2642      52535452 
 2642      00
 2643              	.LASF24:
 2644 0053 4D434F31 		.ascii	"MCO1SRC\000"
 2644      53524300 
 2645              	.LASF10:
 2646 005b 756E7369 		.ascii	"unsigned int\000"
 2646      676E6564 
 2646      20696E74 
 2646      00
 2647              	.LASF21:
 2648 0068 4D434F31 		.ascii	"MCO1_LSE\000"
 2648      5F4C5345 
 2648      00
 2649              	.LASF57:
 2650 0071 42444352 		.ascii	"BDCR\000"
 2650      00
 2651              	.LASF5:
 2652 0076 5F5F696E 		.ascii	"__int32_t\000"
 2652      7433325F 
 2652      7400
 2653              	.LASF111:
 2654 0080 7372632F 		.ascii	"src/sys/clock.c\000"
 2654      7379732F 
 2654      636C6F63 
 2654      6B2E6300 
 2655              	.LASF99:
 2656 0090 706C6C63 		.ascii	"pllcfgr\000"
 2656      66677200 
 2657              	.LASF112:
 2658 0098 2F696E76 		.ascii	"/invite/Bureau/SPC/C_project\000"
 2658      6974652F 
 2658      42757265 
 2658      61752F53 
 2658      50432F43 
 2659              	.LASF113:
 2660 00b5 5F5F4453 		.ascii	"__DSB\000"
 2660      4200
 2661              	.LASF14:
 2662 00bb 504C4C53 		.ascii	"PLLSRC_HSE\000"
 2662      52435F48 
 2662      534500
 2663              	.LASF13:
 2664 00c6 504C4C53 		.ascii	"PLLSRC_HSI\000"
 2664      52435F48 
 2664      534900
 2665              	.LASF27:
 2666 00d1 4D434F32 		.ascii	"MCO2_HSE\000"
 2666      5F485345 
 2666      00
 2667              	.LASF66:
 2668 00da 5243435F 		.ascii	"RCC_registers\000"
 2668      72656769 
 2668      73746572 
 2668      7300
 2669              	.LASF12:
 2670 00e8 75696E74 		.ascii	"uint32_t\000"
 2670      33325F74 
 2670      00
 2671              	.LASF80:
 2672 00f1 7365745F 		.ascii	"set_bus_clock_dividers_exp\000"
 2672      6275735F 
 2672      636C6F63 
 2672      6B5F6469 
 2672      76696465 
 2673              	.LASF23:
 2674 010c 4D434F31 		.ascii	"MCO1_PLL\000"
 2674      5F504C4C 
 2674      00
 2675              	.LASF41:
 2676 0115 41484231 		.ascii	"AHB1ENR\000"
 2676      454E5200 
 2677              	.LASF60:
 2678 011d 53534347 		.ascii	"SSCGR\000"
 2678      5200
 2679              	.LASF9:
 2680 0123 6C6F6E67 		.ascii	"long long unsigned int\000"
 2680      206C6F6E 
 2680      6720756E 
 2680      7369676E 
 2680      65642069 
 2681              	.LASF68:
 2682 013a 4D4F4445 		.ascii	"MODER\000"
 2682      5200
 2683              	.LASF75:
 2684 0140 41465248 		.ascii	"AFRH\000"
 2684      00
 2685              	.LASF84:
 2686 0145 48505245 		.ascii	"HPRE\000"
 2686      00
 2687              	.LASF74:
 2688 014a 4146524C 		.ascii	"AFRL\000"
 2688      00
 2689              	.LASF35:
 2690 014f 41484233 		.ascii	"AHB3RSTR\000"
 2690      52535452 
 2690      00
 2691              	.LASF104:
 2692 0158 6765745F 		.ascii	"get_APB1CLK\000"
 2692      41504231 
 2692      434C4B00 
 2693              	.LASF17:
 2694 0164 53575F48 		.ascii	"SW_HSE\000"
 2694      534500
 2695              	.LASF82:
 2696 016b 50505245 		.ascii	"PPRE1_exp\000"
 2696      315F6578 
 2696      7000
 2697              	.LASF16:
 2698 0175 53575F48 		.ascii	"SW_HSI\000"
 2698      534900
 2699              	.LASF85:
 2700 017c 50505245 		.ascii	"PPRE1\000"
 2700      3100
 2701              	.LASF86:
 2702 0182 50505245 		.ascii	"PPRE2\000"
 2702      3200
 2703              	.LASF79:
 2704 0188 7365745F 		.ascii	"set_SYSCLK\000"
 2704      53595343 
 2704      4C4B00
 2705              	.LASF36:
 2706 0193 5F726573 		.ascii	"_reserved_0x1c\000"
 2706      65727665 
 2706      645F3078 
 2706      316300
 2707              	.LASF43:
 2708 01a2 41484233 		.ascii	"AHB3ENR\000"
 2708      454E5200 
 2709              	.LASF39:
 2710 01aa 5F726573 		.ascii	"_reserved_0x28\000"
 2710      65727665 
 2710      645F3078 
 2710      323800
 2711              	.LASF77:
 2712 01b9 656E6162 		.ascii	"enable_GPIOA\000"
 2712      6C655F47 
 2712      50494F41 
 2712      00
 2713              	.LASF71:
 2714 01c6 50555044 		.ascii	"PUPDR\000"
 2714      5200
 2715              	.LASF76:
 2716 01cc 656E6162 		.ascii	"enable_GPIOC\000"
 2716      6C655F47 
 2716      50494F43 
 2716      00
 2717              	.LASF26:
 2718 01d9 4D434F32 		.ascii	"MCO2_I2S\000"
 2718      5F493253 
 2718      00
 2719              	.LASF88:
 2720 01e2 53524331 		.ascii	"SRC1\000"
 2720      00
 2721              	.LASF90:
 2722 01e7 53524332 		.ascii	"SRC2\000"
 2722      00
 2723              	.LASF40:
 2724 01ec 5F726573 		.ascii	"_reserved_0x2c\000"
 2724      65727665 
 2724      645F3078 
 2724      326300
 2725              	.LASF78:
 2726 01fb 73746172 		.ascii	"start_PLL\000"
 2726      745F504C 
 2726      4C00
 2727              	.LASF110:
 2728 0205 474E5520 		.ascii	"GNU C11 5.4.1 20160919 -mtune=cortex-m4 -mthumb -ma"
 2728      43313120 
 2728      352E342E 
 2728      31203230 
 2728      31363039 
 2729 0238 7263683D 		.ascii	"rch=armv7e-m -mfloat-abi=hard -mfpu=fpv4-sp-d16 -g "
 2729      61726D76 
 2729      37652D6D 
 2729      202D6D66 
 2729      6C6F6174 
 2730 026b 2D4F3020 		.ascii	"-O0 -Os -fsingle-precision-constant\000"
 2730      2D4F7320 
 2730      2D667369 
 2730      6E676C65 
 2730      2D707265 
 2731              	.LASF91:
 2732 028f 44495632 		.ascii	"DIV2\000"
 2732      00
 2733              	.LASF95:
 2734 0294 4D434F32 		.ascii	"MCO2PRE\000"
 2734      50524500 
 2735              	.LASF107:
 2736 029c 6765745F 		.ascii	"get_APB2TIMCLK\000"
 2736      41504232 
 2736      54494D43 
 2736      4C4B00
 2737              	.LASF44:
 2738 02ab 5F726573 		.ascii	"_reserved_0x3c\000"
 2738      65727665 
 2738      645F3078 
 2738      336300
 2739              	.LASF8:
 2740 02ba 6C6F6E67 		.ascii	"long long int\000"
 2740      206C6F6E 
 2740      6720696E 
 2740      7400
 2741              	.LASF22:
 2742 02c8 4D434F31 		.ascii	"MCO1_HSE\000"
 2742      5F485345 
 2742      00
 2743              	.LASF20:
 2744 02d1 4D434F31 		.ascii	"MCO1_HSI\000"
 2744      5F485349 
 2744      00
 2745              	.LASF101:
 2746 02da 6765745F 		.ascii	"get_SYSCLK\000"
 2746      53595343 
 2746      4C4B00
 2747              	.LASF53:
 2748 02e5 41504231 		.ascii	"APB1LPENR\000"
 2748      4C50454E 
 2748      5200
 2749              	.LASF47:
 2750 02ef 5F726573 		.ascii	"_reserved_0x48\000"
 2750      65727665 
 2750      645F3078 
 2750      343800
 2751              	.LASF97:
 2752 02fe 656E6162 		.ascii	"enable_MCO_GPIO\000"
 2752      6C655F4D 
 2752      434F5F47 
 2752      50494F00 
 2753              	.LASF48:
 2754 030e 5F726573 		.ascii	"_reserved_0x4c\000"
 2754      65727665 
 2754      645F3078 
 2754      346300
 2755              	.LASF109:
 2756 031d 4750494F 		.ascii	"GPIOA\000"
 2756      4100
 2757              	.LASF108:
 2758 0323 4750494F 		.ascii	"GPIOC\000"
 2758      4300
 2759              	.LASF46:
 2760 0329 41504232 		.ascii	"APB2ENR\000"
 2760      454E5200 
 2761              	.LASF65:
 2762 0331 44434B43 		.ascii	"DCKCFGR2\000"
 2762      46475232 
 2762      00
 2763              	.LASF49:
 2764 033a 41484231 		.ascii	"AHB1LPENR\000"
 2764      4C50454E 
 2764      5200
 2765              	.LASF70:
 2766 0344 4F535045 		.ascii	"OSPEEDR\000"
 2766      45445200 
 2767              	.LASF52:
 2768 034c 5F726573 		.ascii	"_reserved_0x5c\000"
 2768      65727665 
 2768      645F3078 
 2768      356300
 2769              	.LASF34:
 2770 035b 41484232 		.ascii	"AHB2RSTR\000"
 2770      52535452 
 2770      00
 2771              	.LASF55:
 2772 0364 5F726573 		.ascii	"_reserved_0x68\000"
 2772      65727665 
 2772      645F3078 
 2772      363800
 2773              	.LASF29:
 2774 0373 4D434F32 		.ascii	"MCO2SRC\000"
 2774      53524300 
 2775              	.LASF15:
 2776 037b 504C4C53 		.ascii	"PLLSRC\000"
 2776      524300
 2777              	.LASF2:
 2778 0382 73686F72 		.ascii	"short int\000"
 2778      7420696E 
 2778      7400
 2779              	.LASF98:
 2780 038c 6765745F 		.ascii	"get_PLL_PCLK\000"
 2780      504C4C5F 
 2780      50434C4B 
 2780      00
 2781              	.LASF96:
 2782 0399 73746F70 		.ascii	"stop_PLL\000"
 2782      5F504C4C 
 2782      00
 2783              	.LASF4:
 2784 03a2 6C6F6E67 		.ascii	"long int\000"
 2784      20696E74 
 2784      00
 2785              	.LASF56:
 2786 03ab 5F726573 		.ascii	"_reserved_0x6c\000"
 2786      65727665 
 2786      645F3078 
 2786      366300
 2787              	.LASF58:
 2788 03ba 5F726573 		.ascii	"_reserved_0x78\000"
 2788      65727665 
 2788      645F3078 
 2788      373800
 2789              	.LASF69:
 2790 03c9 4F545950 		.ascii	"OTYPER\000"
 2790      455200
 2791              	.LASF32:
 2792 03d0 43464752 		.ascii	"CFGR\000"
 2792      00
 2793              	.LASF59:
 2794 03d5 5F726573 		.ascii	"_reserved_0x7c\000"
 2794      65727665 
 2794      645F3078 
 2794      376300
 2795              	.LASF87:
 2796 03e4 7365745F 		.ascii	"set_MCO\000"
 2796      4D434F00 
 2797              	.LASF31:
 2798 03ec 504C4C43 		.ascii	"PLLCFGR\000"
 2798      46475200 
 2799              	.LASF102:
 2800 03f4 6765745F 		.ascii	"get_AHBCLK\000"
 2800      41484243 
 2800      4C4B00
 2801              	.LASF51:
 2802 03ff 41484233 		.ascii	"AHB3LPENR\000"
 2802      4C50454E 
 2802      5200
 2803              	.LASF30:
 2804 0409 73697A65 		.ascii	"sizetype\000"
 2804      74797065 
 2804      00
 2805              	.LASF7:
 2806 0412 6C6F6E67 		.ascii	"long unsigned int\000"
 2806      20756E73 
 2806      69676E65 
 2806      6420696E 
 2806      7400
 2807              	.LASF92:
 2808 0424 4D434F31 		.ascii	"MCO1\000"
 2808      00
 2809              	.LASF93:
 2810 0429 4D434F32 		.ascii	"MCO2\000"
 2810      00
 2811              	.LASF42:
 2812 042e 41484232 		.ascii	"AHB2ENR\000"
 2812      454E5200 
 2813              	.LASF11:
 2814 0436 696E7433 		.ascii	"int32_t\000"
 2814      325F7400 
 2815              	.LASF61:
 2816 043e 504C4C49 		.ascii	"PLLI2SCFGR\000"
 2816      32534346 
 2816      475200
 2817              	.LASF1:
 2818 0449 756E7369 		.ascii	"unsigned char\000"
 2818      676E6564 
 2818      20636861 
 2818      7200
 2819              	.LASF100:
 2820 0457 6765745F 		.ascii	"get_PLL_RCLK\000"
 2820      504C4C5F 
 2820      52434C4B 
 2820      00
 2821              	.LASF6:
 2822 0464 5F5F7569 		.ascii	"__uint32_t\000"
 2822      6E743332 
 2822      5F7400
 2823              	.LASF28:
 2824 046f 4D434F32 		.ascii	"MCO2_PLL\000"
 2824      5F504C4C 
 2824      00
 2825              	.LASF105:
 2826 0478 6765745F 		.ascii	"get_APB2CLK\000"
 2826      41504232 
 2826      434C4B00 
 2827              	.LASF94:
 2828 0484 4D434F31 		.ascii	"MCO1PRE\000"
 2828      50524500 
 2829              	.LASF89:
 2830 048c 44495631 		.ascii	"DIV1\000"
 2830      00
 2831              	.LASF0:
 2832 0491 7369676E 		.ascii	"signed char\000"
 2832      65642063 
 2832      68617200 
 2833              	.LASF106:
 2834 049d 6765745F 		.ascii	"get_APB1TIMCLK\000"
 2834      41504231 
 2834      54494D43 
 2834      4C4B00
 2835              	.LASF3:
 2836 04ac 73686F72 		.ascii	"short unsigned int\000"
 2836      7420756E 
 2836      7369676E 
 2836      65642069 
 2836      6E7400
 2837              	.LASF25:
 2838 04bf 4D434F32 		.ascii	"MCO2_SYS\000"
 2838      5F535953 
 2838      00
 2839              	.LASF67:
 2840 04c8 4750494F 		.ascii	"GPIO_registers\000"
 2840      5F726567 
 2840      69737465 
 2840      727300
 2841              	.LASF83:
 2842 04d7 50505245 		.ascii	"PPRE2_exp\000"
 2842      325F6578 
 2842      7000
 2843              	.LASF50:
 2844 04e1 41484232 		.ascii	"AHB2LPENR\000"
 2844      4C50454E 
 2844      5200
 2845              	.LASF81:
 2846 04eb 48505245 		.ascii	"HPRE__exp\000"
 2846      5F5F6578 
 2846      7000
 2847              	.LASF33:
 2848 04f5 41484231 		.ascii	"AHB1RSTR\000"
 2848      52535452 
 2848      00
 2849              	.LASF73:
 2850 04fe 4C434B52 		.ascii	"LCKR\000"
 2850      00
 2851              	.LASF64:
 2852 0503 434B4741 		.ascii	"CKGATENR\000"
 2852      54454E52 
 2852      00
 2853              		.ident	"GCC: (15:5.4.1+svn241155-1) 5.4.1 20160919"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 clock.c
     /tmp/cc3MTGmX.s:21     .text:0000000000000000 $t
     /tmp/cc3MTGmX.s:26     .text:0000000000000000 start_PLL
     /tmp/cc3MTGmX.s:72     .text:0000000000000038 $d
     /tmp/cc3MTGmX.s:76     .text:000000000000003c $t
     /tmp/cc3MTGmX.s:81     .text:000000000000003c stop_PLL
     /tmp/cc3MTGmX.s:107    .text:000000000000004c $d
     /tmp/cc3MTGmX.s:113    .text:0000000000000050 $t
     /tmp/cc3MTGmX.s:118    .text:0000000000000050 set_SYSCLK
     /tmp/cc3MTGmX.s:144    .text:000000000000006c $d
     /tmp/cc3MTGmX.s:148    .text:0000000000000070 $t
     /tmp/cc3MTGmX.s:153    .text:0000000000000070 set_bus_clock_dividers_exp
     /tmp/cc3MTGmX.s:211    .text:00000000000000b4 $d
     /tmp/cc3MTGmX.s:215    .text:00000000000000b8 $t
     /tmp/cc3MTGmX.s:220    .text:00000000000000b8 set_MCO
     /tmp/cc3MTGmX.s:282    .text:0000000000000100 $d
     /tmp/cc3MTGmX.s:286    .text:0000000000000104 $t
     /tmp/cc3MTGmX.s:291    .text:0000000000000104 enable_MCO_GPIO
     /tmp/cc3MTGmX.s:366    .text:000000000000014c $d
     /tmp/cc3MTGmX.s:372    .text:0000000000000158 $t
     /tmp/cc3MTGmX.s:377    .text:0000000000000158 get_PLL_PCLK
     /tmp/cc3MTGmX.s:414    .text:0000000000000184 $d
     /tmp/cc3MTGmX.s:419    .text:000000000000018c $t
     /tmp/cc3MTGmX.s:424    .text:000000000000018c get_PLL_RCLK
     /tmp/cc3MTGmX.s:454    .text:00000000000001b4 $d
     /tmp/cc3MTGmX.s:459    .text:00000000000001bc $t
     /tmp/cc3MTGmX.s:464    .text:00000000000001bc get_SYSCLK
     /tmp/cc3MTGmX.s:501    .text:00000000000001e0 $d
     /tmp/cc3MTGmX.s:506    .text:00000000000001e8 $t
     /tmp/cc3MTGmX.s:511    .text:00000000000001e8 get_AHBCLK
     /tmp/cc3MTGmX.s:554    .text:0000000000000208 $d
     /tmp/cc3MTGmX.s:558    .text:000000000000020c $t
     /tmp/cc3MTGmX.s:563    .text:000000000000020c get_APB1CLK
     /tmp/cc3MTGmX.s:606    .text:000000000000022c $d
     /tmp/cc3MTGmX.s:610    .text:0000000000000230 $t
     /tmp/cc3MTGmX.s:615    .text:0000000000000230 get_APB2CLK
     /tmp/cc3MTGmX.s:658    .text:0000000000000250 $d
     /tmp/cc3MTGmX.s:662    .text:0000000000000254 $t
     /tmp/cc3MTGmX.s:667    .text:0000000000000254 get_APB1TIMCLK
     /tmp/cc3MTGmX.s:705    .text:0000000000000270 $d
     /tmp/cc3MTGmX.s:709    .text:0000000000000274 $t
     /tmp/cc3MTGmX.s:714    .text:0000000000000274 get_APB2TIMCLK
     /tmp/cc3MTGmX.s:752    .text:0000000000000290 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC
GPIOA
GPIOC
