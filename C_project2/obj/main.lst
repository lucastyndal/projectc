   1              		.syntax unified
   2              		.arch armv7e-m
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"main.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.align	1
  22              		.global	exo2
  23              		.thumb
  24              		.thumb_func
  25              		.type	exo2, %function
  26              	exo2:
  27              	.LFB396:
  28              		.file 1 "src/main.c"
   1:src/main.c    **** #include <stdio.h>
   2:src/main.c    **** #include <math.h>
   3:src/main.c    **** //#include <unistd.h>
   4:src/main.c    **** #include "sys/cm4.h"
   5:src/main.c    **** #include "sys/devices.h"
   6:src/main.c    **** #include "sys/init.h"
   7:src/main.c    **** #include "sys/clock.h"
   8:src/main.c    **** 
   9:src/main.c    **** 
  10:src/main.c    **** /* Prototype des fonctions utilisees */
  11:src/main.c    **** void led_init();
  12:src/main.c    **** void led_tri_set(uint32_t status);
  13:src/main.c    **** void enable_GPIOA();
  14:src/main.c    **** void enable_GPIOB();
  15:src/main.c    **** void tempo_250ms();
  16:src/main.c    **** uint32_t button_poll();
  17:src/main.c    **** void button_init();
  18:src/main.c    **** void led_pa5(uint32_t status);
  19:src/main.c    **** 
  20:src/main.c    **** void exo1_1(){
  21:src/main.c    **** 	led_pa5(0);
  22:src/main.c    **** 	while (1) {
  23:src/main.c    **** 		if(button_poll()){
  24:src/main.c    **** 	   		led_pa5(1);
  25:src/main.c    **** 		}
  26:src/main.c    **** 		else{
  27:src/main.c    **** 			led_pa5(0);
  28:src/main.c    **** 		}
  29:src/main.c    **** 	}
  30:src/main.c    **** }
  31:src/main.c    **** 
  32:src/main.c    **** void exo1_2(){
  33:src/main.c    **** 	int8_t index = 0;	
  34:src/main.c    **** 	while(1){
  35:src/main.c    **** 		led_pa5(index % 2);
  36:src/main.c    **** 		tempo_250ms();		
  37:src/main.c    **** 		tempo_250ms();
  38:src/main.c    **** 		index++;	
  39:src/main.c    **** 	}
  40:src/main.c    **** }
  41:src/main.c    **** 
  42:src/main.c    **** void exo1_3(){
  43:src/main.c    **** 	int8_t enclenche = 0;
  44:src/main.c    **** 	while(1){
  45:src/main.c    **** 		if(button_poll()){
  46:src/main.c    **** 			enclenche = 1;
  47:src/main.c    **** 			led_pa5(1);
  48:src/main.c    **** 		}
  49:src/main.c    **** 		
  50:src/main.c    **** 		else if(!button_poll() && enclenche){
  51:src/main.c    **** 			for(int8_t i = 0; i < 8; i++){
  52:src/main.c    **** 				led_pa5(i % 2);
  53:src/main.c    **** 				tempo_250ms();
  54:src/main.c    **** 			}
  55:src/main.c    **** 			led_pa5(0);
  56:src/main.c    **** 			enclenche = 0;
  57:src/main.c    **** 		}
  58:src/main.c    **** 		
  59:src/main.c    **** 		else{
  60:src/main.c    **** 			led_pa5(0);
  61:src/main.c    **** 		}
  62:src/main.c    **** 	}
  63:src/main.c    **** }
  64:src/main.c    **** 
  65:src/main.c    **** void exo2(){
  29              		.loc 1 65 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 13B5     		push	{r0, r1, r4, lr}
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  38              		.loc 1 65 0
  39 0002 3224     		movs	r4, #50
  40              	.LVL1:
  41              	.L2:
  42              	.LBB8:
  66:src/main.c    **** 	char c = 0x0A;
  67:src/main.c    **** 	for(int8_t i = 0; i <  50; i++){
  68:src/main.c    **** 		printf("%c", c);
  43              		.loc 1 68 0 discriminator 3
  44 0004 0A20     		movs	r0, #10
  45 0006 013C     		subs	r4, r4, #1
  46              	.LVL2:
  47 0008 FFF7FEFF 		bl	putchar
  48              	.LVL3:
  67:src/main.c    **** 		printf("%c", c);
  49              		.loc 1 67 0 discriminator 3
  50 000c 14F0FF04 		ands	r4, r4, #255
  51 0010 F8D1     		bne	.L2
  52              	.LBE8:
  69:src/main.c    **** 	}
  70:src/main.c    **** 	
  71:src/main.c    **** 
  72:src/main.c    **** 	//scanf("%c", &c);
  73:src/main.c    **** 	//printf("%c", c);
  74:src/main.c    **** 
  75:src/main.c    **** 	char s[2];
  76:src/main.c    **** 	scanf("%d", s);
  53              		.loc 1 76 0
  54 0012 01A9     		add	r1, sp, #4
  55 0014 0348     		ldr	r0, .L5
  56 0016 FFF7FEFF 		bl	scanf
  57              	.LVL4:
  77:src/main.c    **** 	puts(s);
  58              		.loc 1 77 0
  59 001a 01A8     		add	r0, sp, #4
  60 001c FFF7FEFF 		bl	puts
  61              	.LVL5:
  78:src/main.c    **** }
  62              		.loc 1 78 0
  63 0020 02B0     		add	sp, sp, #8
  64              		.cfi_def_cfa_offset 8
  65              		@ sp needed
  66 0022 10BD     		pop	{r4, pc}
  67              	.L6:
  68              		.align	2
  69              	.L5:
  70 0024 00000000 		.word	.LC0
  71              		.cfi_endproc
  72              	.LFE396:
  73              		.size	exo2, .-exo2
  74              		.align	1
  75              		.global	led_init
  76              		.thumb
  77              		.thumb_func
  78              		.type	led_init, %function
  79              	led_init:
  80              	.LFB398:
  79:src/main.c    **** 
  80:src/main.c    **** int main() {
  81:src/main.c    **** 	enable_GPIOA();
  82:src/main.c    **** 	led_init();
  83:src/main.c    **** 	button_init();
  84:src/main.c    **** 
  85:src/main.c    **** 	exo2();
  86:src/main.c    **** 	
  87:src/main.c    **** 	return 0;
  88:src/main.c    **** }
  89:src/main.c    **** 
  90:src/main.c    **** 
  91:src/main.c    **** 
  92:src/main.c    **** void led_init() {
  81              		.loc 1 92 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		@ link register save eliminated.
  93:src/main.c    ****   /* Configure PA4-PA10 as outputs, push-pull, high speed*/
  94:src/main.c    ****         GPIOA.MODER = (GPIOA.MODER & ~(0x3FFF<<8)) | (0x1555<<8);
  86              		.loc 1 94 0
  87 0028 0A4A     		ldr	r2, .L8
  88 002a 1368     		ldr	r3, [r2]
  89 002c 23F47F13 		bic	r3, r3, #4177920
  90 0030 23F47C53 		bic	r3, r3, #16128
  91 0034 43F4AA13 		orr	r3, r3, #1392640
  92 0038 43F4A853 		orr	r3, r3, #5376
  93 003c 1360     		str	r3, [r2]
  95:src/main.c    ****         GPIOA.OTYPER  &= ~(0x7F<<4);
  94              		.loc 1 95 0
  95 003e 5368     		ldr	r3, [r2, #4]
  96 0040 23F4FE63 		bic	r3, r3, #2032
  97 0044 5360     		str	r3, [r2, #4]
  96:src/main.c    ****         GPIOA.OSPEEDR |= (0x3FFF<<10);
  98              		.loc 1 96 0
  99 0046 9368     		ldr	r3, [r2, #8]
 100 0048 43F47F03 		orr	r3, r3, #16711680
 101 004c 43F47C43 		orr	r3, r3, #64512
 102 0050 9360     		str	r3, [r2, #8]
 103 0052 7047     		bx	lr
 104              	.L9:
 105              		.align	2
 106              	.L8:
 107 0054 00000000 		.word	GPIOA
 108              		.cfi_endproc
 109              	.LFE398:
 110              		.size	led_init, .-led_init
 111              		.align	1
 112              		.global	led_tri_set
 113              		.thumb
 114              		.thumb_func
 115              		.type	led_tri_set, %function
 116              	led_tri_set:
 117              	.LFB399:
  97:src/main.c    **** }
  98:src/main.c    **** 
  99:src/main.c    **** void led_tri_set(uint32_t status) {
 118              		.loc 1 99 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 123              	.LVL6:
 100:src/main.c    ****         GPIOA.ODR = (GPIOA.ODR & ~(7<<8) ) | (1<<(8+status));
 124              		.loc 1 100 0
 125 0058 0549     		ldr	r1, .L11
 126 005a 4B69     		ldr	r3, [r1, #20]
 127 005c 0830     		adds	r0, r0, #8
 128              	.LVL7:
 129 005e 0122     		movs	r2, #1
 130 0060 02FA00F0 		lsl	r0, r2, r0
 131              	.LVL8:
 132 0064 23F4E063 		bic	r3, r3, #1792
 133 0068 0343     		orrs	r3, r3, r0
 134 006a 4B61     		str	r3, [r1, #20]
 135 006c 7047     		bx	lr
 136              	.L12:
 137 006e 00BF     		.align	2
 138              	.L11:
 139 0070 00000000 		.word	GPIOA
 140              		.cfi_endproc
 141              	.LFE399:
 142              		.size	led_tri_set, .-led_tri_set
 143              		.align	1
 144              		.global	led_pa5
 145              		.thumb
 146              		.thumb_func
 147              		.type	led_pa5, %function
 148              	led_pa5:
 149              	.LFB400:
 101:src/main.c    **** }
 102:src/main.c    **** 
 103:src/main.c    **** void led_pa5(uint32_t status) {
 150              		.loc 1 103 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 155              	.LVL9:
 104:src/main.c    ****         GPIOA.ODR = (GPIOA.ODR & ~(1<<5) ) | ((status & 0x01) << 5);
 156              		.loc 1 104 0
 157 0074 044A     		ldr	r2, .L14
 158 0076 5369     		ldr	r3, [r2, #20]
 159 0078 4001     		lsls	r0, r0, #5
 160              	.LVL10:
 161 007a 00F02000 		and	r0, r0, #32
 162 007e 23F02003 		bic	r3, r3, #32
 163 0082 0343     		orrs	r3, r3, r0
 164 0084 5361     		str	r3, [r2, #20]
 165 0086 7047     		bx	lr
 166              	.L15:
 167              		.align	2
 168              	.L14:
 169 0088 00000000 		.word	GPIOA
 170              		.cfi_endproc
 171              	.LFE400:
 172              		.size	led_pa5, .-led_pa5
 173              		.align	1
 174              		.global	tempo_250ms
 175              		.thumb
 176              		.thumb_func
 177              		.type	tempo_250ms, %function
 178              	tempo_250ms:
 179              	.LFB401:
 105:src/main.c    **** }
 106:src/main.c    **** 
 107:src/main.c    **** void tempo_250ms()
 108:src/main.c    **** {
 180              		.loc 1 108 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 8
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184              		@ link register save eliminated.
 185 008c 82B0     		sub	sp, sp, #8
 186              		.cfi_def_cfa_offset 8
 109:src/main.c    **** 	volatile uint32_t duree;
 110:src/main.c    **** 	for (duree = 0; duree < 2800000; duree++);  
 187              		.loc 1 110 0
 188 008e 0023     		movs	r3, #0
 189 0090 054A     		ldr	r2, .L20
 190 0092 0193     		str	r3, [sp, #4]
 191              	.L17:
 192              		.loc 1 110 0 is_stmt 0 discriminator 1
 193 0094 019B     		ldr	r3, [sp, #4]
 194 0096 9342     		cmp	r3, r2
 195 0098 03D8     		bhi	.L19
 196              		.loc 1 110 0 discriminator 3
 197 009a 019B     		ldr	r3, [sp, #4]
 198 009c 0133     		adds	r3, r3, #1
 199 009e 0193     		str	r3, [sp, #4]
 200 00a0 F8E7     		b	.L17
 201              	.L19:
 111:src/main.c    **** }	
 202              		.loc 1 111 0 is_stmt 1
 203 00a2 02B0     		add	sp, sp, #8
 204              		.cfi_def_cfa_offset 0
 205              		@ sp needed
 206 00a4 7047     		bx	lr
 207              	.L21:
 208 00a6 00BF     		.align	2
 209              	.L20:
 210 00a8 7FB92A00 		.word	2799999
 211              		.cfi_endproc
 212              	.LFE401:
 213              		.size	tempo_250ms, .-tempo_250ms
 214              		.align	1
 215              		.global	exo1_2
 216              		.thumb
 217              		.thumb_func
 218              		.type	exo1_2, %function
 219              	exo1_2:
 220              	.LFB394:
  32:src/main.c    **** 	int8_t index = 0;	
 221              		.loc 1 32 0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              	.LVL11:
 226 00ac 08B5     		push	{r3, lr}
 227              		.cfi_def_cfa_offset 8
 228              		.cfi_offset 3, -8
 229              		.cfi_offset 14, -4
  33:src/main.c    **** 	while(1){
 230              		.loc 1 33 0
 231 00ae 0021     		movs	r1, #0
 232              	.LVL12:
 233              	.L24:
  35:src/main.c    **** 		tempo_250ms();		
 234              		.loc 1 35 0 discriminator 1
 235 00b0 0948     		ldr	r0, .L25
 236 00b2 0840     		ands	r0, r0, r1
 237 00b4 0028     		cmp	r0, #0
 238 00b6 BEBF     		ittt	lt
 239 00b8 00F1FF30 		addlt	r0, r0, #-1
 240 00bc 60F00100 		ornlt	r0, r0, #1
 241 00c0 0130     		addlt	r0, r0, #1
 242 00c2 40B2     		sxtb	r0, r0
 243 00c4 FFF7FEFF 		bl	led_pa5
 244              	.LVL13:
  36:src/main.c    **** 		tempo_250ms();
 245              		.loc 1 36 0 discriminator 1
 246 00c8 FFF7FEFF 		bl	tempo_250ms
 247              	.LVL14:
  37:src/main.c    **** 		index++;	
 248              		.loc 1 37 0 discriminator 1
 249 00cc FFF7FEFF 		bl	tempo_250ms
 250              	.LVL15:
 251 00d0 0131     		adds	r1, r1, #1
 252 00d2 49B2     		sxtb	r1, r1
 253              	.LVL16:
 254 00d4 ECE7     		b	.L24
 255              	.L26:
 256 00d6 00BF     		.align	2
 257              	.L25:
 258 00d8 01000080 		.word	-2147483647
 259              		.cfi_endproc
 260              	.LFE394:
 261              		.size	exo1_2, .-exo1_2
 262              		.align	1
 263              		.global	button_init
 264              		.thumb
 265              		.thumb_func
 266              		.type	button_init, %function
 267              	button_init:
 268              	.LFB402:
 112:src/main.c    **** 
 113:src/main.c    **** 
 114:src/main.c    **** void button_init() {
 269              		.loc 1 114 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 115:src/main.c    **** 	/* Configure PB3-PB6, PB8 as inputs, no pull */
 116:src/main.c    **** 	GPIOB.MODER = GPIOB.MODER & ~(0xFF<<6 & 3<<16);
 274              		.loc 1 116 0
 275 00dc 054B     		ldr	r3, .L28
 276 00de 1A68     		ldr	r2, [r3]
 277 00e0 1A60     		str	r2, [r3]
 117:src/main.c    **** 	GPIOB.PUPDR = GPIOB.PUPDR & ~(0xFF<<6 & 3<<16);
 278              		.loc 1 117 0
 279 00e2 DA68     		ldr	r2, [r3, #12]
 280 00e4 DA60     		str	r2, [r3, #12]
 118:src/main.c    **** 	
 119:src/main.c    **** 	GPIOC.MODER = GPIOC.MODER & ~(3<<26);
 281              		.loc 1 119 0
 282 00e6 044A     		ldr	r2, .L28+4
 283 00e8 1368     		ldr	r3, [r2]
 284 00ea 23F04063 		bic	r3, r3, #201326592
 285 00ee 1360     		str	r3, [r2]
 286 00f0 7047     		bx	lr
 287              	.L29:
 288 00f2 00BF     		.align	2
 289              	.L28:
 290 00f4 00000000 		.word	GPIOB
 291 00f8 00000000 		.word	GPIOC
 292              		.cfi_endproc
 293              	.LFE402:
 294              		.size	button_init, .-button_init
 295              		.section	.text.startup,"ax",%progbits
 296              		.align	1
 297              		.global	main
 298              		.thumb
 299              		.thumb_func
 300              		.type	main, %function
 301              	main:
 302              	.LFB397:
  80:src/main.c    **** 	enable_GPIOA();
 303              		.loc 1 80 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              	.LBB9:
 308              	.LBB10:
 309              		.file 2 "src/sys/devices.h"
   1:src/sys/devices.h **** #ifndef __IO_H
   2:src/sys/devices.h **** #define __IO_H
   3:src/sys/devices.h **** 
   4:src/sys/devices.h **** #include<stdint.h>
   5:src/sys/devices.h **** #include "cm4.h"
   6:src/sys/devices.h **** 
   7:src/sys/devices.h **** #define __reserved(offset) \
   8:src/sys/devices.h ****   uint32_t _reserved_ ## offset
   9:src/sys/devices.h **** 
  10:src/sys/devices.h **** #define __reserved_interval(offset1,offset2) \
  11:src/sys/devices.h ****   uint32_t _reserved_ ## offset1 ## _ ## offset2[((offset2)-(offset1))/4]
  12:src/sys/devices.h **** 
  13:src/sys/devices.h **** /* PM §4.2.10 */ 
  14:src/sys/devices.h **** struct MPU_registers {
  15:src/sys/devices.h ****   uint32_t TYPER;
  16:src/sys/devices.h ****   uint32_t CTRL;
  17:src/sys/devices.h ****   uint32_t RNR;
  18:src/sys/devices.h ****   uint32_t RBAR;
  19:src/sys/devices.h ****   uint32_t RASR;
  20:src/sys/devices.h ****   uint32_t RBAR_A1;
  21:src/sys/devices.h ****   uint32_t RASR_A1;
  22:src/sys/devices.h ****   uint32_t RBAR_A2;
  23:src/sys/devices.h ****   uint32_t RASR_A2;
  24:src/sys/devices.h ****   uint32_t RBAR_A3;
  25:src/sys/devices.h ****   uint32_t RASR_A3;
  26:src/sys/devices.h **** };
  27:src/sys/devices.h **** 
  28:src/sys/devices.h **** /* PM §4.3.11 */ 
  29:src/sys/devices.h **** struct NVIC_registers {
  30:src/sys/devices.h ****   uint32_t ISER[3];
  31:src/sys/devices.h ****   __reserved_interval(0x0c,0x80);
  32:src/sys/devices.h ****   uint32_t ICER[3];
  33:src/sys/devices.h ****   __reserved_interval(0x8c,0x100);
  34:src/sys/devices.h ****   uint32_t ISPR[3];
  35:src/sys/devices.h ****   __reserved_interval(0x10c,0x180);
  36:src/sys/devices.h ****   uint32_t ICPR[3];
  37:src/sys/devices.h ****   __reserved_interval(0x18c,0x200);
  38:src/sys/devices.h ****   uint32_t IABR[3];
  39:src/sys/devices.h ****   __reserved_interval(0x20c,0x300);
  40:src/sys/devices.h ****   uint8_t  IP[81];
  41:src/sys/devices.h ****   uint8_t _reserved_bytes[3];
  42:src/sys/devices.h **** };
  43:src/sys/devices.h **** 
  44:src/sys/devices.h **** /* PM §4.4.19 */ 
  45:src/sys/devices.h **** struct SCB_registers {
  46:src/sys/devices.h ****   uint32_t CPUID;
  47:src/sys/devices.h ****   uint32_t ICSR;
  48:src/sys/devices.h ****   uint32_t VTOR;
  49:src/sys/devices.h ****   uint32_t AIRCR;
  50:src/sys/devices.h ****   uint32_t SCR;
  51:src/sys/devices.h ****   uint32_t CCR;
  52:src/sys/devices.h ****   uint32_t SHPR1;
  53:src/sys/devices.h ****   uint32_t SHPR2;
  54:src/sys/devices.h ****   uint32_t SHPR3;
  55:src/sys/devices.h ****   uint32_t SHCRS;
  56:src/sys/devices.h ****   uint32_t CFSR;
  57:src/sys/devices.h ****   uint32_t HFSR;
  58:src/sys/devices.h ****   uint32_t MMAR;
  59:src/sys/devices.h ****   uint32_t BFAR;
  60:src/sys/devices.h ****   uint32_t AFSR;
  61:src/sys/devices.h **** };
  62:src/sys/devices.h **** 
  63:src/sys/devices.h **** /* PM §4.5.6 */ 
  64:src/sys/devices.h **** struct STK_registers {
  65:src/sys/devices.h ****   uint32_t CTRL;
  66:src/sys/devices.h ****   uint32_t LOAD;
  67:src/sys/devices.h ****   uint32_t VAL;
  68:src/sys/devices.h ****   uint32_t CALIB;
  69:src/sys/devices.h **** };
  70:src/sys/devices.h **** 
  71:src/sys/devices.h **** /* PM §4.6 */ 
  72:src/sys/devices.h **** struct FPU_registers {
  73:src/sys/devices.h ****   __reserved(0x0);
  74:src/sys/devices.h ****   uint32_t CCR;
  75:src/sys/devices.h ****   uint32_t CAR;
  76:src/sys/devices.h ****   uint32_t DSCR;
  77:src/sys/devices.h **** };
  78:src/sys/devices.h **** 
  79:src/sys/devices.h **** 
  80:src/sys/devices.h **** /* RM §3.6.7 */ 
  81:src/sys/devices.h **** struct FLASH_registers {
  82:src/sys/devices.h ****   uint32_t ACR;
  83:src/sys/devices.h ****   uint32_t KEYR;
  84:src/sys/devices.h ****   uint32_t OPTKEYR;
  85:src/sys/devices.h ****   uint32_t SR;
  86:src/sys/devices.h ****   uint32_t CR;
  87:src/sys/devices.h ****   uint32_t OPTCR;  
  88:src/sys/devices.h **** };
  89:src/sys/devices.h **** 
  90:src/sys/devices.h **** /* RM §4.4.4 */
  91:src/sys/devices.h **** struct CRC_registers {
  92:src/sys/devices.h ****   uint32_t DR;
  93:src/sys/devices.h ****   uint32_t ICR;
  94:src/sys/devices.h ****   uint32_t CR;
  95:src/sys/devices.h **** };
  96:src/sys/devices.h **** 
  97:src/sys/devices.h **** /* RM §5.5 */
  98:src/sys/devices.h **** struct PWR_registers {
  99:src/sys/devices.h ****   uint32_t CR;
 100:src/sys/devices.h ****   uint32_t CSR;
 101:src/sys/devices.h **** };
 102:src/sys/devices.h **** 
 103:src/sys/devices.h **** /* RM §6.3.28 */
 104:src/sys/devices.h **** struct RCC_registers {
 105:src/sys/devices.h ****   uint32_t CR;
 106:src/sys/devices.h ****   uint32_t PLLCFGR;
 107:src/sys/devices.h ****   uint32_t CFGR;
 108:src/sys/devices.h ****   uint32_t CIR;
 109:src/sys/devices.h ****   uint32_t AHB1RSTR;
 110:src/sys/devices.h ****   uint32_t AHB2RSTR;
 111:src/sys/devices.h ****   uint32_t AHB3RSTR;
 112:src/sys/devices.h ****   __reserved(0x1c);
 113:src/sys/devices.h ****   uint32_t APB1RSTR;
 114:src/sys/devices.h ****   uint32_t APB2RSTR;
 115:src/sys/devices.h ****   __reserved(0x28);
 116:src/sys/devices.h ****   __reserved(0x2c);
 117:src/sys/devices.h ****   uint32_t AHB1ENR;
 118:src/sys/devices.h ****   uint32_t AHB2ENR;
 119:src/sys/devices.h ****   uint32_t AHB3ENR;
 120:src/sys/devices.h ****   __reserved(0x3c);
 121:src/sys/devices.h ****   uint32_t APB1ENR;
 122:src/sys/devices.h ****   uint32_t APB2ENR;
 123:src/sys/devices.h ****   __reserved(0x48);
 124:src/sys/devices.h ****   __reserved(0x4c);
 125:src/sys/devices.h ****   uint32_t AHB1LPENR;
 126:src/sys/devices.h ****   uint32_t AHB2LPENR;
 127:src/sys/devices.h ****   uint32_t AHB3LPENR;
 128:src/sys/devices.h ****   __reserved(0x5c);
 129:src/sys/devices.h ****   uint32_t APB1LPENR;
 130:src/sys/devices.h ****   uint32_t APB2LPENR;
 131:src/sys/devices.h ****   __reserved(0x68);
 132:src/sys/devices.h ****   __reserved(0x6c);
 133:src/sys/devices.h ****   uint32_t BDCR;
 134:src/sys/devices.h ****   uint32_t CSR;
 135:src/sys/devices.h ****   __reserved(0x78);
 136:src/sys/devices.h ****   __reserved(0x7c);
 137:src/sys/devices.h ****   uint32_t SSCGR;
 138:src/sys/devices.h ****   uint32_t PLLI2SCFGR;
 139:src/sys/devices.h ****   uint32_t PLLSAICFGR;
 140:src/sys/devices.h ****   uint32_t DCKCFGR;
 141:src/sys/devices.h ****   uint32_t CKGATENR;
 142:src/sys/devices.h ****   uint32_t DCKCFGR2;
 143:src/sys/devices.h **** };
 144:src/sys/devices.h **** 
 145:src/sys/devices.h **** /* RM §7.4.11 */
 146:src/sys/devices.h **** struct GPIO_registers {
 147:src/sys/devices.h ****   uint32_t MODER;
 148:src/sys/devices.h ****   uint32_t OTYPER;
 149:src/sys/devices.h ****   uint32_t OSPEEDR;
 150:src/sys/devices.h ****   uint32_t PUPDR;
 151:src/sys/devices.h ****   uint32_t IDR;
 152:src/sys/devices.h ****   uint32_t ODR;
 153:src/sys/devices.h ****   uint32_t BSRR;
 154:src/sys/devices.h ****   uint32_t LCKR;
 155:src/sys/devices.h ****   uint32_t AFRL;
 156:src/sys/devices.h ****   uint32_t AFRH;
 157:src/sys/devices.h **** };
 158:src/sys/devices.h **** 
 159:src/sys/devices.h **** /* RM §8.2.9 */
 160:src/sys/devices.h **** struct SYSCFG_registers {
 161:src/sys/devices.h ****   uint32_t MEMRMP;
 162:src/sys/devices.h ****   uint32_t PMC;
 163:src/sys/devices.h ****   uint32_t EXTICR1;
 164:src/sys/devices.h ****   uint32_t EXTICR2;
 165:src/sys/devices.h ****   uint32_t EXTICR3;
 166:src/sys/devices.h ****   uint32_t EXTICR4;
 167:src/sys/devices.h ****   __reserved(0x18);
 168:src/sys/devices.h ****   __reserved(0x1c);
 169:src/sys/devices.h ****   uint32_t CMPCR;
 170:src/sys/devices.h ****   __reserved(0x24);
 171:src/sys/devices.h ****   __reserved(0x28);
 172:src/sys/devices.h ****   uint32_t CFGR;
 173:src/sys/devices.h **** };
 174:src/sys/devices.h **** 
 175:src/sys/devices.h **** /* RM §9.5.11 */
 176:src/sys/devices.h **** struct DMA_Sx_registers {
 177:src/sys/devices.h ****   uint32_t CR;
 178:src/sys/devices.h ****   uint32_t NDTR;
 179:src/sys/devices.h ****   void* PAR;
 180:src/sys/devices.h ****   void* M0AR;
 181:src/sys/devices.h ****   void* M1AR;
 182:src/sys/devices.h ****   uint32_t FCR;
 183:src/sys/devices.h **** };
 184:src/sys/devices.h **** struct DMA_registers {
 185:src/sys/devices.h ****   uint32_t LISR;
 186:src/sys/devices.h ****   uint32_t HISR;
 187:src/sys/devices.h ****   uint32_t LIFCR;
 188:src/sys/devices.h ****   uint32_t HIFCR;
 189:src/sys/devices.h ****   struct DMA_Sx_registers S[8];
 190:src/sys/devices.h **** };
 191:src/sys/devices.h **** 
 192:src/sys/devices.h **** /* RM §10.3.7 */
 193:src/sys/devices.h **** struct EXTI_registers {
 194:src/sys/devices.h ****   uint32_t IMR;
 195:src/sys/devices.h ****   uint32_t EMR;
 196:src/sys/devices.h ****   uint32_t RTSR;
 197:src/sys/devices.h ****   uint32_t FTSR;
 198:src/sys/devices.h ****   uint32_t SWIER;
 199:src/sys/devices.h ****   uint32_t PR;
 200:src/sys/devices.h **** };
 201:src/sys/devices.h **** 
 202:src/sys/devices.h **** /* RM §11.8 */
 203:src/sys/devices.h **** struct FMC_registers {
 204:src/sys/devices.h ****   uint32_t BCR1;
 205:src/sys/devices.h ****   uint32_t BCR2;
 206:src/sys/devices.h ****   uint32_t BCR3;
 207:src/sys/devices.h ****   uint32_t BCR4;
 208:src/sys/devices.h ****   uint32_t BTR1;
 209:src/sys/devices.h ****   uint32_t BTR2;
 210:src/sys/devices.h ****   uint32_t BTR3;
 211:src/sys/devices.h ****   uint32_t BTR4;
 212:src/sys/devices.h ****   uint32_t BWTR1;
 213:src/sys/devices.h ****   uint32_t BWTR2;
 214:src/sys/devices.h ****   uint32_t BWTR3;
 215:src/sys/devices.h ****   uint32_t BWTR4;
 216:src/sys/devices.h ****   uint32_t PCR;
 217:src/sys/devices.h ****   uint32_t SR;
 218:src/sys/devices.h ****   uint32_t PMEM;
 219:src/sys/devices.h ****   uint32_t PATT;
 220:src/sys/devices.h ****   uint32_t ECCR;
 221:src/sys/devices.h ****   uint32_t SDCR1;
 222:src/sys/devices.h ****   uint32_t SDCR2;
 223:src/sys/devices.h ****   uint32_t SDTR1;
 224:src/sys/devices.h ****   uint32_t SDTR2;
 225:src/sys/devices.h ****   uint32_t SDCMR;
 226:src/sys/devices.h ****   uint32_t SDRTR;
 227:src/sys/devices.h ****   uint32_t SDSR;
 228:src/sys/devices.h **** };
 229:src/sys/devices.h **** 
 230:src/sys/devices.h **** /* RM §12.5.14 */
 231:src/sys/devices.h **** struct QUADSPI_registers {
 232:src/sys/devices.h ****   uint32_t CR;
 233:src/sys/devices.h ****   uint32_t DCR;
 234:src/sys/devices.h ****   uint32_t SR;
 235:src/sys/devices.h ****   uint32_t FCR;
 236:src/sys/devices.h ****   uint32_t DLR;
 237:src/sys/devices.h ****   uint32_t CCR;
 238:src/sys/devices.h ****   uint32_t AR;
 239:src/sys/devices.h ****   uint32_t ABR;
 240:src/sys/devices.h ****   uint32_t DR;
 241:src/sys/devices.h ****   uint32_t PSMKR;
 242:src/sys/devices.h ****   uint32_t PSMAR;
 243:src/sys/devices.h ****   uint32_t PIR;
 244:src/sys/devices.h ****   uint32_t LPTR;
 245:src/sys/devices.h **** };
 246:src/sys/devices.h **** 
 247:src/sys/devices.h **** /* RM §13.13.18 */
 248:src/sys/devices.h **** struct ADCx_registers {
 249:src/sys/devices.h ****   uint32_t SR;
 250:src/sys/devices.h ****   uint32_t CR1;
 251:src/sys/devices.h ****   uint32_t CR2;
 252:src/sys/devices.h ****   uint32_t SMPR1;
 253:src/sys/devices.h ****   uint32_t SMPR2;
 254:src/sys/devices.h ****   uint32_t JOFR1;
 255:src/sys/devices.h ****   uint32_t JOFR2;
 256:src/sys/devices.h ****   uint32_t JOFR3;
 257:src/sys/devices.h ****   uint32_t JOFR4;
 258:src/sys/devices.h ****   uint32_t HTR;
 259:src/sys/devices.h ****   uint32_t LTR;
 260:src/sys/devices.h ****   uint32_t SQR1;
 261:src/sys/devices.h ****   uint32_t SQR2;
 262:src/sys/devices.h ****   uint32_t SQR3;
 263:src/sys/devices.h ****   uint32_t JSQR;
 264:src/sys/devices.h ****   uint32_t JDR1;
 265:src/sys/devices.h ****   uint32_t JDR2;
 266:src/sys/devices.h ****   uint32_t JDR3;
 267:src/sys/devices.h ****   uint32_t JDR4;
 268:src/sys/devices.h ****   uint32_t DR;
 269:src/sys/devices.h **** };
 270:src/sys/devices.h **** 
 271:src/sys/devices.h **** struct ADC_common_registers {
 272:src/sys/devices.h ****   uint32_t CSR;
 273:src/sys/devices.h ****   uint32_t CCR;
 274:src/sys/devices.h ****   uint32_t CDR;
 275:src/sys/devices.h **** };
 276:src/sys/devices.h **** 
 277:src/sys/devices.h **** 
 278:src/sys/devices.h **** /* RM §14.5.15 */
 279:src/sys/devices.h **** struct DAC_registers {
 280:src/sys/devices.h ****   uint32_t CR;
 281:src/sys/devices.h ****   uint32_t SWTRIGR;
 282:src/sys/devices.h ****   uint32_t DHR12R1;
 283:src/sys/devices.h ****   uint32_t DHR12L1;
 284:src/sys/devices.h ****   uint32_t DHR8R1;
 285:src/sys/devices.h ****   uint32_t DHR12R2;
 286:src/sys/devices.h ****   uint32_t DHR12L2;
 287:src/sys/devices.h ****   uint32_t DHR8R2;
 288:src/sys/devices.h ****   uint32_t DHR12RD;
 289:src/sys/devices.h ****   uint32_t DHR12LD;
 290:src/sys/devices.h ****   uint32_t DHR8RD;
 291:src/sys/devices.h ****   uint32_t DOR1;
 292:src/sys/devices.h ****   uint32_t DOR2;
 293:src/sys/devices.h ****   uint32_t SR;
 294:src/sys/devices.h **** };
 295:src/sys/devices.h **** 
 296:src/sys/devices.h **** /* RM §15.8.12 */
 297:src/sys/devices.h **** struct DCMI_registers {
 298:src/sys/devices.h ****   uint32_t CR;
 299:src/sys/devices.h ****   uint32_t SR;
 300:src/sys/devices.h ****   uint32_t RIS;
 301:src/sys/devices.h ****   uint32_t IER;
 302:src/sys/devices.h ****   uint32_t MIS;
 303:src/sys/devices.h ****   uint32_t ICR;
 304:src/sys/devices.h ****   uint32_t ESCR;
 305:src/sys/devices.h ****   uint32_t ESUR;
 306:src/sys/devices.h ****   uint32_t CWSTRT;
 307:src/sys/devices.h ****   uint32_t CWSIZE;
 308:src/sys/devices.h ****   uint32_t DR;
 309:src/sys/devices.h **** };
 310:src/sys/devices.h **** 
 311:src/sys/devices.h **** /* RM §16.4.21 TIM1,8 */
 312:src/sys/devices.h **** /* RM §17.4.21 TIM2,3,4,5 */
 313:src/sys/devices.h **** /* RM §18.4.13 TIM9,12 */
 314:src/sys/devices.h **** /* RM §18.5.1  TIM10,11,13,14 */
 315:src/sys/devices.h **** /* RM §19.4.9  TIM6,7 */
 316:src/sys/devices.h **** struct TIMx_registers {
 317:src/sys/devices.h ****   uint32_t CR1;
 318:src/sys/devices.h ****   uint32_t CR2;
 319:src/sys/devices.h ****   uint32_t SMCR;
 320:src/sys/devices.h ****   uint32_t DIER;
 321:src/sys/devices.h ****   uint32_t SR;
 322:src/sys/devices.h ****   uint32_t EGR;
 323:src/sys/devices.h ****   uint32_t CCMR1;
 324:src/sys/devices.h ****   uint32_t CCMR2;
 325:src/sys/devices.h ****   uint32_t CCER;
 326:src/sys/devices.h ****   uint32_t CNT;
 327:src/sys/devices.h ****   uint32_t PSC;
 328:src/sys/devices.h ****   uint32_t ARR;
 329:src/sys/devices.h ****   uint32_t RCR;
 330:src/sys/devices.h ****   uint32_t CCR1;
 331:src/sys/devices.h ****   uint32_t CCR2;
 332:src/sys/devices.h ****   uint32_t CCR3;
 333:src/sys/devices.h ****   uint32_t CCR4;
 334:src/sys/devices.h ****   uint32_t BDTR;
 335:src/sys/devices.h ****   uint32_t DCR;
 336:src/sys/devices.h ****   uint32_t DMAR;
 337:src/sys/devices.h ****   uint32_t OR;
 338:src/sys/devices.h **** };
 339:src/sys/devices.h **** 
 340:src/sys/devices.h **** /* RM §20.4.5 */
 341:src/sys/devices.h **** struct IWDG_registers {
 342:src/sys/devices.h ****   uint32_t KR;
 343:src/sys/devices.h ****   uint32_t PR;
 344:src/sys/devices.h ****   uint32_t RLR;
 345:src/sys/devices.h ****   uint32_t SR;
 346:src/sys/devices.h **** };
 347:src/sys/devices.h **** 
 348:src/sys/devices.h **** /* RM §21.6.4 */
 349:src/sys/devices.h **** struct WWDG_registers {
 350:src/sys/devices.h ****   uint32_t CR;
 351:src/sys/devices.h ****   uint32_t CFR;
 352:src/sys/devices.h ****   uint32_t SR;
 353:src/sys/devices.h **** };
 354:src/sys/devices.h **** 
 355:src/sys/devices.h **** /* RM §22.6.21 */
 356:src/sys/devices.h **** struct RTC_registers {
 357:src/sys/devices.h ****   uint32_t TR;
 358:src/sys/devices.h ****   uint32_t DR;
 359:src/sys/devices.h ****   uint32_t CR;
 360:src/sys/devices.h ****   uint32_t ISR;
 361:src/sys/devices.h ****   uint32_t PRER;
 362:src/sys/devices.h ****   uint32_t WUTR;
 363:src/sys/devices.h ****   uint32_t CALIBR;
 364:src/sys/devices.h ****   uint32_t ALRMAR;
 365:src/sys/devices.h ****   uint32_t ALRMBR;
 366:src/sys/devices.h ****   uint32_t WPR;
 367:src/sys/devices.h ****   uint32_t SSR;
 368:src/sys/devices.h ****   uint32_t SHIFTR;
 369:src/sys/devices.h ****   uint32_t TSTR;
 370:src/sys/devices.h ****   uint32_t TSSSR;
 371:src/sys/devices.h ****   uint32_t CALR;
 372:src/sys/devices.h ****   uint32_t TAFCR;
 373:src/sys/devices.h ****   uint32_t ALRMASSR;
 374:src/sys/devices.h ****   uint32_t ALRMBSSR;
 375:src/sys/devices.h ****   uint32_t BKPR[20];
 376:src/sys/devices.h **** };
 377:src/sys/devices.h **** 
 378:src/sys/devices.h **** /* RM §23.7.12 */
 379:src/sys/devices.h **** struct FMPI2C_registers {
 380:src/sys/devices.h ****   uint32_t CR1;
 381:src/sys/devices.h ****   uint32_t CR2;
 382:src/sys/devices.h ****   uint32_t OAR1;
 383:src/sys/devices.h ****   uint32_t OAR2;
 384:src/sys/devices.h ****   uint32_t TIMINGR;
 385:src/sys/devices.h ****   uint32_t TIMEOUTR;
 386:src/sys/devices.h ****   uint32_t ISR;
 387:src/sys/devices.h ****   uint32_t ICR;
 388:src/sys/devices.h ****   uint32_t PECR;
 389:src/sys/devices.h ****   uint32_t RXDR;
 390:src/sys/devices.h ****   uint32_t TXDR;
 391:src/sys/devices.h **** };
 392:src/sys/devices.h **** 
 393:src/sys/devices.h **** /* RM §24.6.14 */
 394:src/sys/devices.h **** struct I2C_registers {
 395:src/sys/devices.h ****   uint32_t CR1;
 396:src/sys/devices.h ****   uint32_t CR2;
 397:src/sys/devices.h ****   uint32_t OAR1;
 398:src/sys/devices.h ****   uint32_t OAR2;
 399:src/sys/devices.h ****   uint32_t DR;
 400:src/sys/devices.h ****   uint32_t SR1;
 401:src/sys/devices.h ****   uint32_t SR2;
 402:src/sys/devices.h ****   uint32_t CCR;
 403:src/sys/devices.h ****   uint32_t TRISE;
 404:src/sys/devices.h ****   uint32_t FLTR;
 405:src/sys/devices.h **** };
 406:src/sys/devices.h **** 
 407:src/sys/devices.h **** /* RM §25.6.8 */
 408:src/sys/devices.h **** struct USART_registers {
 409:src/sys/devices.h ****   uint32_t SR;
 410:src/sys/devices.h ****   uint32_t DR;
 411:src/sys/devices.h ****   uint32_t BRR;
 412:src/sys/devices.h ****   uint32_t CR1;
 413:src/sys/devices.h ****   uint32_t CR2;
 414:src/sys/devices.h ****   uint32_t CR3;
 415:src/sys/devices.h ****   uint32_t GTPR;
 416:src/sys/devices.h **** };
 417:src/sys/devices.h **** 
 418:src/sys/devices.h **** /* RM §26.7.10 */
 419:src/sys/devices.h **** struct SPI_I2S_registers {
 420:src/sys/devices.h ****   uint32_t CR1;
 421:src/sys/devices.h ****   uint32_t CR2;
 422:src/sys/devices.h ****   uint32_t SR;
 423:src/sys/devices.h ****   uint32_t DR;
 424:src/sys/devices.h ****   uint32_t CRCPR;
 425:src/sys/devices.h ****   uint32_t RXCRCR;
 426:src/sys/devices.h ****   uint32_t TXCRCR;
 427:src/sys/devices.h ****   uint32_t I2SCFGR;
 428:src/sys/devices.h ****   uint32_t I2SPR;
 429:src/sys/devices.h **** };
 430:src/sys/devices.h **** 
 431:src/sys/devices.h **** /* RM §27.5.10 */
 432:src/sys/devices.h **** struct SPDIFRX_registers {
 433:src/sys/devices.h ****   uint32_t CR;
 434:src/sys/devices.h ****   uint32_t IMR;
 435:src/sys/devices.h ****   uint32_t SR;
 436:src/sys/devices.h ****   uint32_t IFCR;
 437:src/sys/devices.h ****   uint32_t DR;
 438:src/sys/devices.h ****   uint32_t CSR;
 439:src/sys/devices.h ****   uint32_t DIR;
 440:src/sys/devices.h **** };
 441:src/sys/devices.h **** 
 442:src/sys/devices.h **** /* RM §28.5.10 */
 443:src/sys/devices.h **** struct SAI_x_registers {
 444:src/sys/devices.h ****   uint32_t CR1;
 445:src/sys/devices.h ****   uint32_t CR2;
 446:src/sys/devices.h ****   uint32_t FRCR;
 447:src/sys/devices.h ****   uint32_t SLOTR;
 448:src/sys/devices.h ****   uint32_t IM;
 449:src/sys/devices.h ****   uint32_t SR;
 450:src/sys/devices.h ****   uint32_t CLRFR;
 451:src/sys/devices.h ****   uint32_t DR;
 452:src/sys/devices.h **** };
 453:src/sys/devices.h **** 
 454:src/sys/devices.h **** struct SAI_registers {
 455:src/sys/devices.h ****   uint32_t GCR;
 456:src/sys/devices.h ****   struct SAI_x_registers A;
 457:src/sys/devices.h ****   struct SAI_x_registers B;
 458:src/sys/devices.h **** };
 459:src/sys/devices.h **** 
 460:src/sys/devices.h **** /* RM §29.8.16 */
 461:src/sys/devices.h **** struct SDIO_registers {
 462:src/sys/devices.h ****   uint32_t POWER;
 463:src/sys/devices.h ****   uint32_t CLKCR;
 464:src/sys/devices.h ****   uint32_t CMD;
 465:src/sys/devices.h ****   uint32_t RESPCMD;
 466:src/sys/devices.h ****   uint32_t RESP1;
 467:src/sys/devices.h ****   uint32_t RESP2;
 468:src/sys/devices.h ****   uint32_t RESP3;
 469:src/sys/devices.h ****   uint32_t RESP4;
 470:src/sys/devices.h ****   uint32_t DTIMER;
 471:src/sys/devices.h ****   uint32_t DLEN;
 472:src/sys/devices.h ****   uint32_t DCTRL;
 473:src/sys/devices.h ****   uint32_t DCOUNT;
 474:src/sys/devices.h ****   uint32_t STA;
 475:src/sys/devices.h ****   uint32_t ICR;
 476:src/sys/devices.h ****   uint32_t MASK;
 477:src/sys/devices.h ****   __reserved(0x40);
 478:src/sys/devices.h ****   __reserved(0x44);
 479:src/sys/devices.h ****   uint32_t FIFOCNT;
 480:src/sys/devices.h ****   __reserved_interval(0x4c,0x80);
 481:src/sys/devices.h ****   uint32_t FIFO[32];
 482:src/sys/devices.h **** };
 483:src/sys/devices.h ****   
 484:src/sys/devices.h **** /* RM §30.9.5 */
 485:src/sys/devices.h **** struct bxCAN_TxRx_registers {
 486:src/sys/devices.h ****   uint32_t IR;
 487:src/sys/devices.h ****   uint32_t DTR;
 488:src/sys/devices.h ****   uint32_t DLR;
 489:src/sys/devices.h ****   uint32_t DHR;
 490:src/sys/devices.h **** };
 491:src/sys/devices.h **** 
 492:src/sys/devices.h **** struct bxCAN_registers {
 493:src/sys/devices.h ****   uint32_t MCR;
 494:src/sys/devices.h ****   uint32_t MSR;
 495:src/sys/devices.h ****   uint32_t TSR;
 496:src/sys/devices.h ****   uint32_t RF0R;
 497:src/sys/devices.h ****   uint32_t RF1R;
 498:src/sys/devices.h ****   uint32_t IER;
 499:src/sys/devices.h ****   uint32_t ESR;
 500:src/sys/devices.h ****   uint32_t BTR;
 501:src/sys/devices.h ****   __reserved_interval(0x20,0x180);
 502:src/sys/devices.h ****   struct bxCAN_TxRx_registers Tx[3];
 503:src/sys/devices.h ****   struct bxCAN_TxRx_registers Rx[2];
 504:src/sys/devices.h ****   __reserved_interval(0x1d0,0x200);
 505:src/sys/devices.h ****   uint32_t FMR;
 506:src/sys/devices.h ****   uint32_t FM1R;
 507:src/sys/devices.h ****   __reserved(0x208);
 508:src/sys/devices.h ****   uint32_t FS1R;
 509:src/sys/devices.h ****   __reserved(0x210);
 510:src/sys/devices.h ****   uint32_t FFA1R;
 511:src/sys/devices.h ****   __reserved(0x218);
 512:src/sys/devices.h ****   uint32_t FA1R;
 513:src/sys/devices.h ****   __reserved_interval(0x220,0x240);
 514:src/sys/devices.h ****   struct {uint32_t R1; uint32_t R2;} F[28];
 515:src/sys/devices.h **** };
 516:src/sys/devices.h **** 
 517:src/sys/devices.h **** /* RM §32.7.7 */
 518:src/sys/devices.h **** struct OTG_registers {
 519:src/sys/devices.h ****    /* TODO */
 520:src/sys/devices.h **** };
 521:src/sys/devices.h **** 
 522:src/sys/devices.h **** /* RM §32.7.7 */
 523:src/sys/devices.h **** struct HDMI_CEC_registers {
 524:src/sys/devices.h ****   uint32_t CR;
 525:src/sys/devices.h ****   uint32_t CFGR;
 526:src/sys/devices.h ****   uint32_t TXDR;
 527:src/sys/devices.h ****   uint32_t RXDR;
 528:src/sys/devices.h ****   uint32_t ISR;
 529:src/sys/devices.h ****   uint32_t IER;
 530:src/sys/devices.h **** };
 531:src/sys/devices.h **** 
 532:src/sys/devices.h **** /* RM §33.18 */
 533:src/sys/devices.h **** struct DBGMCU_registers {
 534:src/sys/devices.h ****   uint32_t IDCODE;
 535:src/sys/devices.h ****   uint32_t CR;
 536:src/sys/devices.h ****   uint32_t APB1FZ;
 537:src/sys/devices.h ****   uint32_t APB2FZ;
 538:src/sys/devices.h **** };
 539:src/sys/devices.h **** 
 540:src/sys/devices.h **** /* Constant values */
 541:src/sys/devices.h **** 
 542:src/sys/devices.h **** extern const uint16_t Package_data;
 543:src/sys/devices.h **** extern const uint16_t TS_CAL2;
 544:src/sys/devices.h **** extern const uint16_t TS_CAL1;
 545:src/sys/devices.h **** extern const uint16_t VREFIN_CAL;
 546:src/sys/devices.h **** extern const uint16_t Flash_size;
 547:src/sys/devices.h **** extern const uint32_t U_ID[3];
 548:src/sys/devices.h **** 
 549:src/sys/devices.h **** /* Core Devices base addresses */
 550:src/sys/devices.h **** 
 551:src/sys/devices.h **** extern volatile struct DBGMCU_registers DBG;
 552:src/sys/devices.h **** 
 553:src/sys/devices.h **** extern volatile struct FPU_registers FPU;
 554:src/sys/devices.h **** extern volatile uint32_t NVIC_STIR;
 555:src/sys/devices.h **** extern volatile struct MPU_registers MPU;
 556:src/sys/devices.h **** extern volatile uint32_t FPU_CPACR;
 557:src/sys/devices.h **** extern volatile struct SCB_registers SCB;
 558:src/sys/devices.h **** extern volatile struct NVIC_registers NVIC;
 559:src/sys/devices.h **** extern volatile struct STK_registers SysTick;
 560:src/sys/devices.h **** 
 561:src/sys/devices.h **** /* Devices base addresses */
 562:src/sys/devices.h **** 
 563:src/sys/devices.h **** extern volatile struct QUADSPI_registers QUADSPI;
 564:src/sys/devices.h **** 
 565:src/sys/devices.h **** extern volatile struct DCMI_registers DCMI;
 566:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_FS;
 567:src/sys/devices.h **** 
 568:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_HS;
 569:src/sys/devices.h **** extern volatile struct DMA_registers DMA2;
 570:src/sys/devices.h **** extern volatile struct DMA_registers DMA1;
 571:src/sys/devices.h **** extern uint32_t BKPSRAM[1024];
 572:src/sys/devices.h **** extern volatile struct FLASH_registers FLASH;
 573:src/sys/devices.h **** extern volatile struct RCC_registers RCC;
 574:src/sys/devices.h **** extern volatile struct CRC_registers CRC;
 575:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOH;
 576:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOG;
 577:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOF;
 578:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOE;
 579:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOD;
 580:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOC;
 581:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOB;
 582:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOA;
 583:src/sys/devices.h **** 
 584:src/sys/devices.h **** extern volatile struct SAI_registers SAI2;
 585:src/sys/devices.h **** extern volatile struct SAI_registers SAI1;
 586:src/sys/devices.h **** 
 587:src/sys/devices.h **** extern volatile struct TIMx_registers TIM11;
 588:src/sys/devices.h **** extern volatile struct TIMx_registers TIM10;
 589:src/sys/devices.h **** extern volatile struct TIMx_registers TIM9;
 590:src/sys/devices.h **** extern volatile struct EXTI_registers EXTI;
 591:src/sys/devices.h **** extern volatile struct SYSCFG_registers SYSCFG;
 592:src/sys/devices.h **** extern volatile struct SPI_registers SPI4;
 593:src/sys/devices.h **** extern volatile struct SPI_registers SPI1;
 594:src/sys/devices.h **** extern volatile struct SDIO_registers SDMMC;
 595:src/sys/devices.h **** extern volatile struct ADCx_registers ADC1;
 596:src/sys/devices.h **** extern volatile struct ADCx_registers ADC2;
 597:src/sys/devices.h **** extern volatile struct ADCx_registers ADC3;
 598:src/sys/devices.h **** extern volatile struct ADC_common_registers ADC_common;
 599:src/sys/devices.h **** extern volatile struct USART_registers USART6;
 600:src/sys/devices.h **** extern volatile struct USART_registers USART1;
 601:src/sys/devices.h **** extern volatile struct TIMx_registers TIM8;
 602:src/sys/devices.h **** extern volatile struct TIMx_registers TIM1;
 603:src/sys/devices.h **** 
 604:src/sys/devices.h **** extern volatile struct DAC_registers DAC;
 605:src/sys/devices.h **** extern volatile struct PWR_registers PWR;
 606:src/sys/devices.h **** extern volatile struct HDMI_CEC_registers HDMI_CEC;
 607:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN2;
 608:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN1;
 609:src/sys/devices.h **** extern volatile struct FMPI2C_registers FMPI2C1;
 610:src/sys/devices.h **** extern volatile struct I2C_registers I2C3;
 611:src/sys/devices.h **** extern volatile struct I2C_registers I2C2;
 612:src/sys/devices.h **** extern volatile struct I2C_registers I2C1;
 613:src/sys/devices.h **** extern volatile struct USART_registers UART5;
 614:src/sys/devices.h **** extern volatile struct USART_registers UART4;
 615:src/sys/devices.h **** extern volatile struct USART_registers USART3;
 616:src/sys/devices.h **** extern volatile struct USART_registers USART2;
 617:src/sys/devices.h **** extern volatile struct SPDIF_RX_registers SPDIF_RX;
 618:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI3_I2S3;
 619:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI2_I2S2;
 620:src/sys/devices.h **** extern volatile struct IWDG_registers IWDG;
 621:src/sys/devices.h **** extern volatile struct WWDG_registers WWDG;
 622:src/sys/devices.h **** extern volatile struct RTC_registers RTC_BKP;
 623:src/sys/devices.h **** extern volatile struct TIMx_registers TIM14;
 624:src/sys/devices.h **** extern volatile struct TIMx_registers TIM13;
 625:src/sys/devices.h **** extern volatile struct TIMx_registers TIM12;
 626:src/sys/devices.h **** extern volatile struct TIMx_registers TIM7;
 627:src/sys/devices.h **** extern volatile struct TIMx_registers TIM6;
 628:src/sys/devices.h **** extern volatile struct TIMx_registers TIM5;
 629:src/sys/devices.h **** extern volatile struct TIMx_registers TIM4;
 630:src/sys/devices.h **** extern volatile struct TIMx_registers TIM3;
 631:src/sys/devices.h **** extern volatile struct TIMx_registers TIM2;
 632:src/sys/devices.h **** 
 633:src/sys/devices.h **** #define __set_bit(_w,_i) ((_w)|=(1<<(_i)))
 634:src/sys/devices.h **** #define __clr_bit(_w,_i) ((_w) &= ~(1<<(_i)))
 635:src/sys/devices.h **** #define __really_inline__ static inline __attribute__((always_inline)) 
 636:src/sys/devices.h **** #define __sync __DSB
 637:src/sys/devices.h **** 
 638:src/sys/devices.h **** #define __declare_device_control(name,bus,bus_bit) \
 639:src/sys/devices.h ****   void __really_inline__ enable_##name() { \
 640:src/sys/devices.h ****     __set_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 641:src/sys/devices.h ****   void __really_inline__ low_power_enable_##name() { \
 642:src/sys/devices.h ****     __set_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 643:src/sys/devices.h ****   void __really_inline__ disable_##name() { \
 644:src/sys/devices.h ****     __clr_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 645:src/sys/devices.h ****   void __really_inline__ low_power_disable_## name() { \
 646:src/sys/devices.h ****     __clr_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 647:src/sys/devices.h ****   void __really_inline__ reset_##name() { \
 648:src/sys/devices.h ****     __set_bit(RCC.bus##RSTR,bus_bit); __sync(); } \
 649:src/sys/devices.h **** \
 650:src/sys/devices.h **** 
 651:src/sys/devices.h **** /* __declare_device_control(FMC,AHB3,0) FMC not available in LQFP64 package */
 652:src/sys/devices.h **** __declare_device_control(QUADSPI,AHB3,1)
 653:src/sys/devices.h **** 
 654:src/sys/devices.h **** __declare_device_control(DCMI,AHB2,0)
 655:src/sys/devices.h **** __declare_device_control(USB_OTG_FS,AHB2,7)
 656:src/sys/devices.h **** 
 657:src/sys/devices.h **** __declare_device_control(USB_OTG_HS,AHB1,29)
 658:src/sys/devices.h **** __declare_device_control(DMA2,AHB1,22)
 659:src/sys/devices.h **** __declare_device_control(DMA1,AHB1,21)
 660:src/sys/devices.h **** __declare_device_control(CRC,AHB1,12)
 661:src/sys/devices.h **** __declare_device_control(GPIOH,AHB1,7)
 662:src/sys/devices.h **** __declare_device_control(GPIOG,AHB1,6)
 663:src/sys/devices.h **** __declare_device_control(GPIOF,AHB1,5)
 664:src/sys/devices.h **** __declare_device_control(GPIOE,AHB1,4)
 665:src/sys/devices.h **** __declare_device_control(GPIOD,AHB1,3)
 666:src/sys/devices.h **** __declare_device_control(GPIOC,AHB1,2)
 667:src/sys/devices.h **** __declare_device_control(GPIOB,AHB1,1)
 668:src/sys/devices.h **** __declare_device_control(GPIOA,AHB1,0)
 310              		.loc 2 668 0
 311 0000 074A     		ldr	r2, .L31
 312              	.LBE10:
 313              	.LBE9:
  80:src/main.c    **** 	enable_GPIOA();
 314              		.loc 1 80 0
 315 0002 08B5     		push	{r3, lr}
 316              		.cfi_def_cfa_offset 8
 317              		.cfi_offset 3, -8
 318              		.cfi_offset 14, -4
 319              	.LBB14:
 320              	.LBB13:
 321              		.loc 2 668 0
 322 0004 136B     		ldr	r3, [r2, #48]
 323 0006 43F00103 		orr	r3, r3, #1
 324 000a 1363     		str	r3, [r2, #48]
 325              	.LBB11:
 326              	.LBB12:
 327              		.file 3 "src/sys/cmsis_gcc.h"
   1:src/sys/cmsis_gcc.h **** /**************************************************************************//**
   2:src/sys/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:src/sys/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:src/sys/cmsis_gcc.h ****  * @version  V4.30
   5:src/sys/cmsis_gcc.h ****  * @date     20. October 2015
   6:src/sys/cmsis_gcc.h ****  ******************************************************************************/
   7:src/sys/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:src/sys/cmsis_gcc.h **** 
   9:src/sys/cmsis_gcc.h ****    All rights reserved.
  10:src/sys/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:src/sys/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:src/sys/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:src/sys/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:src/sys/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:src/sys/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:src/sys/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:src/sys/cmsis_gcc.h ****      specific prior written permission.
  20:src/sys/cmsis_gcc.h ****    *
  21:src/sys/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:src/sys/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:src/sys/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:src/sys/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:src/sys/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:src/sys/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:src/sys/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:src/sys/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:src/sys/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:src/sys/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:src/sys/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:src/sys/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:src/sys/cmsis_gcc.h **** 
  34:src/sys/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  35:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_H
  36:src/sys/cmsis_gcc.h **** 
  37:src/sys/cmsis_gcc.h **** /* ignore some GCC warnings */
  38:src/sys/cmsis_gcc.h **** #if defined ( __GNUC__ )
  39:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic push
  40:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  41:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  42:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  43:src/sys/cmsis_gcc.h **** #endif
  44:src/sys/cmsis_gcc.h **** 
  45:src/sys/cmsis_gcc.h **** 
  46:src/sys/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  47:src/sys/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  48:src/sys/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  49:src/sys/cmsis_gcc.h ****   @{
  50:src/sys/cmsis_gcc.h ****  */
  51:src/sys/cmsis_gcc.h **** 
  52:src/sys/cmsis_gcc.h **** /**
  53:src/sys/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  54:src/sys/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  55:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  56:src/sys/cmsis_gcc.h ****  */
  57:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  58:src/sys/cmsis_gcc.h **** {
  59:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  60:src/sys/cmsis_gcc.h **** }
  61:src/sys/cmsis_gcc.h **** 
  62:src/sys/cmsis_gcc.h **** 
  63:src/sys/cmsis_gcc.h **** /**
  64:src/sys/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  65:src/sys/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  66:src/sys/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  67:src/sys/cmsis_gcc.h ****  */
  68:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  69:src/sys/cmsis_gcc.h **** {
  70:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  71:src/sys/cmsis_gcc.h **** }
  72:src/sys/cmsis_gcc.h **** 
  73:src/sys/cmsis_gcc.h **** 
  74:src/sys/cmsis_gcc.h **** /**
  75:src/sys/cmsis_gcc.h ****   \brief   Get Control Register
  76:src/sys/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  77:src/sys/cmsis_gcc.h ****   \return               Control Register value
  78:src/sys/cmsis_gcc.h ****  */
  79:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  80:src/sys/cmsis_gcc.h **** {
  81:src/sys/cmsis_gcc.h ****   uint32_t result;
  82:src/sys/cmsis_gcc.h **** 
  83:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  84:src/sys/cmsis_gcc.h ****   return(result);
  85:src/sys/cmsis_gcc.h **** }
  86:src/sys/cmsis_gcc.h **** 
  87:src/sys/cmsis_gcc.h **** 
  88:src/sys/cmsis_gcc.h **** /**
  89:src/sys/cmsis_gcc.h ****   \brief   Set Control Register
  90:src/sys/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  91:src/sys/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  92:src/sys/cmsis_gcc.h ****  */
  93:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  94:src/sys/cmsis_gcc.h **** {
  95:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  96:src/sys/cmsis_gcc.h **** }
  97:src/sys/cmsis_gcc.h **** 
  98:src/sys/cmsis_gcc.h **** 
  99:src/sys/cmsis_gcc.h **** /**
 100:src/sys/cmsis_gcc.h ****   \brief   Get IPSR Register
 101:src/sys/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 102:src/sys/cmsis_gcc.h ****   \return               IPSR Register value
 103:src/sys/cmsis_gcc.h ****  */
 104:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 105:src/sys/cmsis_gcc.h **** {
 106:src/sys/cmsis_gcc.h ****   uint32_t result;
 107:src/sys/cmsis_gcc.h **** 
 108:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 109:src/sys/cmsis_gcc.h ****   return(result);
 110:src/sys/cmsis_gcc.h **** }
 111:src/sys/cmsis_gcc.h **** 
 112:src/sys/cmsis_gcc.h **** 
 113:src/sys/cmsis_gcc.h **** /**
 114:src/sys/cmsis_gcc.h ****   \brief   Get APSR Register
 115:src/sys/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 116:src/sys/cmsis_gcc.h ****   \return               APSR Register value
 117:src/sys/cmsis_gcc.h ****  */
 118:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 119:src/sys/cmsis_gcc.h **** {
 120:src/sys/cmsis_gcc.h ****   uint32_t result;
 121:src/sys/cmsis_gcc.h **** 
 122:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 123:src/sys/cmsis_gcc.h ****   return(result);
 124:src/sys/cmsis_gcc.h **** }
 125:src/sys/cmsis_gcc.h **** 
 126:src/sys/cmsis_gcc.h **** 
 127:src/sys/cmsis_gcc.h **** /**
 128:src/sys/cmsis_gcc.h ****   \brief   Get xPSR Register
 129:src/sys/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 130:src/sys/cmsis_gcc.h **** 
 131:src/sys/cmsis_gcc.h ****     \return               xPSR Register value
 132:src/sys/cmsis_gcc.h ****  */
 133:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 134:src/sys/cmsis_gcc.h **** {
 135:src/sys/cmsis_gcc.h ****   uint32_t result;
 136:src/sys/cmsis_gcc.h **** 
 137:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 138:src/sys/cmsis_gcc.h ****   return(result);
 139:src/sys/cmsis_gcc.h **** }
 140:src/sys/cmsis_gcc.h **** 
 141:src/sys/cmsis_gcc.h **** 
 142:src/sys/cmsis_gcc.h **** /**
 143:src/sys/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 144:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 145:src/sys/cmsis_gcc.h ****   \return               PSP Register value
 146:src/sys/cmsis_gcc.h ****  */
 147:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 148:src/sys/cmsis_gcc.h **** {
 149:src/sys/cmsis_gcc.h ****   register uint32_t result;
 150:src/sys/cmsis_gcc.h **** 
 151:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 152:src/sys/cmsis_gcc.h ****   return(result);
 153:src/sys/cmsis_gcc.h **** }
 154:src/sys/cmsis_gcc.h **** 
 155:src/sys/cmsis_gcc.h **** 
 156:src/sys/cmsis_gcc.h **** /**
 157:src/sys/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 158:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 159:src/sys/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 160:src/sys/cmsis_gcc.h ****  */
 161:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 162:src/sys/cmsis_gcc.h **** {
 163:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 164:src/sys/cmsis_gcc.h **** }
 165:src/sys/cmsis_gcc.h **** 
 166:src/sys/cmsis_gcc.h **** 
 167:src/sys/cmsis_gcc.h **** /**
 168:src/sys/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 169:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 170:src/sys/cmsis_gcc.h ****   \return               MSP Register value
 171:src/sys/cmsis_gcc.h ****  */
 172:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 173:src/sys/cmsis_gcc.h **** {
 174:src/sys/cmsis_gcc.h ****   register uint32_t result;
 175:src/sys/cmsis_gcc.h **** 
 176:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 177:src/sys/cmsis_gcc.h ****   return(result);
 178:src/sys/cmsis_gcc.h **** }
 179:src/sys/cmsis_gcc.h **** 
 180:src/sys/cmsis_gcc.h **** 
 181:src/sys/cmsis_gcc.h **** /**
 182:src/sys/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 183:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 184:src/sys/cmsis_gcc.h **** 
 185:src/sys/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 186:src/sys/cmsis_gcc.h ****  */
 187:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 188:src/sys/cmsis_gcc.h **** {
 189:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 190:src/sys/cmsis_gcc.h **** }
 191:src/sys/cmsis_gcc.h **** 
 192:src/sys/cmsis_gcc.h **** 
 193:src/sys/cmsis_gcc.h **** /**
 194:src/sys/cmsis_gcc.h ****   \brief   Get Priority Mask
 195:src/sys/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 196:src/sys/cmsis_gcc.h ****   \return               Priority Mask value
 197:src/sys/cmsis_gcc.h ****  */
 198:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 199:src/sys/cmsis_gcc.h **** {
 200:src/sys/cmsis_gcc.h ****   uint32_t result;
 201:src/sys/cmsis_gcc.h **** 
 202:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 203:src/sys/cmsis_gcc.h ****   return(result);
 204:src/sys/cmsis_gcc.h **** }
 205:src/sys/cmsis_gcc.h **** 
 206:src/sys/cmsis_gcc.h **** 
 207:src/sys/cmsis_gcc.h **** /**
 208:src/sys/cmsis_gcc.h ****   \brief   Set Priority Mask
 209:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 210:src/sys/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 211:src/sys/cmsis_gcc.h ****  */
 212:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 213:src/sys/cmsis_gcc.h **** {
 214:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 215:src/sys/cmsis_gcc.h **** }
 216:src/sys/cmsis_gcc.h **** 
 217:src/sys/cmsis_gcc.h **** 
 218:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 219:src/sys/cmsis_gcc.h **** 
 220:src/sys/cmsis_gcc.h **** /**
 221:src/sys/cmsis_gcc.h ****   \brief   Enable FIQ
 222:src/sys/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 223:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 224:src/sys/cmsis_gcc.h ****  */
 225:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 226:src/sys/cmsis_gcc.h **** {
 227:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 228:src/sys/cmsis_gcc.h **** }
 229:src/sys/cmsis_gcc.h **** 
 230:src/sys/cmsis_gcc.h **** 
 231:src/sys/cmsis_gcc.h **** /**
 232:src/sys/cmsis_gcc.h ****   \brief   Disable FIQ
 233:src/sys/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 234:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 235:src/sys/cmsis_gcc.h ****  */
 236:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 237:src/sys/cmsis_gcc.h **** {
 238:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 239:src/sys/cmsis_gcc.h **** }
 240:src/sys/cmsis_gcc.h **** 
 241:src/sys/cmsis_gcc.h **** 
 242:src/sys/cmsis_gcc.h **** /**
 243:src/sys/cmsis_gcc.h ****   \brief   Get Base Priority
 244:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 245:src/sys/cmsis_gcc.h ****   \return               Base Priority register value
 246:src/sys/cmsis_gcc.h ****  */
 247:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 248:src/sys/cmsis_gcc.h **** {
 249:src/sys/cmsis_gcc.h ****   uint32_t result;
 250:src/sys/cmsis_gcc.h **** 
 251:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 252:src/sys/cmsis_gcc.h ****   return(result);
 253:src/sys/cmsis_gcc.h **** }
 254:src/sys/cmsis_gcc.h **** 
 255:src/sys/cmsis_gcc.h **** 
 256:src/sys/cmsis_gcc.h **** /**
 257:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority
 258:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 259:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 260:src/sys/cmsis_gcc.h ****  */
 261:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 262:src/sys/cmsis_gcc.h **** {
 263:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 264:src/sys/cmsis_gcc.h **** }
 265:src/sys/cmsis_gcc.h **** 
 266:src/sys/cmsis_gcc.h **** 
 267:src/sys/cmsis_gcc.h **** /**
 268:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 269:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 270:src/sys/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 271:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 272:src/sys/cmsis_gcc.h ****  */
 273:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 274:src/sys/cmsis_gcc.h **** {
 275:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 276:src/sys/cmsis_gcc.h **** }
 277:src/sys/cmsis_gcc.h **** 
 278:src/sys/cmsis_gcc.h **** 
 279:src/sys/cmsis_gcc.h **** /**
 280:src/sys/cmsis_gcc.h ****   \brief   Get Fault Mask
 281:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 282:src/sys/cmsis_gcc.h ****   \return               Fault Mask register value
 283:src/sys/cmsis_gcc.h ****  */
 284:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 285:src/sys/cmsis_gcc.h **** {
 286:src/sys/cmsis_gcc.h ****   uint32_t result;
 287:src/sys/cmsis_gcc.h **** 
 288:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 289:src/sys/cmsis_gcc.h ****   return(result);
 290:src/sys/cmsis_gcc.h **** }
 291:src/sys/cmsis_gcc.h **** 
 292:src/sys/cmsis_gcc.h **** 
 293:src/sys/cmsis_gcc.h **** /**
 294:src/sys/cmsis_gcc.h ****   \brief   Set Fault Mask
 295:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 296:src/sys/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 297:src/sys/cmsis_gcc.h ****  */
 298:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 299:src/sys/cmsis_gcc.h **** {
 300:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 301:src/sys/cmsis_gcc.h **** }
 302:src/sys/cmsis_gcc.h **** 
 303:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 304:src/sys/cmsis_gcc.h **** 
 305:src/sys/cmsis_gcc.h **** 
 306:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 307:src/sys/cmsis_gcc.h **** 
 308:src/sys/cmsis_gcc.h **** /**
 309:src/sys/cmsis_gcc.h ****   \brief   Get FPSCR
 310:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 311:src/sys/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 312:src/sys/cmsis_gcc.h ****  */
 313:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 314:src/sys/cmsis_gcc.h **** {
 315:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 316:src/sys/cmsis_gcc.h ****   uint32_t result;
 317:src/sys/cmsis_gcc.h **** 
 318:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 319:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 320:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 321:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 322:src/sys/cmsis_gcc.h ****   return(result);
 323:src/sys/cmsis_gcc.h **** #else
 324:src/sys/cmsis_gcc.h ****    return(0);
 325:src/sys/cmsis_gcc.h **** #endif
 326:src/sys/cmsis_gcc.h **** }
 327:src/sys/cmsis_gcc.h **** 
 328:src/sys/cmsis_gcc.h **** 
 329:src/sys/cmsis_gcc.h **** /**
 330:src/sys/cmsis_gcc.h ****   \brief   Set FPSCR
 331:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 332:src/sys/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 333:src/sys/cmsis_gcc.h ****  */
 334:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 335:src/sys/cmsis_gcc.h **** {
 336:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 337:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 338:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 339:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 340:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 341:src/sys/cmsis_gcc.h **** #endif
 342:src/sys/cmsis_gcc.h **** }
 343:src/sys/cmsis_gcc.h **** 
 344:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 345:src/sys/cmsis_gcc.h **** 
 346:src/sys/cmsis_gcc.h **** 
 347:src/sys/cmsis_gcc.h **** 
 348:src/sys/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 349:src/sys/cmsis_gcc.h **** 
 350:src/sys/cmsis_gcc.h **** 
 351:src/sys/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 352:src/sys/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 353:src/sys/cmsis_gcc.h ****   Access to dedicated instructions
 354:src/sys/cmsis_gcc.h ****   @{
 355:src/sys/cmsis_gcc.h **** */
 356:src/sys/cmsis_gcc.h **** 
 357:src/sys/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 358:src/sys/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 359:src/sys/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 360:src/sys/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 361:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 362:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 363:src/sys/cmsis_gcc.h **** #else
 364:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 365:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 366:src/sys/cmsis_gcc.h **** #endif
 367:src/sys/cmsis_gcc.h **** 
 368:src/sys/cmsis_gcc.h **** /**
 369:src/sys/cmsis_gcc.h ****   \brief   No Operation
 370:src/sys/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 371:src/sys/cmsis_gcc.h ****  */
 372:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 373:src/sys/cmsis_gcc.h **** {
 374:src/sys/cmsis_gcc.h ****   __ASM volatile ("nop");
 375:src/sys/cmsis_gcc.h **** }
 376:src/sys/cmsis_gcc.h **** 
 377:src/sys/cmsis_gcc.h **** 
 378:src/sys/cmsis_gcc.h **** /**
 379:src/sys/cmsis_gcc.h ****   \brief   Wait For Interrupt
 380:src/sys/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 381:src/sys/cmsis_gcc.h ****  */
 382:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 383:src/sys/cmsis_gcc.h **** {
 384:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfi");
 385:src/sys/cmsis_gcc.h **** }
 386:src/sys/cmsis_gcc.h **** 
 387:src/sys/cmsis_gcc.h **** 
 388:src/sys/cmsis_gcc.h **** /**
 389:src/sys/cmsis_gcc.h ****   \brief   Wait For Event
 390:src/sys/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 391:src/sys/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 392:src/sys/cmsis_gcc.h ****  */
 393:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 394:src/sys/cmsis_gcc.h **** {
 395:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfe");
 396:src/sys/cmsis_gcc.h **** }
 397:src/sys/cmsis_gcc.h **** 
 398:src/sys/cmsis_gcc.h **** 
 399:src/sys/cmsis_gcc.h **** /**
 400:src/sys/cmsis_gcc.h ****   \brief   Send Event
 401:src/sys/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 402:src/sys/cmsis_gcc.h ****  */
 403:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 404:src/sys/cmsis_gcc.h **** {
 405:src/sys/cmsis_gcc.h ****   __ASM volatile ("sev");
 406:src/sys/cmsis_gcc.h **** }
 407:src/sys/cmsis_gcc.h **** 
 408:src/sys/cmsis_gcc.h **** 
 409:src/sys/cmsis_gcc.h **** /**
 410:src/sys/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 411:src/sys/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 412:src/sys/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 413:src/sys/cmsis_gcc.h ****            after the instruction has been completed.
 414:src/sys/cmsis_gcc.h ****  */
 415:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 416:src/sys/cmsis_gcc.h **** {
 417:src/sys/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 418:src/sys/cmsis_gcc.h **** }
 419:src/sys/cmsis_gcc.h **** 
 420:src/sys/cmsis_gcc.h **** 
 421:src/sys/cmsis_gcc.h **** /**
 422:src/sys/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 423:src/sys/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 424:src/sys/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 425:src/sys/cmsis_gcc.h ****  */
 426:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 427:src/sys/cmsis_gcc.h **** {
 428:src/sys/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 328              		.loc 3 428 0
 329              		.syntax unified
 330              	@ 428 "src/sys/cmsis_gcc.h" 1
 331 000c BFF34F8F 		dsb 0xF
 332              	@ 0 "" 2
 333              		.thumb
 334              		.syntax unified
 335              	.LBE12:
 336              	.LBE11:
 337              	.LBE13:
 338              	.LBE14:
  82:src/main.c    **** 	button_init();
 339              		.loc 1 82 0
 340 0010 FFF7FEFF 		bl	led_init
 341              	.LVL17:
  83:src/main.c    **** 
 342              		.loc 1 83 0
 343 0014 FFF7FEFF 		bl	button_init
 344              	.LVL18:
  85:src/main.c    **** 	
 345              		.loc 1 85 0
 346 0018 FFF7FEFF 		bl	exo2
 347              	.LVL19:
  88:src/main.c    **** 
 348              		.loc 1 88 0
 349 001c 0020     		movs	r0, #0
 350 001e 08BD     		pop	{r3, pc}
 351              	.L32:
 352              		.align	2
 353              	.L31:
 354 0020 00000000 		.word	RCC
 355              		.cfi_endproc
 356              	.LFE397:
 357              		.size	main, .-main
 358              		.text
 359              		.align	1
 360              		.global	button_poll
 361              		.thumb
 362              		.thumb_func
 363              		.type	button_poll, %function
 364              	button_poll:
 365              	.LFB403:
 120:src/main.c    **** }
 121:src/main.c    **** 
 122:src/main.c    **** uint32_t button_poll() {
 366              		.loc 1 122 0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370              		@ link register save eliminated.
 123:src/main.c    ****   return (~(GPIOC.IDR>>13) & 1); /* 1 if pressed */
 371              		.loc 1 123 0
 372 00fc 034B     		ldr	r3, .L34
 373 00fe 1869     		ldr	r0, [r3, #16]
 374 0100 80F40050 		eor	r0, r0, #8192
 124:src/main.c    **** }
 375              		.loc 1 124 0
 376 0104 C0F34030 		ubfx	r0, r0, #13, #1
 377 0108 7047     		bx	lr
 378              	.L35:
 379 010a 00BF     		.align	2
 380              	.L34:
 381 010c 00000000 		.word	GPIOC
 382              		.cfi_endproc
 383              	.LFE403:
 384              		.size	button_poll, .-button_poll
 385              		.align	1
 386              		.global	exo1_1
 387              		.thumb
 388              		.thumb_func
 389              		.type	exo1_1, %function
 390              	exo1_1:
 391              	.LFB393:
  20:src/main.c    **** 	led_pa5(0);
 392              		.loc 1 20 0
 393              		.cfi_startproc
 394              		@ Volatile: function does not return.
 395              		@ args = 0, pretend = 0, frame = 0
 396              		@ frame_needed = 0, uses_anonymous_args = 0
 397 0110 08B5     		push	{r3, lr}
 398              		.cfi_def_cfa_offset 8
 399              		.cfi_offset 3, -8
 400              		.cfi_offset 14, -4
  21:src/main.c    **** 	while (1) {
 401              		.loc 1 21 0
 402 0112 0020     		movs	r0, #0
 403              	.L40:
 404 0114 FFF7FEFF 		bl	led_pa5
 405              	.LVL20:
  23:src/main.c    **** 	   		led_pa5(1);
 406              		.loc 1 23 0
 407 0118 FFF7FEFF 		bl	button_poll
 408              	.LVL21:
 409 011c 0028     		cmp	r0, #0
 410 011e F9D0     		beq	.L40
  24:src/main.c    **** 		}
 411              		.loc 1 24 0
 412 0120 0120     		movs	r0, #1
 413 0122 F7E7     		b	.L40
 414              		.cfi_endproc
 415              	.LFE393:
 416              		.size	exo1_1, .-exo1_1
 417              		.align	1
 418              		.global	exo1_3
 419              		.thumb
 420              		.thumb_func
 421              		.type	exo1_3, %function
 422              	exo1_3:
 423              	.LFB395:
  42:src/main.c    **** 	int8_t enclenche = 0;
 424              		.loc 1 42 0
 425              		.cfi_startproc
 426              		@ args = 0, pretend = 0, frame = 0
 427              		@ frame_needed = 0, uses_anonymous_args = 0
 428 0124 08B5     		push	{r3, lr}
 429              		.cfi_def_cfa_offset 8
 430              		.cfi_offset 3, -8
 431              		.cfi_offset 14, -4
 432              	.L51:
 433              	.LVL22:
  43:src/main.c    **** 	while(1){
 434              		.loc 1 43 0
 435 0126 0021     		movs	r1, #0
 436              	.LVL23:
 437              	.L42:
  45:src/main.c    **** 			enclenche = 1;
 438              		.loc 1 45 0
 439 0128 FFF7FEFF 		bl	button_poll
 440              	.LVL24:
 441 012c 20B1     		cbz	r0, .L43
 442              	.LVL25:
  47:src/main.c    **** 		}
 443              		.loc 1 47 0
 444 012e 0120     		movs	r0, #1
 445 0130 FFF7FEFF 		bl	led_pa5
 446              	.LVL26:
  46:src/main.c    **** 			led_pa5(1);
 447              		.loc 1 46 0
 448 0134 0121     		movs	r1, #1
 449 0136 F7E7     		b	.L42
 450              	.LVL27:
 451              	.L43:
  50:src/main.c    **** 			for(int8_t i = 0; i < 8; i++){
 452              		.loc 1 50 0
 453 0138 FFF7FEFF 		bl	button_poll
 454              	.LVL28:
 455 013c 70B9     		cbnz	r0, .L45
  50:src/main.c    **** 			for(int8_t i = 0; i < 8; i++){
 456              		.loc 1 50 0 is_stmt 0 discriminator 1
 457 013e 69B1     		cbz	r1, .L45
 458 0140 0146     		mov	r1, r0
 459              	.L46:
 460              	.LVL29:
 461              	.LBB15:
  52:src/main.c    **** 				tempo_250ms();
 462              		.loc 1 52 0 is_stmt 1 discriminator 3
 463 0142 01F00100 		and	r0, r1, #1
 464 0146 FFF7FEFF 		bl	led_pa5
 465              	.LVL30:
  53:src/main.c    **** 			}
 466              		.loc 1 53 0 discriminator 3
 467 014a FFF7FEFF 		bl	tempo_250ms
 468              	.LVL31:
 469 014e 0131     		adds	r1, r1, #1
 470              	.LVL32:
  51:src/main.c    **** 				led_pa5(i % 2);
 471              		.loc 1 51 0 discriminator 3
 472 0150 0829     		cmp	r1, #8
 473 0152 F6D1     		bne	.L46
 474              	.LBE15:
  55:src/main.c    **** 			enclenche = 0;
 475              		.loc 1 55 0
 476 0154 0020     		movs	r0, #0
 477 0156 FFF7FEFF 		bl	led_pa5
 478              	.LVL33:
 479 015a E4E7     		b	.L51
 480              	.LVL34:
 481              	.L45:
  60:src/main.c    **** 		}
 482              		.loc 1 60 0
 483 015c 0020     		movs	r0, #0
 484 015e FFF7FEFF 		bl	led_pa5
 485              	.LVL35:
 486 0162 E1E7     		b	.L42
 487              		.cfi_endproc
 488              	.LFE395:
 489              		.size	exo1_3, .-exo1_3
 490              		.section	.rodata.str1.1,"aMS",%progbits,1
 491              	.LC0:
 492 0000 256400   		.ascii	"%d\000"
 493              		.text
 494              	.Letext0:
 495              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 496              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 497              		.file 6 "/usr/include/newlib/stdio.h"
 498              		.file 7 "<built-in>"
 499              		.section	.debug_info,"",%progbits
 500              	.Ldebug_info0:
 501 0000 18060000 		.4byte	0x618
 502 0004 0400     		.2byte	0x4
 503 0006 00000000 		.4byte	.Ldebug_abbrev0
 504 000a 04       		.byte	0x4
 505 000b 01       		.uleb128 0x1
 506 000c 19030000 		.4byte	.LASF82
 507 0010 0C       		.byte	0xc
 508 0011 6A020000 		.4byte	.LASF83
 509 0015 EF000000 		.4byte	.LASF84
 510 0019 18000000 		.4byte	.Ldebug_ranges0+0x18
 511 001d 00000000 		.4byte	0
 512 0021 00000000 		.4byte	.Ldebug_line0
 513 0025 02       		.uleb128 0x2
 514 0026 B2010000 		.4byte	.LASF5
 515 002a 04       		.byte	0x4
 516 002b 1B       		.byte	0x1b
 517 002c 30000000 		.4byte	0x30
 518 0030 03       		.uleb128 0x3
 519 0031 01       		.byte	0x1
 520 0032 06       		.byte	0x6
 521 0033 0D030000 		.4byte	.LASF0
 522 0037 03       		.uleb128 0x3
 523 0038 01       		.byte	0x1
 524 0039 08       		.byte	0x8
 525 003a C7010000 		.4byte	.LASF1
 526 003e 03       		.uleb128 0x3
 527 003f 02       		.byte	0x2
 528 0040 05       		.byte	0x5
 529 0041 4B000000 		.4byte	.LASF2
 530 0045 03       		.uleb128 0x3
 531 0046 02       		.byte	0x2
 532 0047 07       		.byte	0x7
 533 0048 93020000 		.4byte	.LASF3
 534 004c 03       		.uleb128 0x3
 535 004d 04       		.byte	0x4
 536 004e 05       		.byte	0x5
 537 004f 88010000 		.4byte	.LASF4
 538 0053 02       		.uleb128 0x2
 539 0054 91000000 		.4byte	.LASF6
 540 0058 04       		.byte	0x4
 541 0059 41       		.byte	0x41
 542 005a 5E000000 		.4byte	0x5e
 543 005e 03       		.uleb128 0x3
 544 005f 04       		.byte	0x4
 545 0060 07       		.byte	0x7
 546 0061 BA020000 		.4byte	.LASF7
 547 0065 03       		.uleb128 0x3
 548 0066 08       		.byte	0x8
 549 0067 05       		.byte	0x5
 550 0068 59010000 		.4byte	.LASF8
 551 006c 03       		.uleb128 0x3
 552 006d 08       		.byte	0x8
 553 006e 07       		.byte	0x7
 554 006f F2010000 		.4byte	.LASF9
 555 0073 04       		.uleb128 0x4
 556 0074 04       		.byte	0x4
 557 0075 05       		.byte	0x5
 558 0076 696E7400 		.ascii	"int\000"
 559 007a 03       		.uleb128 0x3
 560 007b 04       		.byte	0x4
 561 007c 07       		.byte	0x7
 562 007d 12020000 		.4byte	.LASF10
 563 0081 03       		.uleb128 0x3
 564 0082 08       		.byte	0x8
 565 0083 04       		.byte	0x4
 566 0084 85000000 		.4byte	.LASF11
 567 0088 03       		.uleb128 0x3
 568 0089 04       		.byte	0x4
 569 008a 07       		.byte	0x7
 570 008b 55000000 		.4byte	.LASF12
 571 008f 03       		.uleb128 0x3
 572 0090 01       		.byte	0x1
 573 0091 08       		.byte	0x8
 574 0092 60020000 		.4byte	.LASF13
 575 0096 02       		.uleb128 0x2
 576 0097 3E000000 		.4byte	.LASF14
 577 009b 05       		.byte	0x5
 578 009c 14       		.byte	0x14
 579 009d 25000000 		.4byte	0x25
 580 00a1 02       		.uleb128 0x2
 581 00a2 09020000 		.4byte	.LASF15
 582 00a6 05       		.byte	0x5
 583 00a7 30       		.byte	0x30
 584 00a8 53000000 		.4byte	0x53
 585 00ac 03       		.uleb128 0x3
 586 00ad 08       		.byte	0x8
 587 00ae 04       		.byte	0x4
 588 00af D8020000 		.4byte	.LASF16
 589 00b3 03       		.uleb128 0x3
 590 00b4 04       		.byte	0x4
 591 00b5 04       		.byte	0x4
 592 00b6 45010000 		.4byte	.LASF17
 593 00ba 05       		.uleb128 0x5
 594 00bb 28020000 		.4byte	.LASF53
 595 00bf 98       		.byte	0x98
 596 00c0 02       		.byte	0x2
 597 00c1 68       		.byte	0x68
 598 00c2 8E020000 		.4byte	0x28e
 599 00c6 06       		.uleb128 0x6
 600 00c7 435200   		.ascii	"CR\000"
 601 00ca 02       		.byte	0x2
 602 00cb 69       		.byte	0x69
 603 00cc A1000000 		.4byte	0xa1
 604 00d0 00       		.byte	0
 605 00d1 07       		.uleb128 0x7
 606 00d2 46020000 		.4byte	.LASF18
 607 00d6 02       		.byte	0x2
 608 00d7 6A       		.byte	0x6a
 609 00d8 A1000000 		.4byte	0xa1
 610 00dc 04       		.byte	0x4
 611 00dd 07       		.uleb128 0x7
 612 00de CD000000 		.4byte	.LASF19
 613 00e2 02       		.byte	0x2
 614 00e3 6B       		.byte	0x6b
 615 00e4 A1000000 		.4byte	0xa1
 616 00e8 08       		.byte	0x8
 617 00e9 06       		.uleb128 0x6
 618 00ea 43495200 		.ascii	"CIR\000"
 619 00ee 02       		.byte	0x2
 620 00ef 6C       		.byte	0x6c
 621 00f0 A1000000 		.4byte	0xa1
 622 00f4 0C       		.byte	0xc
 623 00f5 07       		.uleb128 0x7
 624 00f6 B2030000 		.4byte	.LASF20
 625 00fa 02       		.byte	0x2
 626 00fb 6D       		.byte	0x6d
 627 00fc A1000000 		.4byte	0xa1
 628 0100 10       		.byte	0x10
 629 0101 07       		.uleb128 0x7
 630 0102 1F020000 		.4byte	.LASF21
 631 0106 02       		.byte	0x2
 632 0107 6E       		.byte	0x6e
 633 0108 A1000000 		.4byte	0xa1
 634 010c 14       		.byte	0x14
 635 010d 07       		.uleb128 0x7
 636 010e CA030000 		.4byte	.LASF22
 637 0112 02       		.byte	0x2
 638 0113 6F       		.byte	0x6f
 639 0114 A1000000 		.4byte	0xa1
 640 0118 18       		.byte	0x18
 641 0119 07       		.uleb128 0x7
 642 011a 7A020000 		.4byte	.LASF23
 643 011e 02       		.byte	0x2
 644 011f 70       		.byte	0x70
 645 0120 A1000000 		.4byte	0xa1
 646 0124 1C       		.byte	0x1c
 647 0125 07       		.uleb128 0x7
 648 0126 23000000 		.4byte	.LASF24
 649 012a 02       		.byte	0x2
 650 012b 71       		.byte	0x71
 651 012c A1000000 		.4byte	0xa1
 652 0130 20       		.byte	0x20
 653 0131 07       		.uleb128 0x7
 654 0132 A9010000 		.4byte	.LASF25
 655 0136 02       		.byte	0x2
 656 0137 72       		.byte	0x72
 657 0138 A1000000 		.4byte	0xa1
 658 013c 24       		.byte	0x24
 659 013d 07       		.uleb128 0x7
 660 013e BB030000 		.4byte	.LASF26
 661 0142 02       		.byte	0x2
 662 0143 73       		.byte	0x73
 663 0144 A1000000 		.4byte	0xa1
 664 0148 28       		.byte	0x28
 665 0149 07       		.uleb128 0x7
 666 014a F9030000 		.4byte	.LASF27
 667 014e 02       		.byte	0x2
 668 014f 74       		.byte	0x74
 669 0150 A1000000 		.4byte	0xa1
 670 0154 2C       		.byte	0x2c
 671 0155 07       		.uleb128 0x7
 672 0156 05030000 		.4byte	.LASF28
 673 015a 02       		.byte	0x2
 674 015b 75       		.byte	0x75
 675 015c A1000000 		.4byte	0xa1
 676 0160 30       		.byte	0x30
 677 0161 07       		.uleb128 0x7
 678 0162 3D010000 		.4byte	.LASF29
 679 0166 02       		.byte	0x2
 680 0167 76       		.byte	0x76
 681 0168 A1000000 		.4byte	0xa1
 682 016c 34       		.byte	0x34
 683 016d 07       		.uleb128 0x7
 684 016e 4B010000 		.4byte	.LASF30
 685 0172 02       		.byte	0x2
 686 0173 77       		.byte	0x77
 687 0174 A1000000 		.4byte	0xa1
 688 0178 38       		.byte	0x38
 689 0179 07       		.uleb128 0x7
 690 017a EE020000 		.4byte	.LASF31
 691 017e 02       		.byte	0x2
 692 017f 78       		.byte	0x78
 693 0180 A1000000 		.4byte	0xa1
 694 0184 3C       		.byte	0x3c
 695 0185 07       		.uleb128 0x7
 696 0186 E7000000 		.4byte	.LASF32
 697 018a 02       		.byte	0x2
 698 018b 79       		.byte	0x79
 699 018c A1000000 		.4byte	0xa1
 700 0190 40       		.byte	0x40
 701 0191 07       		.uleb128 0x7
 702 0192 E4010000 		.4byte	.LASF33
 703 0196 02       		.byte	0x2
 704 0197 7A       		.byte	0x7a
 705 0198 A1000000 		.4byte	0xa1
 706 019c 44       		.byte	0x44
 707 019d 07       		.uleb128 0x7
 708 019e D8000000 		.4byte	.LASF34
 709 01a2 02       		.byte	0x2
 710 01a3 7B       		.byte	0x7b
 711 01a4 A1000000 		.4byte	0xa1
 712 01a8 48       		.byte	0x48
 713 01a9 07       		.uleb128 0x7
 714 01aa D5010000 		.4byte	.LASF35
 715 01ae 02       		.byte	0x2
 716 01af 7C       		.byte	0x7c
 717 01b0 A1000000 		.4byte	0xa1
 718 01b4 4C       		.byte	0x4c
 719 01b5 07       		.uleb128 0x7
 720 01b6 00000000 		.4byte	.LASF36
 721 01ba 02       		.byte	0x2
 722 01bb 7D       		.byte	0x7d
 723 01bc A1000000 		.4byte	0xa1
 724 01c0 50       		.byte	0x50
 725 01c1 07       		.uleb128 0x7
 726 01c2 89020000 		.4byte	.LASF37
 727 01c6 02       		.byte	0x2
 728 01c7 7E       		.byte	0x7e
 729 01c8 A1000000 		.4byte	0xa1
 730 01cc 54       		.byte	0x54
 731 01cd 07       		.uleb128 0x7
 732 01ce BA000000 		.4byte	.LASF38
 733 01d2 02       		.byte	0x2
 734 01d3 7F       		.byte	0x7f
 735 01d4 A1000000 		.4byte	0xa1
 736 01d8 58       		.byte	0x58
 737 01d9 07       		.uleb128 0x7
 738 01da DF020000 		.4byte	.LASF39
 739 01de 02       		.byte	0x2
 740 01df 80       		.byte	0x80
 741 01e0 A1000000 		.4byte	0xa1
 742 01e4 5C       		.byte	0x5c
 743 01e5 07       		.uleb128 0x7
 744 01e6 15010000 		.4byte	.LASF40
 745 01ea 02       		.byte	0x2
 746 01eb 81       		.byte	0x81
 747 01ec A1000000 		.4byte	0xa1
 748 01f0 60       		.byte	0x60
 749 01f1 07       		.uleb128 0x7
 750 01f2 EF030000 		.4byte	.LASF41
 751 01f6 02       		.byte	0x2
 752 01f7 82       		.byte	0x82
 753 01f8 A1000000 		.4byte	0xa1
 754 01fc 64       		.byte	0x64
 755 01fd 07       		.uleb128 0x7
 756 01fe A3030000 		.4byte	.LASF42
 757 0202 02       		.byte	0x2
 758 0203 83       		.byte	0x83
 759 0204 A1000000 		.4byte	0xa1
 760 0208 68       		.byte	0x68
 761 0209 07       		.uleb128 0x7
 762 020a 14000000 		.4byte	.LASF43
 763 020e 02       		.byte	0x2
 764 020f 84       		.byte	0x84
 765 0210 A1000000 		.4byte	0xa1
 766 0214 6C       		.byte	0x6c
 767 0215 07       		.uleb128 0x7
 768 0216 5E000000 		.4byte	.LASF44
 769 021a 02       		.byte	0x2
 770 021b 85       		.byte	0x85
 771 021c A1000000 		.4byte	0xa1
 772 0220 70       		.byte	0x70
 773 0221 06       		.uleb128 0x6
 774 0222 43535200 		.ascii	"CSR\000"
 775 0226 02       		.byte	0x2
 776 0227 86       		.byte	0x86
 777 0228 A1000000 		.4byte	0xa1
 778 022c 74       		.byte	0x74
 779 022d 07       		.uleb128 0x7
 780 022e 6B000000 		.4byte	.LASF45
 781 0232 02       		.byte	0x2
 782 0233 87       		.byte	0x87
 783 0234 A1000000 		.4byte	0xa1
 784 0238 78       		.byte	0x78
 785 0239 07       		.uleb128 0x7
 786 023a 2E010000 		.4byte	.LASF46
 787 023e 02       		.byte	0x2
 788 023f 88       		.byte	0x88
 789 0240 A1000000 		.4byte	0xa1
 790 0244 7C       		.byte	0x7c
 791 0245 07       		.uleb128 0x7
 792 0246 9C000000 		.4byte	.LASF47
 793 024a 02       		.byte	0x2
 794 024b 89       		.byte	0x89
 795 024c A1000000 		.4byte	0xa1
 796 0250 80       		.byte	0x80
 797 0251 07       		.uleb128 0x7
 798 0252 7A000000 		.4byte	.LASF48
 799 0256 02       		.byte	0x2
 800 0257 8A       		.byte	0x8a
 801 0258 A1000000 		.4byte	0xa1
 802 025c 84       		.byte	0x84
 803 025d 07       		.uleb128 0x7
 804 025e DF030000 		.4byte	.LASF49
 805 0262 02       		.byte	0x2
 806 0263 8B       		.byte	0x8b
 807 0264 A1000000 		.4byte	0xa1
 808 0268 88       		.byte	0x88
 809 0269 07       		.uleb128 0x7
 810 026a 26010000 		.4byte	.LASF50
 811 026e 02       		.byte	0x2
 812 026f 8C       		.byte	0x8c
 813 0270 A1000000 		.4byte	0xa1
 814 0274 8C       		.byte	0x8c
 815 0275 07       		.uleb128 0x7
 816 0276 0C010000 		.4byte	.LASF51
 817 027a 02       		.byte	0x2
 818 027b 8D       		.byte	0x8d
 819 027c A1000000 		.4byte	0xa1
 820 0280 90       		.byte	0x90
 821 0281 07       		.uleb128 0x7
 822 0282 C4000000 		.4byte	.LASF52
 823 0286 02       		.byte	0x2
 824 0287 8E       		.byte	0x8e
 825 0288 A1000000 		.4byte	0xa1
 826 028c 94       		.byte	0x94
 827 028d 00       		.byte	0
 828 028e 05       		.uleb128 0x5
 829 028f A2000000 		.4byte	.LASF54
 830 0293 28       		.byte	0x28
 831 0294 02       		.byte	0x2
 832 0295 92       		.byte	0x92
 833 0296 13030000 		.4byte	0x313
 834 029a 07       		.uleb128 0x7
 835 029b A3010000 		.4byte	.LASF55
 836 029f 02       		.byte	0x2
 837 02a0 93       		.byte	0x93
 838 02a1 A1000000 		.4byte	0xa1
 839 02a5 00       		.byte	0
 840 02a6 07       		.uleb128 0x7
 841 02a7 1F010000 		.4byte	.LASF56
 842 02ab 02       		.byte	0x2
 843 02ac 94       		.byte	0x94
 844 02ad A1000000 		.4byte	0xa1
 845 02b1 04       		.byte	0x4
 846 02b2 07       		.uleb128 0x7
 847 02b3 B2020000 		.4byte	.LASF57
 848 02b7 02       		.byte	0x2
 849 02b8 95       		.byte	0x95
 850 02b9 A1000000 		.4byte	0xa1
 851 02bd 08       		.byte	0x8
 852 02be 07       		.uleb128 0x7
 853 02bf 6D010000 		.4byte	.LASF58
 854 02c3 02       		.byte	0x2
 855 02c4 96       		.byte	0x96
 856 02c5 A1000000 		.4byte	0xa1
 857 02c9 0C       		.byte	0xc
 858 02ca 06       		.uleb128 0x6
 859 02cb 49445200 		.ascii	"IDR\000"
 860 02cf 02       		.byte	0x2
 861 02d0 97       		.byte	0x97
 862 02d1 A1000000 		.4byte	0xa1
 863 02d5 10       		.byte	0x10
 864 02d6 06       		.uleb128 0x6
 865 02d7 4F445200 		.ascii	"ODR\000"
 866 02db 02       		.byte	0x2
 867 02dc 98       		.byte	0x98
 868 02dd A1000000 		.4byte	0xa1
 869 02e1 14       		.byte	0x14
 870 02e2 07       		.uleb128 0x7
 871 02e3 91010000 		.4byte	.LASF59
 872 02e7 02       		.byte	0x2
 873 02e8 99       		.byte	0x99
 874 02e9 A1000000 		.4byte	0xa1
 875 02ed 18       		.byte	0x18
 876 02ee 07       		.uleb128 0x7
 877 02ef EA030000 		.4byte	.LASF60
 878 02f3 02       		.byte	0x2
 879 02f4 9A       		.byte	0x9a
 880 02f5 A1000000 		.4byte	0xa1
 881 02f9 1C       		.byte	0x1c
 882 02fa 07       		.uleb128 0x7
 883 02fb 54020000 		.4byte	.LASF61
 884 02ff 02       		.byte	0x2
 885 0300 9B       		.byte	0x9b
 886 0301 A1000000 		.4byte	0xa1
 887 0305 20       		.byte	0x20
 888 0306 07       		.uleb128 0x7
 889 0307 41020000 		.4byte	.LASF62
 890 030b 02       		.byte	0x2
 891 030c 9C       		.byte	0x9c
 892 030d A1000000 		.4byte	0xa1
 893 0311 24       		.byte	0x24
 894 0312 00       		.byte	0
 895 0313 08       		.uleb128 0x8
 896 0314 EC010000 		.4byte	.LASF85
 897 0318 03       		.byte	0x3
 898 0319 AA01     		.2byte	0x1aa
 899 031b 03       		.byte	0x3
 900 031c 09       		.uleb128 0x9
 901 031d 96010000 		.4byte	.LASF86
 902 0321 02       		.byte	0x2
 903 0322 9C02     		.2byte	0x29c
 904 0324 03       		.byte	0x3
 905 0325 0A       		.uleb128 0xa
 906 0326 75020000 		.4byte	.LASF66
 907 032a 01       		.byte	0x1
 908 032b 41       		.byte	0x41
 909 032c 00000000 		.4byte	.LFB396
 910 0330 28000000 		.4byte	.LFE396-.LFB396
 911 0334 01       		.uleb128 0x1
 912 0335 9C       		.byte	0x9c
 913 0336 A8030000 		.4byte	0x3a8
 914 033a 0B       		.uleb128 0xb
 915 033b 6300     		.ascii	"c\000"
 916 033d 01       		.byte	0x1
 917 033e 42       		.byte	0x42
 918 033f 8F000000 		.4byte	0x8f
 919 0343 0A       		.byte	0xa
 920 0344 0C       		.uleb128 0xc
 921 0345 7300     		.ascii	"s\000"
 922 0347 01       		.byte	0x1
 923 0348 4B       		.byte	0x4b
 924 0349 A8030000 		.4byte	0x3a8
 925 034d 02       		.uleb128 0x2
 926 034e 91       		.byte	0x91
 927 034f 74       		.sleb128 -12
 928 0350 0D       		.uleb128 0xd
 929 0351 04000000 		.4byte	.LBB8
 930 0355 0E000000 		.4byte	.LBE8-.LBB8
 931 0359 7A030000 		.4byte	0x37a
 932 035d 0E       		.uleb128 0xe
 933 035e 6900     		.ascii	"i\000"
 934 0360 01       		.byte	0x1
 935 0361 43       		.byte	0x43
 936 0362 96000000 		.4byte	0x96
 937 0366 00000000 		.4byte	.LLST0
 938 036a 0F       		.uleb128 0xf
 939 036b 0C000000 		.4byte	.LVL3
 940 036f F6050000 		.4byte	0x5f6
 941 0373 10       		.uleb128 0x10
 942 0374 01       		.uleb128 0x1
 943 0375 50       		.byte	0x50
 944 0376 01       		.uleb128 0x1
 945 0377 3A       		.byte	0x3a
 946 0378 00       		.byte	0
 947 0379 00       		.byte	0
 948 037a 11       		.uleb128 0x11
 949 037b 1A000000 		.4byte	.LVL4
 950 037f 05060000 		.4byte	0x605
 951 0383 97030000 		.4byte	0x397
 952 0387 10       		.uleb128 0x10
 953 0388 01       		.uleb128 0x1
 954 0389 50       		.byte	0x50
 955 038a 05       		.uleb128 0x5
 956 038b 03       		.byte	0x3
 957 038c 00000000 		.4byte	.LC0
 958 0390 10       		.uleb128 0x10
 959 0391 01       		.uleb128 0x1
 960 0392 51       		.byte	0x51
 961 0393 02       		.uleb128 0x2
 962 0394 91       		.byte	0x91
 963 0395 74       		.sleb128 -12
 964 0396 00       		.byte	0
 965 0397 0F       		.uleb128 0xf
 966 0398 20000000 		.4byte	.LVL5
 967 039c 10060000 		.4byte	0x610
 968 03a0 10       		.uleb128 0x10
 969 03a1 01       		.uleb128 0x1
 970 03a2 50       		.byte	0x50
 971 03a3 02       		.uleb128 0x2
 972 03a4 91       		.byte	0x91
 973 03a5 74       		.sleb128 -12
 974 03a6 00       		.byte	0
 975 03a7 00       		.byte	0
 976 03a8 12       		.uleb128 0x12
 977 03a9 8F000000 		.4byte	0x8f
 978 03ad B8030000 		.4byte	0x3b8
 979 03b1 13       		.uleb128 0x13
 980 03b2 88000000 		.4byte	0x88
 981 03b6 01       		.byte	0x1
 982 03b7 00       		.byte	0
 983 03b8 14       		.uleb128 0x14
 984 03b9 B1000000 		.4byte	.LASF71
 985 03bd 01       		.byte	0x1
 986 03be 5C       		.byte	0x5c
 987 03bf 28000000 		.4byte	.LFB398
 988 03c3 30000000 		.4byte	.LFE398-.LFB398
 989 03c7 01       		.uleb128 0x1
 990 03c8 9C       		.byte	0x9c
 991 03c9 15       		.uleb128 0x15
 992 03ca A6020000 		.4byte	.LASF63
 993 03ce 01       		.byte	0x1
 994 03cf 63       		.byte	0x63
 995 03d0 58000000 		.4byte	.LFB399
 996 03d4 1C000000 		.4byte	.LFE399-.LFB399
 997 03d8 01       		.uleb128 0x1
 998 03d9 9C       		.byte	0x9c
 999 03da EE030000 		.4byte	0x3ee
 1000 03de 16       		.uleb128 0x16
 1001 03df 59020000 		.4byte	.LASF65
 1002 03e3 01       		.byte	0x1
 1003 03e4 63       		.byte	0x63
 1004 03e5 A1000000 		.4byte	0xa1
 1005 03e9 24000000 		.4byte	.LLST1
 1006 03ed 00       		.byte	0
 1007 03ee 15       		.uleb128 0x15
 1008 03ef FD020000 		.4byte	.LASF64
 1009 03f3 01       		.byte	0x1
 1010 03f4 67       		.byte	0x67
 1011 03f5 74000000 		.4byte	.LFB400
 1012 03f9 18000000 		.4byte	.LFE400-.LFB400
 1013 03fd 01       		.uleb128 0x1
 1014 03fe 9C       		.byte	0x9c
 1015 03ff 13040000 		.4byte	0x413
 1016 0403 16       		.uleb128 0x16
 1017 0404 59020000 		.4byte	.LASF65
 1018 0408 01       		.byte	0x1
 1019 0409 67       		.byte	0x67
 1020 040a A1000000 		.4byte	0xa1
 1021 040e 52000000 		.4byte	.LLST2
 1022 0412 00       		.byte	0
 1023 0413 0A       		.uleb128 0xa
 1024 0414 CC020000 		.4byte	.LASF67
 1025 0418 01       		.byte	0x1
 1026 0419 6B       		.byte	0x6b
 1027 041a 8C000000 		.4byte	.LFB401
 1028 041e 20000000 		.4byte	.LFE401-.LFB401
 1029 0422 01       		.uleb128 0x1
 1030 0423 9C       		.byte	0x9c
 1031 0424 37040000 		.4byte	0x437
 1032 0428 17       		.uleb128 0x17
 1033 0429 4E020000 		.4byte	.LASF68
 1034 042d 01       		.byte	0x1
 1035 042e 6D       		.byte	0x6d
 1036 042f 37040000 		.4byte	0x437
 1037 0433 02       		.uleb128 0x2
 1038 0434 91       		.byte	0x91
 1039 0435 7C       		.sleb128 -4
 1040 0436 00       		.byte	0
 1041 0437 18       		.uleb128 0x18
 1042 0438 A1000000 		.4byte	0xa1
 1043 043c 19       		.uleb128 0x19
 1044 043d 7A010000 		.4byte	.LASF69
 1045 0441 01       		.byte	0x1
 1046 0442 20       		.byte	0x20
 1047 0443 AC000000 		.4byte	.LFB394
 1048 0447 30000000 		.4byte	.LFE394-.LFB394
 1049 044b 01       		.uleb128 0x1
 1050 044c 9C       		.byte	0x9c
 1051 044d 7C040000 		.4byte	0x47c
 1052 0451 1A       		.uleb128 0x1a
 1053 0452 D2000000 		.4byte	.LASF70
 1054 0456 01       		.byte	0x1
 1055 0457 21       		.byte	0x21
 1056 0458 96000000 		.4byte	0x96
 1057 045c 73000000 		.4byte	.LLST3
 1058 0460 1B       		.uleb128 0x1b
 1059 0461 C8000000 		.4byte	.LVL13
 1060 0465 EE030000 		.4byte	0x3ee
 1061 0469 1B       		.uleb128 0x1b
 1062 046a CC000000 		.4byte	.LVL14
 1063 046e 13040000 		.4byte	0x413
 1064 0472 1B       		.uleb128 0x1b
 1065 0473 D0000000 		.4byte	.LVL15
 1066 0477 13040000 		.4byte	0x413
 1067 047b 00       		.byte	0
 1068 047c 14       		.uleb128 0x14
 1069 047d BB010000 		.4byte	.LASF72
 1070 0481 01       		.byte	0x1
 1071 0482 72       		.byte	0x72
 1072 0483 DC000000 		.4byte	.LFB402
 1073 0487 20000000 		.4byte	.LFE402-.LFB402
 1074 048b 01       		.uleb128 0x1
 1075 048c 9C       		.byte	0x9c
 1076 048d 1C       		.uleb128 0x1c
 1077 048e 65020000 		.4byte	.LASF73
 1078 0492 01       		.byte	0x1
 1079 0493 50       		.byte	0x50
 1080 0494 73000000 		.4byte	0x73
 1081 0498 00000000 		.4byte	.LFB397
 1082 049c 24000000 		.4byte	.LFE397-.LFB397
 1083 04a0 01       		.uleb128 0x1
 1084 04a1 9C       		.byte	0x9c
 1085 04a2 E6040000 		.4byte	0x4e6
 1086 04a6 1D       		.uleb128 0x1d
 1087 04a7 1C030000 		.4byte	0x31c
 1088 04ab 00000000 		.4byte	.LBB9
 1089 04af 00000000 		.4byte	.Ldebug_ranges0+0
 1090 04b3 01       		.byte	0x1
 1091 04b4 51       		.byte	0x51
 1092 04b5 CA040000 		.4byte	0x4ca
 1093 04b9 1E       		.uleb128 0x1e
 1094 04ba 13030000 		.4byte	0x313
 1095 04be 0C000000 		.4byte	.LBB11
 1096 04c2 04000000 		.4byte	.LBE11-.LBB11
 1097 04c6 02       		.byte	0x2
 1098 04c7 9C02     		.2byte	0x29c
 1099 04c9 00       		.byte	0
 1100 04ca 1B       		.uleb128 0x1b
 1101 04cb 14000000 		.4byte	.LVL17
 1102 04cf B8030000 		.4byte	0x3b8
 1103 04d3 1B       		.uleb128 0x1b
 1104 04d4 18000000 		.4byte	.LVL18
 1105 04d8 7C040000 		.4byte	0x47c
 1106 04dc 1B       		.uleb128 0x1b
 1107 04dd 1C000000 		.4byte	.LVL19
 1108 04e1 25030000 		.4byte	0x325
 1109 04e5 00       		.byte	0
 1110 04e6 1F       		.uleb128 0x1f
 1111 04e7 D3030000 		.4byte	.LASF87
 1112 04eb 01       		.byte	0x1
 1113 04ec 7A       		.byte	0x7a
 1114 04ed A1000000 		.4byte	0xa1
 1115 04f1 FC000000 		.4byte	.LFB403
 1116 04f5 14000000 		.4byte	.LFE403-.LFB403
 1117 04f9 01       		.uleb128 0x1
 1118 04fa 9C       		.byte	0x9c
 1119 04fb 19       		.uleb128 0x19
 1120 04fc 73010000 		.4byte	.LASF74
 1121 0500 01       		.byte	0x1
 1122 0501 14       		.byte	0x14
 1123 0502 10010000 		.4byte	.LFB393
 1124 0506 14000000 		.4byte	.LFE393-.LFB393
 1125 050a 01       		.uleb128 0x1
 1126 050b 9C       		.byte	0x9c
 1127 050c 23050000 		.4byte	0x523
 1128 0510 1B       		.uleb128 0x1b
 1129 0511 18010000 		.4byte	.LVL20
 1130 0515 EE030000 		.4byte	0x3ee
 1131 0519 1B       		.uleb128 0x1b
 1132 051a 1C010000 		.4byte	.LVL21
 1133 051e E6040000 		.4byte	0x4e6
 1134 0522 00       		.byte	0
 1135 0523 19       		.uleb128 0x19
 1136 0524 81010000 		.4byte	.LASF75
 1137 0528 01       		.byte	0x1
 1138 0529 2A       		.byte	0x2a
 1139 052a 24010000 		.4byte	.LFB395
 1140 052e 40000000 		.4byte	.LFE395-.LFB395
 1141 0532 01       		.uleb128 0x1
 1142 0533 9C       		.byte	0x9c
 1143 0534 BC050000 		.4byte	0x5bc
 1144 0538 1A       		.uleb128 0x1a
 1145 0539 0A000000 		.4byte	.LASF76
 1146 053d 01       		.byte	0x1
 1147 053e 2B       		.byte	0x2b
 1148 053f 96000000 		.4byte	0x96
 1149 0543 9D000000 		.4byte	.LLST4
 1150 0547 0D       		.uleb128 0xd
 1151 0548 42010000 		.4byte	.LBB15
 1152 054c 12000000 		.4byte	.LBE15-.LBB15
 1153 0550 74050000 		.4byte	0x574
 1154 0554 0E       		.uleb128 0xe
 1155 0555 6900     		.ascii	"i\000"
 1156 0557 01       		.byte	0x1
 1157 0558 33       		.byte	0x33
 1158 0559 96000000 		.4byte	0x96
 1159 055d D4000000 		.4byte	.LLST5
 1160 0561 1B       		.uleb128 0x1b
 1161 0562 4A010000 		.4byte	.LVL30
 1162 0566 EE030000 		.4byte	0x3ee
 1163 056a 1B       		.uleb128 0x1b
 1164 056b 4E010000 		.4byte	.LVL31
 1165 056f 13040000 		.4byte	0x413
 1166 0573 00       		.byte	0
 1167 0574 1B       		.uleb128 0x1b
 1168 0575 2C010000 		.4byte	.LVL24
 1169 0579 E6040000 		.4byte	0x4e6
 1170 057d 11       		.uleb128 0x11
 1171 057e 34010000 		.4byte	.LVL26
 1172 0582 EE030000 		.4byte	0x3ee
 1173 0586 90050000 		.4byte	0x590
 1174 058a 10       		.uleb128 0x10
 1175 058b 01       		.uleb128 0x1
 1176 058c 50       		.byte	0x50
 1177 058d 01       		.uleb128 0x1
 1178 058e 31       		.byte	0x31
 1179 058f 00       		.byte	0
 1180 0590 1B       		.uleb128 0x1b
 1181 0591 3C010000 		.4byte	.LVL28
 1182 0595 E6040000 		.4byte	0x4e6
 1183 0599 11       		.uleb128 0x11
 1184 059a 5A010000 		.4byte	.LVL33
 1185 059e EE030000 		.4byte	0x3ee
 1186 05a2 AC050000 		.4byte	0x5ac
 1187 05a6 10       		.uleb128 0x10
 1188 05a7 01       		.uleb128 0x1
 1189 05a8 50       		.byte	0x50
 1190 05a9 01       		.uleb128 0x1
 1191 05aa 30       		.byte	0x30
 1192 05ab 00       		.byte	0
 1193 05ac 0F       		.uleb128 0xf
 1194 05ad 62010000 		.4byte	.LVL35
 1195 05b1 EE030000 		.4byte	0x3ee
 1196 05b5 10       		.uleb128 0x10
 1197 05b6 01       		.uleb128 0x1
 1198 05b7 50       		.byte	0x50
 1199 05b8 01       		.uleb128 0x1
 1200 05b9 30       		.byte	0x30
 1201 05ba 00       		.byte	0
 1202 05bb 00       		.byte	0
 1203 05bc 20       		.uleb128 0x20
 1204 05bd 52434300 		.ascii	"RCC\000"
 1205 05c1 02       		.byte	0x2
 1206 05c2 3D02     		.2byte	0x23d
 1207 05c4 C8050000 		.4byte	0x5c8
 1208 05c8 18       		.uleb128 0x18
 1209 05c9 BA000000 		.4byte	0xba
 1210 05cd 21       		.uleb128 0x21
 1211 05ce 3B020000 		.4byte	.LASF77
 1212 05d2 02       		.byte	0x2
 1213 05d3 4402     		.2byte	0x244
 1214 05d5 D9050000 		.4byte	0x5d9
 1215 05d9 18       		.uleb128 0x18
 1216 05da 8E020000 		.4byte	0x28e
 1217 05de 21       		.uleb128 0x21
 1218 05df 67010000 		.4byte	.LASF78
 1219 05e3 02       		.byte	0x2
 1220 05e4 4502     		.2byte	0x245
 1221 05e6 D9050000 		.4byte	0x5d9
 1222 05ea 21       		.uleb128 0x21
 1223 05eb 53010000 		.4byte	.LASF79
 1224 05ef 02       		.byte	0x2
 1225 05f0 4602     		.2byte	0x246
 1226 05f2 D9050000 		.4byte	0x5d9
 1227 05f6 22       		.uleb128 0x22
 1228 05f7 63000000 		.4byte	.LASF88
 1229 05fb 2C000000 		.4byte	.LASF89
 1230 05ff 07       		.byte	0x7
 1231 0600 00       		.byte	0
 1232 0601 63000000 		.4byte	.LASF88
 1233 0605 23       		.uleb128 0x23
 1234 0606 45000000 		.4byte	.LASF80
 1235 060a 45000000 		.4byte	.LASF80
 1236 060e 06       		.byte	0x6
 1237 060f BD       		.byte	0xbd
 1238 0610 23       		.uleb128 0x23
 1239 0611 36020000 		.4byte	.LASF81
 1240 0615 36020000 		.4byte	.LASF81
 1241 0619 06       		.byte	0x6
 1242 061a D0       		.byte	0xd0
 1243 061b 00       		.byte	0
 1244              		.section	.debug_abbrev,"",%progbits
 1245              	.Ldebug_abbrev0:
 1246 0000 01       		.uleb128 0x1
 1247 0001 11       		.uleb128 0x11
 1248 0002 01       		.byte	0x1
 1249 0003 25       		.uleb128 0x25
 1250 0004 0E       		.uleb128 0xe
 1251 0005 13       		.uleb128 0x13
 1252 0006 0B       		.uleb128 0xb
 1253 0007 03       		.uleb128 0x3
 1254 0008 0E       		.uleb128 0xe
 1255 0009 1B       		.uleb128 0x1b
 1256 000a 0E       		.uleb128 0xe
 1257 000b 55       		.uleb128 0x55
 1258 000c 17       		.uleb128 0x17
 1259 000d 11       		.uleb128 0x11
 1260 000e 01       		.uleb128 0x1
 1261 000f 10       		.uleb128 0x10
 1262 0010 17       		.uleb128 0x17
 1263 0011 00       		.byte	0
 1264 0012 00       		.byte	0
 1265 0013 02       		.uleb128 0x2
 1266 0014 16       		.uleb128 0x16
 1267 0015 00       		.byte	0
 1268 0016 03       		.uleb128 0x3
 1269 0017 0E       		.uleb128 0xe
 1270 0018 3A       		.uleb128 0x3a
 1271 0019 0B       		.uleb128 0xb
 1272 001a 3B       		.uleb128 0x3b
 1273 001b 0B       		.uleb128 0xb
 1274 001c 49       		.uleb128 0x49
 1275 001d 13       		.uleb128 0x13
 1276 001e 00       		.byte	0
 1277 001f 00       		.byte	0
 1278 0020 03       		.uleb128 0x3
 1279 0021 24       		.uleb128 0x24
 1280 0022 00       		.byte	0
 1281 0023 0B       		.uleb128 0xb
 1282 0024 0B       		.uleb128 0xb
 1283 0025 3E       		.uleb128 0x3e
 1284 0026 0B       		.uleb128 0xb
 1285 0027 03       		.uleb128 0x3
 1286 0028 0E       		.uleb128 0xe
 1287 0029 00       		.byte	0
 1288 002a 00       		.byte	0
 1289 002b 04       		.uleb128 0x4
 1290 002c 24       		.uleb128 0x24
 1291 002d 00       		.byte	0
 1292 002e 0B       		.uleb128 0xb
 1293 002f 0B       		.uleb128 0xb
 1294 0030 3E       		.uleb128 0x3e
 1295 0031 0B       		.uleb128 0xb
 1296 0032 03       		.uleb128 0x3
 1297 0033 08       		.uleb128 0x8
 1298 0034 00       		.byte	0
 1299 0035 00       		.byte	0
 1300 0036 05       		.uleb128 0x5
 1301 0037 13       		.uleb128 0x13
 1302 0038 01       		.byte	0x1
 1303 0039 03       		.uleb128 0x3
 1304 003a 0E       		.uleb128 0xe
 1305 003b 0B       		.uleb128 0xb
 1306 003c 0B       		.uleb128 0xb
 1307 003d 3A       		.uleb128 0x3a
 1308 003e 0B       		.uleb128 0xb
 1309 003f 3B       		.uleb128 0x3b
 1310 0040 0B       		.uleb128 0xb
 1311 0041 01       		.uleb128 0x1
 1312 0042 13       		.uleb128 0x13
 1313 0043 00       		.byte	0
 1314 0044 00       		.byte	0
 1315 0045 06       		.uleb128 0x6
 1316 0046 0D       		.uleb128 0xd
 1317 0047 00       		.byte	0
 1318 0048 03       		.uleb128 0x3
 1319 0049 08       		.uleb128 0x8
 1320 004a 3A       		.uleb128 0x3a
 1321 004b 0B       		.uleb128 0xb
 1322 004c 3B       		.uleb128 0x3b
 1323 004d 0B       		.uleb128 0xb
 1324 004e 49       		.uleb128 0x49
 1325 004f 13       		.uleb128 0x13
 1326 0050 38       		.uleb128 0x38
 1327 0051 0B       		.uleb128 0xb
 1328 0052 00       		.byte	0
 1329 0053 00       		.byte	0
 1330 0054 07       		.uleb128 0x7
 1331 0055 0D       		.uleb128 0xd
 1332 0056 00       		.byte	0
 1333 0057 03       		.uleb128 0x3
 1334 0058 0E       		.uleb128 0xe
 1335 0059 3A       		.uleb128 0x3a
 1336 005a 0B       		.uleb128 0xb
 1337 005b 3B       		.uleb128 0x3b
 1338 005c 0B       		.uleb128 0xb
 1339 005d 49       		.uleb128 0x49
 1340 005e 13       		.uleb128 0x13
 1341 005f 38       		.uleb128 0x38
 1342 0060 0B       		.uleb128 0xb
 1343 0061 00       		.byte	0
 1344 0062 00       		.byte	0
 1345 0063 08       		.uleb128 0x8
 1346 0064 2E       		.uleb128 0x2e
 1347 0065 00       		.byte	0
 1348 0066 03       		.uleb128 0x3
 1349 0067 0E       		.uleb128 0xe
 1350 0068 3A       		.uleb128 0x3a
 1351 0069 0B       		.uleb128 0xb
 1352 006a 3B       		.uleb128 0x3b
 1353 006b 05       		.uleb128 0x5
 1354 006c 27       		.uleb128 0x27
 1355 006d 19       		.uleb128 0x19
 1356 006e 20       		.uleb128 0x20
 1357 006f 0B       		.uleb128 0xb
 1358 0070 00       		.byte	0
 1359 0071 00       		.byte	0
 1360 0072 09       		.uleb128 0x9
 1361 0073 2E       		.uleb128 0x2e
 1362 0074 00       		.byte	0
 1363 0075 03       		.uleb128 0x3
 1364 0076 0E       		.uleb128 0xe
 1365 0077 3A       		.uleb128 0x3a
 1366 0078 0B       		.uleb128 0xb
 1367 0079 3B       		.uleb128 0x3b
 1368 007a 05       		.uleb128 0x5
 1369 007b 20       		.uleb128 0x20
 1370 007c 0B       		.uleb128 0xb
 1371 007d 00       		.byte	0
 1372 007e 00       		.byte	0
 1373 007f 0A       		.uleb128 0xa
 1374 0080 2E       		.uleb128 0x2e
 1375 0081 01       		.byte	0x1
 1376 0082 3F       		.uleb128 0x3f
 1377 0083 19       		.uleb128 0x19
 1378 0084 03       		.uleb128 0x3
 1379 0085 0E       		.uleb128 0xe
 1380 0086 3A       		.uleb128 0x3a
 1381 0087 0B       		.uleb128 0xb
 1382 0088 3B       		.uleb128 0x3b
 1383 0089 0B       		.uleb128 0xb
 1384 008a 11       		.uleb128 0x11
 1385 008b 01       		.uleb128 0x1
 1386 008c 12       		.uleb128 0x12
 1387 008d 06       		.uleb128 0x6
 1388 008e 40       		.uleb128 0x40
 1389 008f 18       		.uleb128 0x18
 1390 0090 9742     		.uleb128 0x2117
 1391 0092 19       		.uleb128 0x19
 1392 0093 01       		.uleb128 0x1
 1393 0094 13       		.uleb128 0x13
 1394 0095 00       		.byte	0
 1395 0096 00       		.byte	0
 1396 0097 0B       		.uleb128 0xb
 1397 0098 34       		.uleb128 0x34
 1398 0099 00       		.byte	0
 1399 009a 03       		.uleb128 0x3
 1400 009b 08       		.uleb128 0x8
 1401 009c 3A       		.uleb128 0x3a
 1402 009d 0B       		.uleb128 0xb
 1403 009e 3B       		.uleb128 0x3b
 1404 009f 0B       		.uleb128 0xb
 1405 00a0 49       		.uleb128 0x49
 1406 00a1 13       		.uleb128 0x13
 1407 00a2 1C       		.uleb128 0x1c
 1408 00a3 0B       		.uleb128 0xb
 1409 00a4 00       		.byte	0
 1410 00a5 00       		.byte	0
 1411 00a6 0C       		.uleb128 0xc
 1412 00a7 34       		.uleb128 0x34
 1413 00a8 00       		.byte	0
 1414 00a9 03       		.uleb128 0x3
 1415 00aa 08       		.uleb128 0x8
 1416 00ab 3A       		.uleb128 0x3a
 1417 00ac 0B       		.uleb128 0xb
 1418 00ad 3B       		.uleb128 0x3b
 1419 00ae 0B       		.uleb128 0xb
 1420 00af 49       		.uleb128 0x49
 1421 00b0 13       		.uleb128 0x13
 1422 00b1 02       		.uleb128 0x2
 1423 00b2 18       		.uleb128 0x18
 1424 00b3 00       		.byte	0
 1425 00b4 00       		.byte	0
 1426 00b5 0D       		.uleb128 0xd
 1427 00b6 0B       		.uleb128 0xb
 1428 00b7 01       		.byte	0x1
 1429 00b8 11       		.uleb128 0x11
 1430 00b9 01       		.uleb128 0x1
 1431 00ba 12       		.uleb128 0x12
 1432 00bb 06       		.uleb128 0x6
 1433 00bc 01       		.uleb128 0x1
 1434 00bd 13       		.uleb128 0x13
 1435 00be 00       		.byte	0
 1436 00bf 00       		.byte	0
 1437 00c0 0E       		.uleb128 0xe
 1438 00c1 34       		.uleb128 0x34
 1439 00c2 00       		.byte	0
 1440 00c3 03       		.uleb128 0x3
 1441 00c4 08       		.uleb128 0x8
 1442 00c5 3A       		.uleb128 0x3a
 1443 00c6 0B       		.uleb128 0xb
 1444 00c7 3B       		.uleb128 0x3b
 1445 00c8 0B       		.uleb128 0xb
 1446 00c9 49       		.uleb128 0x49
 1447 00ca 13       		.uleb128 0x13
 1448 00cb 02       		.uleb128 0x2
 1449 00cc 17       		.uleb128 0x17
 1450 00cd 00       		.byte	0
 1451 00ce 00       		.byte	0
 1452 00cf 0F       		.uleb128 0xf
 1453 00d0 898201   		.uleb128 0x4109
 1454 00d3 01       		.byte	0x1
 1455 00d4 11       		.uleb128 0x11
 1456 00d5 01       		.uleb128 0x1
 1457 00d6 31       		.uleb128 0x31
 1458 00d7 13       		.uleb128 0x13
 1459 00d8 00       		.byte	0
 1460 00d9 00       		.byte	0
 1461 00da 10       		.uleb128 0x10
 1462 00db 8A8201   		.uleb128 0x410a
 1463 00de 00       		.byte	0
 1464 00df 02       		.uleb128 0x2
 1465 00e0 18       		.uleb128 0x18
 1466 00e1 9142     		.uleb128 0x2111
 1467 00e3 18       		.uleb128 0x18
 1468 00e4 00       		.byte	0
 1469 00e5 00       		.byte	0
 1470 00e6 11       		.uleb128 0x11
 1471 00e7 898201   		.uleb128 0x4109
 1472 00ea 01       		.byte	0x1
 1473 00eb 11       		.uleb128 0x11
 1474 00ec 01       		.uleb128 0x1
 1475 00ed 31       		.uleb128 0x31
 1476 00ee 13       		.uleb128 0x13
 1477 00ef 01       		.uleb128 0x1
 1478 00f0 13       		.uleb128 0x13
 1479 00f1 00       		.byte	0
 1480 00f2 00       		.byte	0
 1481 00f3 12       		.uleb128 0x12
 1482 00f4 01       		.uleb128 0x1
 1483 00f5 01       		.byte	0x1
 1484 00f6 49       		.uleb128 0x49
 1485 00f7 13       		.uleb128 0x13
 1486 00f8 01       		.uleb128 0x1
 1487 00f9 13       		.uleb128 0x13
 1488 00fa 00       		.byte	0
 1489 00fb 00       		.byte	0
 1490 00fc 13       		.uleb128 0x13
 1491 00fd 21       		.uleb128 0x21
 1492 00fe 00       		.byte	0
 1493 00ff 49       		.uleb128 0x49
 1494 0100 13       		.uleb128 0x13
 1495 0101 2F       		.uleb128 0x2f
 1496 0102 0B       		.uleb128 0xb
 1497 0103 00       		.byte	0
 1498 0104 00       		.byte	0
 1499 0105 14       		.uleb128 0x14
 1500 0106 2E       		.uleb128 0x2e
 1501 0107 00       		.byte	0
 1502 0108 3F       		.uleb128 0x3f
 1503 0109 19       		.uleb128 0x19
 1504 010a 03       		.uleb128 0x3
 1505 010b 0E       		.uleb128 0xe
 1506 010c 3A       		.uleb128 0x3a
 1507 010d 0B       		.uleb128 0xb
 1508 010e 3B       		.uleb128 0x3b
 1509 010f 0B       		.uleb128 0xb
 1510 0110 11       		.uleb128 0x11
 1511 0111 01       		.uleb128 0x1
 1512 0112 12       		.uleb128 0x12
 1513 0113 06       		.uleb128 0x6
 1514 0114 40       		.uleb128 0x40
 1515 0115 18       		.uleb128 0x18
 1516 0116 9742     		.uleb128 0x2117
 1517 0118 19       		.uleb128 0x19
 1518 0119 00       		.byte	0
 1519 011a 00       		.byte	0
 1520 011b 15       		.uleb128 0x15
 1521 011c 2E       		.uleb128 0x2e
 1522 011d 01       		.byte	0x1
 1523 011e 3F       		.uleb128 0x3f
 1524 011f 19       		.uleb128 0x19
 1525 0120 03       		.uleb128 0x3
 1526 0121 0E       		.uleb128 0xe
 1527 0122 3A       		.uleb128 0x3a
 1528 0123 0B       		.uleb128 0xb
 1529 0124 3B       		.uleb128 0x3b
 1530 0125 0B       		.uleb128 0xb
 1531 0126 27       		.uleb128 0x27
 1532 0127 19       		.uleb128 0x19
 1533 0128 11       		.uleb128 0x11
 1534 0129 01       		.uleb128 0x1
 1535 012a 12       		.uleb128 0x12
 1536 012b 06       		.uleb128 0x6
 1537 012c 40       		.uleb128 0x40
 1538 012d 18       		.uleb128 0x18
 1539 012e 9742     		.uleb128 0x2117
 1540 0130 19       		.uleb128 0x19
 1541 0131 01       		.uleb128 0x1
 1542 0132 13       		.uleb128 0x13
 1543 0133 00       		.byte	0
 1544 0134 00       		.byte	0
 1545 0135 16       		.uleb128 0x16
 1546 0136 05       		.uleb128 0x5
 1547 0137 00       		.byte	0
 1548 0138 03       		.uleb128 0x3
 1549 0139 0E       		.uleb128 0xe
 1550 013a 3A       		.uleb128 0x3a
 1551 013b 0B       		.uleb128 0xb
 1552 013c 3B       		.uleb128 0x3b
 1553 013d 0B       		.uleb128 0xb
 1554 013e 49       		.uleb128 0x49
 1555 013f 13       		.uleb128 0x13
 1556 0140 02       		.uleb128 0x2
 1557 0141 17       		.uleb128 0x17
 1558 0142 00       		.byte	0
 1559 0143 00       		.byte	0
 1560 0144 17       		.uleb128 0x17
 1561 0145 34       		.uleb128 0x34
 1562 0146 00       		.byte	0
 1563 0147 03       		.uleb128 0x3
 1564 0148 0E       		.uleb128 0xe
 1565 0149 3A       		.uleb128 0x3a
 1566 014a 0B       		.uleb128 0xb
 1567 014b 3B       		.uleb128 0x3b
 1568 014c 0B       		.uleb128 0xb
 1569 014d 49       		.uleb128 0x49
 1570 014e 13       		.uleb128 0x13
 1571 014f 02       		.uleb128 0x2
 1572 0150 18       		.uleb128 0x18
 1573 0151 00       		.byte	0
 1574 0152 00       		.byte	0
 1575 0153 18       		.uleb128 0x18
 1576 0154 35       		.uleb128 0x35
 1577 0155 00       		.byte	0
 1578 0156 49       		.uleb128 0x49
 1579 0157 13       		.uleb128 0x13
 1580 0158 00       		.byte	0
 1581 0159 00       		.byte	0
 1582 015a 19       		.uleb128 0x19
 1583 015b 2E       		.uleb128 0x2e
 1584 015c 01       		.byte	0x1
 1585 015d 3F       		.uleb128 0x3f
 1586 015e 19       		.uleb128 0x19
 1587 015f 03       		.uleb128 0x3
 1588 0160 0E       		.uleb128 0xe
 1589 0161 3A       		.uleb128 0x3a
 1590 0162 0B       		.uleb128 0xb
 1591 0163 3B       		.uleb128 0x3b
 1592 0164 0B       		.uleb128 0xb
 1593 0165 8701     		.uleb128 0x87
 1594 0167 19       		.uleb128 0x19
 1595 0168 11       		.uleb128 0x11
 1596 0169 01       		.uleb128 0x1
 1597 016a 12       		.uleb128 0x12
 1598 016b 06       		.uleb128 0x6
 1599 016c 40       		.uleb128 0x40
 1600 016d 18       		.uleb128 0x18
 1601 016e 9742     		.uleb128 0x2117
 1602 0170 19       		.uleb128 0x19
 1603 0171 01       		.uleb128 0x1
 1604 0172 13       		.uleb128 0x13
 1605 0173 00       		.byte	0
 1606 0174 00       		.byte	0
 1607 0175 1A       		.uleb128 0x1a
 1608 0176 34       		.uleb128 0x34
 1609 0177 00       		.byte	0
 1610 0178 03       		.uleb128 0x3
 1611 0179 0E       		.uleb128 0xe
 1612 017a 3A       		.uleb128 0x3a
 1613 017b 0B       		.uleb128 0xb
 1614 017c 3B       		.uleb128 0x3b
 1615 017d 0B       		.uleb128 0xb
 1616 017e 49       		.uleb128 0x49
 1617 017f 13       		.uleb128 0x13
 1618 0180 02       		.uleb128 0x2
 1619 0181 17       		.uleb128 0x17
 1620 0182 00       		.byte	0
 1621 0183 00       		.byte	0
 1622 0184 1B       		.uleb128 0x1b
 1623 0185 898201   		.uleb128 0x4109
 1624 0188 00       		.byte	0
 1625 0189 11       		.uleb128 0x11
 1626 018a 01       		.uleb128 0x1
 1627 018b 31       		.uleb128 0x31
 1628 018c 13       		.uleb128 0x13
 1629 018d 00       		.byte	0
 1630 018e 00       		.byte	0
 1631 018f 1C       		.uleb128 0x1c
 1632 0190 2E       		.uleb128 0x2e
 1633 0191 01       		.byte	0x1
 1634 0192 3F       		.uleb128 0x3f
 1635 0193 19       		.uleb128 0x19
 1636 0194 03       		.uleb128 0x3
 1637 0195 0E       		.uleb128 0xe
 1638 0196 3A       		.uleb128 0x3a
 1639 0197 0B       		.uleb128 0xb
 1640 0198 3B       		.uleb128 0x3b
 1641 0199 0B       		.uleb128 0xb
 1642 019a 49       		.uleb128 0x49
 1643 019b 13       		.uleb128 0x13
 1644 019c 11       		.uleb128 0x11
 1645 019d 01       		.uleb128 0x1
 1646 019e 12       		.uleb128 0x12
 1647 019f 06       		.uleb128 0x6
 1648 01a0 40       		.uleb128 0x40
 1649 01a1 18       		.uleb128 0x18
 1650 01a2 9742     		.uleb128 0x2117
 1651 01a4 19       		.uleb128 0x19
 1652 01a5 01       		.uleb128 0x1
 1653 01a6 13       		.uleb128 0x13
 1654 01a7 00       		.byte	0
 1655 01a8 00       		.byte	0
 1656 01a9 1D       		.uleb128 0x1d
 1657 01aa 1D       		.uleb128 0x1d
 1658 01ab 01       		.byte	0x1
 1659 01ac 31       		.uleb128 0x31
 1660 01ad 13       		.uleb128 0x13
 1661 01ae 52       		.uleb128 0x52
 1662 01af 01       		.uleb128 0x1
 1663 01b0 55       		.uleb128 0x55
 1664 01b1 17       		.uleb128 0x17
 1665 01b2 58       		.uleb128 0x58
 1666 01b3 0B       		.uleb128 0xb
 1667 01b4 59       		.uleb128 0x59
 1668 01b5 0B       		.uleb128 0xb
 1669 01b6 01       		.uleb128 0x1
 1670 01b7 13       		.uleb128 0x13
 1671 01b8 00       		.byte	0
 1672 01b9 00       		.byte	0
 1673 01ba 1E       		.uleb128 0x1e
 1674 01bb 1D       		.uleb128 0x1d
 1675 01bc 00       		.byte	0
 1676 01bd 31       		.uleb128 0x31
 1677 01be 13       		.uleb128 0x13
 1678 01bf 11       		.uleb128 0x11
 1679 01c0 01       		.uleb128 0x1
 1680 01c1 12       		.uleb128 0x12
 1681 01c2 06       		.uleb128 0x6
 1682 01c3 58       		.uleb128 0x58
 1683 01c4 0B       		.uleb128 0xb
 1684 01c5 59       		.uleb128 0x59
 1685 01c6 05       		.uleb128 0x5
 1686 01c7 00       		.byte	0
 1687 01c8 00       		.byte	0
 1688 01c9 1F       		.uleb128 0x1f
 1689 01ca 2E       		.uleb128 0x2e
 1690 01cb 00       		.byte	0
 1691 01cc 3F       		.uleb128 0x3f
 1692 01cd 19       		.uleb128 0x19
 1693 01ce 03       		.uleb128 0x3
 1694 01cf 0E       		.uleb128 0xe
 1695 01d0 3A       		.uleb128 0x3a
 1696 01d1 0B       		.uleb128 0xb
 1697 01d2 3B       		.uleb128 0x3b
 1698 01d3 0B       		.uleb128 0xb
 1699 01d4 49       		.uleb128 0x49
 1700 01d5 13       		.uleb128 0x13
 1701 01d6 11       		.uleb128 0x11
 1702 01d7 01       		.uleb128 0x1
 1703 01d8 12       		.uleb128 0x12
 1704 01d9 06       		.uleb128 0x6
 1705 01da 40       		.uleb128 0x40
 1706 01db 18       		.uleb128 0x18
 1707 01dc 9742     		.uleb128 0x2117
 1708 01de 19       		.uleb128 0x19
 1709 01df 00       		.byte	0
 1710 01e0 00       		.byte	0
 1711 01e1 20       		.uleb128 0x20
 1712 01e2 34       		.uleb128 0x34
 1713 01e3 00       		.byte	0
 1714 01e4 03       		.uleb128 0x3
 1715 01e5 08       		.uleb128 0x8
 1716 01e6 3A       		.uleb128 0x3a
 1717 01e7 0B       		.uleb128 0xb
 1718 01e8 3B       		.uleb128 0x3b
 1719 01e9 05       		.uleb128 0x5
 1720 01ea 49       		.uleb128 0x49
 1721 01eb 13       		.uleb128 0x13
 1722 01ec 3F       		.uleb128 0x3f
 1723 01ed 19       		.uleb128 0x19
 1724 01ee 3C       		.uleb128 0x3c
 1725 01ef 19       		.uleb128 0x19
 1726 01f0 00       		.byte	0
 1727 01f1 00       		.byte	0
 1728 01f2 21       		.uleb128 0x21
 1729 01f3 34       		.uleb128 0x34
 1730 01f4 00       		.byte	0
 1731 01f5 03       		.uleb128 0x3
 1732 01f6 0E       		.uleb128 0xe
 1733 01f7 3A       		.uleb128 0x3a
 1734 01f8 0B       		.uleb128 0xb
 1735 01f9 3B       		.uleb128 0x3b
 1736 01fa 05       		.uleb128 0x5
 1737 01fb 49       		.uleb128 0x49
 1738 01fc 13       		.uleb128 0x13
 1739 01fd 3F       		.uleb128 0x3f
 1740 01fe 19       		.uleb128 0x19
 1741 01ff 3C       		.uleb128 0x3c
 1742 0200 19       		.uleb128 0x19
 1743 0201 00       		.byte	0
 1744 0202 00       		.byte	0
 1745 0203 22       		.uleb128 0x22
 1746 0204 2E       		.uleb128 0x2e
 1747 0205 00       		.byte	0
 1748 0206 3F       		.uleb128 0x3f
 1749 0207 19       		.uleb128 0x19
 1750 0208 3C       		.uleb128 0x3c
 1751 0209 19       		.uleb128 0x19
 1752 020a 6E       		.uleb128 0x6e
 1753 020b 0E       		.uleb128 0xe
 1754 020c 03       		.uleb128 0x3
 1755 020d 0E       		.uleb128 0xe
 1756 020e 3A       		.uleb128 0x3a
 1757 020f 0B       		.uleb128 0xb
 1758 0210 3B       		.uleb128 0x3b
 1759 0211 0B       		.uleb128 0xb
 1760 0212 6E       		.uleb128 0x6e
 1761 0213 0E       		.uleb128 0xe
 1762 0214 00       		.byte	0
 1763 0215 00       		.byte	0
 1764 0216 23       		.uleb128 0x23
 1765 0217 2E       		.uleb128 0x2e
 1766 0218 00       		.byte	0
 1767 0219 3F       		.uleb128 0x3f
 1768 021a 19       		.uleb128 0x19
 1769 021b 3C       		.uleb128 0x3c
 1770 021c 19       		.uleb128 0x19
 1771 021d 6E       		.uleb128 0x6e
 1772 021e 0E       		.uleb128 0xe
 1773 021f 03       		.uleb128 0x3
 1774 0220 0E       		.uleb128 0xe
 1775 0221 3A       		.uleb128 0x3a
 1776 0222 0B       		.uleb128 0xb
 1777 0223 3B       		.uleb128 0x3b
 1778 0224 0B       		.uleb128 0xb
 1779 0225 00       		.byte	0
 1780 0226 00       		.byte	0
 1781 0227 00       		.byte	0
 1782              		.section	.debug_loc,"",%progbits
 1783              	.Ldebug_loc0:
 1784              	.LLST0:
 1785 0000 00000000 		.4byte	.LVL0
 1786 0004 04000000 		.4byte	.LVL1
 1787 0008 0200     		.2byte	0x2
 1788 000a 30       		.byte	0x30
 1789 000b 9F       		.byte	0x9f
 1790 000c 04000000 		.4byte	.LVL1
 1791 0010 08000000 		.4byte	.LVL2
 1792 0014 0600     		.2byte	0x6
 1793 0016 08       		.byte	0x8
 1794 0017 32       		.byte	0x32
 1795 0018 74       		.byte	0x74
 1796 0019 00       		.sleb128 0
 1797 001a 1C       		.byte	0x1c
 1798 001b 9F       		.byte	0x9f
 1799 001c 00000000 		.4byte	0
 1800 0020 00000000 		.4byte	0
 1801              	.LLST1:
 1802 0024 58000000 		.4byte	.LVL6
 1803 0028 5E000000 		.4byte	.LVL7
 1804 002c 0100     		.2byte	0x1
 1805 002e 50       		.byte	0x50
 1806 002f 5E000000 		.4byte	.LVL7
 1807 0033 64000000 		.4byte	.LVL8
 1808 0037 0300     		.2byte	0x3
 1809 0039 70       		.byte	0x70
 1810 003a 78       		.sleb128 -8
 1811 003b 9F       		.byte	0x9f
 1812 003c 64000000 		.4byte	.LVL8
 1813 0040 74000000 		.4byte	.LFE399
 1814 0044 0400     		.2byte	0x4
 1815 0046 F3       		.byte	0xf3
 1816 0047 01       		.uleb128 0x1
 1817 0048 50       		.byte	0x50
 1818 0049 9F       		.byte	0x9f
 1819 004a 00000000 		.4byte	0
 1820 004e 00000000 		.4byte	0
 1821              	.LLST2:
 1822 0052 74000000 		.4byte	.LVL9
 1823 0056 7A000000 		.4byte	.LVL10
 1824 005a 0100     		.2byte	0x1
 1825 005c 50       		.byte	0x50
 1826 005d 7A000000 		.4byte	.LVL10
 1827 0061 8C000000 		.4byte	.LFE400
 1828 0065 0400     		.2byte	0x4
 1829 0067 F3       		.byte	0xf3
 1830 0068 01       		.uleb128 0x1
 1831 0069 50       		.byte	0x50
 1832 006a 9F       		.byte	0x9f
 1833 006b 00000000 		.4byte	0
 1834 006f 00000000 		.4byte	0
 1835              	.LLST3:
 1836 0073 AC000000 		.4byte	.LVL11
 1837 0077 B0000000 		.4byte	.LVL12
 1838 007b 0200     		.2byte	0x2
 1839 007d 30       		.byte	0x30
 1840 007e 9F       		.byte	0x9f
 1841 007f B0000000 		.4byte	.LVL12
 1842 0083 C7000000 		.4byte	.LVL13-1
 1843 0087 0100     		.2byte	0x1
 1844 0089 51       		.byte	0x51
 1845 008a D4000000 		.4byte	.LVL16
 1846 008e DC000000 		.4byte	.LFE394
 1847 0092 0100     		.2byte	0x1
 1848 0094 51       		.byte	0x51
 1849 0095 00000000 		.4byte	0
 1850 0099 00000000 		.4byte	0
 1851              	.LLST4:
 1852 009d 26010000 		.4byte	.LVL22
 1853 00a1 28010000 		.4byte	.LVL23
 1854 00a5 0200     		.2byte	0x2
 1855 00a7 30       		.byte	0x30
 1856 00a8 9F       		.byte	0x9f
 1857 00a9 28010000 		.4byte	.LVL23
 1858 00ad 2B010000 		.4byte	.LVL24-1
 1859 00b1 0100     		.2byte	0x1
 1860 00b3 51       		.byte	0x51
 1861 00b4 2E010000 		.4byte	.LVL25
 1862 00b8 38010000 		.4byte	.LVL27
 1863 00bc 0200     		.2byte	0x2
 1864 00be 31       		.byte	0x31
 1865 00bf 9F       		.byte	0x9f
 1866 00c0 5A010000 		.4byte	.LVL33
 1867 00c4 5C010000 		.4byte	.LVL34
 1868 00c8 0200     		.2byte	0x2
 1869 00ca 30       		.byte	0x30
 1870 00cb 9F       		.byte	0x9f
 1871 00cc 00000000 		.4byte	0
 1872 00d0 00000000 		.4byte	0
 1873              	.LLST5:
 1874 00d4 42010000 		.4byte	.LVL29
 1875 00d8 49010000 		.4byte	.LVL30-1
 1876 00dc 0100     		.2byte	0x1
 1877 00de 51       		.byte	0x51
 1878 00df 4E010000 		.4byte	.LVL31
 1879 00e3 50010000 		.4byte	.LVL32
 1880 00e7 0300     		.2byte	0x3
 1881 00e9 71       		.byte	0x71
 1882 00ea 01       		.sleb128 1
 1883 00eb 9F       		.byte	0x9f
 1884 00ec 00000000 		.4byte	0
 1885 00f0 00000000 		.4byte	0
 1886              		.section	.debug_aranges,"",%progbits
 1887 0000 24000000 		.4byte	0x24
 1888 0004 0200     		.2byte	0x2
 1889 0006 00000000 		.4byte	.Ldebug_info0
 1890 000a 04       		.byte	0x4
 1891 000b 00       		.byte	0
 1892 000c 0000     		.2byte	0
 1893 000e 0000     		.2byte	0
 1894 0010 00000000 		.4byte	.Ltext0
 1895 0014 64010000 		.4byte	.Letext0-.Ltext0
 1896 0018 00000000 		.4byte	.LFB397
 1897 001c 24000000 		.4byte	.LFE397-.LFB397
 1898 0020 00000000 		.4byte	0
 1899 0024 00000000 		.4byte	0
 1900              		.section	.debug_ranges,"",%progbits
 1901              	.Ldebug_ranges0:
 1902 0000 00000000 		.4byte	.LBB9
 1903 0004 02000000 		.4byte	.LBE9
 1904 0008 04000000 		.4byte	.LBB14
 1905 000c 10000000 		.4byte	.LBE14
 1906 0010 00000000 		.4byte	0
 1907 0014 00000000 		.4byte	0
 1908 0018 00000000 		.4byte	.Ltext0
 1909 001c 64010000 		.4byte	.Letext0
 1910 0020 00000000 		.4byte	.LFB397
 1911 0024 24000000 		.4byte	.LFE397
 1912 0028 00000000 		.4byte	0
 1913 002c 00000000 		.4byte	0
 1914              		.section	.debug_line,"",%progbits
 1915              	.Ldebug_line0:
 1916 0000 7C010000 		.section	.debug_str,"MS",%progbits,1
 1916      0200C700 
 1916      00000201 
 1916      FB0E0D00 
 1916      01010101 
 1917              	.LASF36:
 1918 0000 41484231 		.ascii	"AHB1LPENR\000"
 1918      4C50454E 
 1918      5200
 1919              	.LASF76:
 1920 000a 656E636C 		.ascii	"enclenche\000"
 1920      656E6368 
 1920      6500
 1921              	.LASF43:
 1922 0014 5F726573 		.ascii	"_reserved_0x6c\000"
 1922      65727665 
 1922      645F3078 
 1922      366300
 1923              	.LASF24:
 1924 0023 41504231 		.ascii	"APB1RSTR\000"
 1924      52535452 
 1924      00
 1925              	.LASF89:
 1926 002c 5F5F6275 		.ascii	"__builtin_putchar\000"
 1926      696C7469 
 1926      6E5F7075 
 1926      74636861 
 1926      7200
 1927              	.LASF14:
 1928 003e 696E7438 		.ascii	"int8_t\000"
 1928      5F7400
 1929              	.LASF80:
 1930 0045 7363616E 		.ascii	"scanf\000"
 1930      6600
 1931              	.LASF2:
 1932 004b 73686F72 		.ascii	"short int\000"
 1932      7420696E 
 1932      7400
 1933              	.LASF12:
 1934 0055 73697A65 		.ascii	"sizetype\000"
 1934      74797065 
 1934      00
 1935              	.LASF44:
 1936 005e 42444352 		.ascii	"BDCR\000"
 1936      00
 1937              	.LASF88:
 1938 0063 70757463 		.ascii	"putchar\000"
 1938      68617200 
 1939              	.LASF45:
 1940 006b 5F726573 		.ascii	"_reserved_0x78\000"
 1940      65727665 
 1940      645F3078 
 1940      373800
 1941              	.LASF48:
 1942 007a 504C4C49 		.ascii	"PLLI2SCFGR\000"
 1942      32534346 
 1942      475200
 1943              	.LASF11:
 1944 0085 6C6F6E67 		.ascii	"long double\000"
 1944      20646F75 
 1944      626C6500 
 1945              	.LASF6:
 1946 0091 5F5F7569 		.ascii	"__uint32_t\000"
 1946      6E743332 
 1946      5F7400
 1947              	.LASF47:
 1948 009c 53534347 		.ascii	"SSCGR\000"
 1948      5200
 1949              	.LASF54:
 1950 00a2 4750494F 		.ascii	"GPIO_registers\000"
 1950      5F726567 
 1950      69737465 
 1950      727300
 1951              	.LASF71:
 1952 00b1 6C65645F 		.ascii	"led_init\000"
 1952      696E6974 
 1952      00
 1953              	.LASF38:
 1954 00ba 41484233 		.ascii	"AHB3LPENR\000"
 1954      4C50454E 
 1954      5200
 1955              	.LASF52:
 1956 00c4 44434B43 		.ascii	"DCKCFGR2\000"
 1956      46475232 
 1956      00
 1957              	.LASF19:
 1958 00cd 43464752 		.ascii	"CFGR\000"
 1958      00
 1959              	.LASF70:
 1960 00d2 696E6465 		.ascii	"index\000"
 1960      7800
 1961              	.LASF34:
 1962 00d8 5F726573 		.ascii	"_reserved_0x48\000"
 1962      65727665 
 1962      645F3078 
 1962      343800
 1963              	.LASF32:
 1964 00e7 41504231 		.ascii	"APB1ENR\000"
 1964      454E5200 
 1965              	.LASF84:
 1966 00ef 2F696E76 		.ascii	"/invite/Bureau/SPC/C_project\000"
 1966      6974652F 
 1966      42757265 
 1966      61752F53 
 1966      50432F43 
 1967              	.LASF51:
 1968 010c 434B4741 		.ascii	"CKGATENR\000"
 1968      54454E52 
 1968      00
 1969              	.LASF40:
 1970 0115 41504231 		.ascii	"APB1LPENR\000"
 1970      4C50454E 
 1970      5200
 1971              	.LASF56:
 1972 011f 4F545950 		.ascii	"OTYPER\000"
 1972      455200
 1973              	.LASF50:
 1974 0126 44434B43 		.ascii	"DCKCFGR\000"
 1974      46475200 
 1975              	.LASF46:
 1976 012e 5F726573 		.ascii	"_reserved_0x7c\000"
 1976      65727665 
 1976      645F3078 
 1976      376300
 1977              	.LASF29:
 1978 013d 41484232 		.ascii	"AHB2ENR\000"
 1978      454E5200 
 1979              	.LASF17:
 1980 0145 666C6F61 		.ascii	"float\000"
 1980      7400
 1981              	.LASF30:
 1982 014b 41484233 		.ascii	"AHB3ENR\000"
 1982      454E5200 
 1983              	.LASF79:
 1984 0153 4750494F 		.ascii	"GPIOA\000"
 1984      4100
 1985              	.LASF8:
 1986 0159 6C6F6E67 		.ascii	"long long int\000"
 1986      206C6F6E 
 1986      6720696E 
 1986      7400
 1987              	.LASF78:
 1988 0167 4750494F 		.ascii	"GPIOB\000"
 1988      4200
 1989              	.LASF58:
 1990 016d 50555044 		.ascii	"PUPDR\000"
 1990      5200
 1991              	.LASF74:
 1992 0173 65786F31 		.ascii	"exo1_1\000"
 1992      5F3100
 1993              	.LASF69:
 1994 017a 65786F31 		.ascii	"exo1_2\000"
 1994      5F3200
 1995              	.LASF75:
 1996 0181 65786F31 		.ascii	"exo1_3\000"
 1996      5F3300
 1997              	.LASF4:
 1998 0188 6C6F6E67 		.ascii	"long int\000"
 1998      20696E74 
 1998      00
 1999              	.LASF59:
 2000 0191 42535252 		.ascii	"BSRR\000"
 2000      00
 2001              	.LASF86:
 2002 0196 656E6162 		.ascii	"enable_GPIOA\000"
 2002      6C655F47 
 2002      50494F41 
 2002      00
 2003              	.LASF55:
 2004 01a3 4D4F4445 		.ascii	"MODER\000"
 2004      5200
 2005              	.LASF25:
 2006 01a9 41504232 		.ascii	"APB2RSTR\000"
 2006      52535452 
 2006      00
 2007              	.LASF5:
 2008 01b2 5F5F696E 		.ascii	"__int8_t\000"
 2008      74385F74 
 2008      00
 2009              	.LASF72:
 2010 01bb 62757474 		.ascii	"button_init\000"
 2010      6F6E5F69 
 2010      6E697400 
 2011              	.LASF1:
 2012 01c7 756E7369 		.ascii	"unsigned char\000"
 2012      676E6564 
 2012      20636861 
 2012      7200
 2013              	.LASF35:
 2014 01d5 5F726573 		.ascii	"_reserved_0x4c\000"
 2014      65727665 
 2014      645F3078 
 2014      346300
 2015              	.LASF33:
 2016 01e4 41504232 		.ascii	"APB2ENR\000"
 2016      454E5200 
 2017              	.LASF85:
 2018 01ec 5F5F4453 		.ascii	"__DSB\000"
 2018      4200
 2019              	.LASF9:
 2020 01f2 6C6F6E67 		.ascii	"long long unsigned int\000"
 2020      206C6F6E 
 2020      6720756E 
 2020      7369676E 
 2020      65642069 
 2021              	.LASF15:
 2022 0209 75696E74 		.ascii	"uint32_t\000"
 2022      33325F74 
 2022      00
 2023              	.LASF10:
 2024 0212 756E7369 		.ascii	"unsigned int\000"
 2024      676E6564 
 2024      20696E74 
 2024      00
 2025              	.LASF21:
 2026 021f 41484232 		.ascii	"AHB2RSTR\000"
 2026      52535452 
 2026      00
 2027              	.LASF53:
 2028 0228 5243435F 		.ascii	"RCC_registers\000"
 2028      72656769 
 2028      73746572 
 2028      7300
 2029              	.LASF81:
 2030 0236 70757473 		.ascii	"puts\000"
 2030      00
 2031              	.LASF77:
 2032 023b 4750494F 		.ascii	"GPIOC\000"
 2032      4300
 2033              	.LASF62:
 2034 0241 41465248 		.ascii	"AFRH\000"
 2034      00
 2035              	.LASF18:
 2036 0246 504C4C43 		.ascii	"PLLCFGR\000"
 2036      46475200 
 2037              	.LASF68:
 2038 024e 64757265 		.ascii	"duree\000"
 2038      6500
 2039              	.LASF61:
 2040 0254 4146524C 		.ascii	"AFRL\000"
 2040      00
 2041              	.LASF65:
 2042 0259 73746174 		.ascii	"status\000"
 2042      757300
 2043              	.LASF13:
 2044 0260 63686172 		.ascii	"char\000"
 2044      00
 2045              	.LASF73:
 2046 0265 6D61696E 		.ascii	"main\000"
 2046      00
 2047              	.LASF83:
 2048 026a 7372632F 		.ascii	"src/main.c\000"
 2048      6D61696E 
 2048      2E6300
 2049              	.LASF66:
 2050 0275 65786F32 		.ascii	"exo2\000"
 2050      00
 2051              	.LASF23:
 2052 027a 5F726573 		.ascii	"_reserved_0x1c\000"
 2052      65727665 
 2052      645F3078 
 2052      316300
 2053              	.LASF37:
 2054 0289 41484232 		.ascii	"AHB2LPENR\000"
 2054      4C50454E 
 2054      5200
 2055              	.LASF3:
 2056 0293 73686F72 		.ascii	"short unsigned int\000"
 2056      7420756E 
 2056      7369676E 
 2056      65642069 
 2056      6E7400
 2057              	.LASF63:
 2058 02a6 6C65645F 		.ascii	"led_tri_set\000"
 2058      7472695F 
 2058      73657400 
 2059              	.LASF57:
 2060 02b2 4F535045 		.ascii	"OSPEEDR\000"
 2060      45445200 
 2061              	.LASF7:
 2062 02ba 6C6F6E67 		.ascii	"long unsigned int\000"
 2062      20756E73 
 2062      69676E65 
 2062      6420696E 
 2062      7400
 2063              	.LASF67:
 2064 02cc 74656D70 		.ascii	"tempo_250ms\000"
 2064      6F5F3235 
 2064      306D7300 
 2065              	.LASF16:
 2066 02d8 646F7562 		.ascii	"double\000"
 2066      6C6500
 2067              	.LASF39:
 2068 02df 5F726573 		.ascii	"_reserved_0x5c\000"
 2068      65727665 
 2068      645F3078 
 2068      356300
 2069              	.LASF31:
 2070 02ee 5F726573 		.ascii	"_reserved_0x3c\000"
 2070      65727665 
 2070      645F3078 
 2070      336300
 2071              	.LASF64:
 2072 02fd 6C65645F 		.ascii	"led_pa5\000"
 2072      70613500 
 2073              	.LASF28:
 2074 0305 41484231 		.ascii	"AHB1ENR\000"
 2074      454E5200 
 2075              	.LASF0:
 2076 030d 7369676E 		.ascii	"signed char\000"
 2076      65642063 
 2076      68617200 
 2077              	.LASF82:
 2078 0319 474E5520 		.ascii	"GNU C11 5.4.1 20160919 -mtune=cortex-m4 -mthumb -ma"
 2078      43313120 
 2078      352E342E 
 2078      31203230 
 2078      31363039 
 2079 034c 7263683D 		.ascii	"rch=armv7e-m -mfloat-abi=hard -mfpu=fpv4-sp-d16 -g "
 2079      61726D76 
 2079      37652D6D 
 2079      202D6D66 
 2079      6C6F6174 
 2080 037f 2D4F3020 		.ascii	"-O0 -Os -fsingle-precision-constant\000"
 2080      2D4F7320 
 2080      2D667369 
 2080      6E676C65 
 2080      2D707265 
 2081              	.LASF42:
 2082 03a3 5F726573 		.ascii	"_reserved_0x68\000"
 2082      65727665 
 2082      645F3078 
 2082      363800
 2083              	.LASF20:
 2084 03b2 41484231 		.ascii	"AHB1RSTR\000"
 2084      52535452 
 2084      00
 2085              	.LASF26:
 2086 03bb 5F726573 		.ascii	"_reserved_0x28\000"
 2086      65727665 
 2086      645F3078 
 2086      323800
 2087              	.LASF22:
 2088 03ca 41484233 		.ascii	"AHB3RSTR\000"
 2088      52535452 
 2088      00
 2089              	.LASF87:
 2090 03d3 62757474 		.ascii	"button_poll\000"
 2090      6F6E5F70 
 2090      6F6C6C00 
 2091              	.LASF49:
 2092 03df 504C4C53 		.ascii	"PLLSAICFGR\000"
 2092      41494346 
 2092      475200
 2093              	.LASF60:
 2094 03ea 4C434B52 		.ascii	"LCKR\000"
 2094      00
 2095              	.LASF41:
 2096 03ef 41504232 		.ascii	"APB2LPENR\000"
 2096      4C50454E 
 2096      5200
 2097              	.LASF27:
 2098 03f9 5F726573 		.ascii	"_reserved_0x2c\000"
 2098      65727665 
 2098      645F3078 
 2098      326300
 2099              		.ident	"GCC: (15:5.4.1+svn241155-1) 5.4.1 20160919"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccMwiTrE.s:21     .text:0000000000000000 $t
     /tmp/ccMwiTrE.s:26     .text:0000000000000000 exo2
     /tmp/ccMwiTrE.s:70     .text:0000000000000024 $d
     /tmp/ccMwiTrE.s:74     .text:0000000000000028 $t
     /tmp/ccMwiTrE.s:79     .text:0000000000000028 led_init
     /tmp/ccMwiTrE.s:107    .text:0000000000000054 $d
     /tmp/ccMwiTrE.s:111    .text:0000000000000058 $t
     /tmp/ccMwiTrE.s:116    .text:0000000000000058 led_tri_set
     /tmp/ccMwiTrE.s:139    .text:0000000000000070 $d
     /tmp/ccMwiTrE.s:143    .text:0000000000000074 $t
     /tmp/ccMwiTrE.s:148    .text:0000000000000074 led_pa5
     /tmp/ccMwiTrE.s:169    .text:0000000000000088 $d
     /tmp/ccMwiTrE.s:173    .text:000000000000008c $t
     /tmp/ccMwiTrE.s:178    .text:000000000000008c tempo_250ms
     /tmp/ccMwiTrE.s:210    .text:00000000000000a8 $d
     /tmp/ccMwiTrE.s:214    .text:00000000000000ac $t
     /tmp/ccMwiTrE.s:219    .text:00000000000000ac exo1_2
     /tmp/ccMwiTrE.s:258    .text:00000000000000d8 $d
     /tmp/ccMwiTrE.s:262    .text:00000000000000dc $t
     /tmp/ccMwiTrE.s:267    .text:00000000000000dc button_init
     /tmp/ccMwiTrE.s:290    .text:00000000000000f4 $d
     /tmp/ccMwiTrE.s:296    .text.startup:0000000000000000 $t
     /tmp/ccMwiTrE.s:301    .text.startup:0000000000000000 main
     /tmp/ccMwiTrE.s:354    .text.startup:0000000000000020 $d
     /tmp/ccMwiTrE.s:359    .text:00000000000000fc $t
     /tmp/ccMwiTrE.s:364    .text:00000000000000fc button_poll
     /tmp/ccMwiTrE.s:381    .text:000000000000010c $d
     /tmp/ccMwiTrE.s:385    .text:0000000000000110 $t
     /tmp/ccMwiTrE.s:390    .text:0000000000000110 exo1_1
     /tmp/ccMwiTrE.s:422    .text:0000000000000124 exo1_3
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
putchar
scanf
puts
GPIOA
GPIOB
GPIOC
RCC
